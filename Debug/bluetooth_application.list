
bluetooth_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d30  08005d30  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  08005d30  08005d30  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d30  08005d30  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d34  08005d34  00015d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08005d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea8  200001a4  08005edc  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000204c  08005edc  0002204c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014572  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310f  00000000  00000000  00034782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00037898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d89  00000000  00000000  000389f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003180  00000000  00000000  00039781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015372  00000000  00000000  0003c901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e3e1  00000000  00000000  00051c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000480c  00000000  00000000  000e0054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e4860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a4 	.word	0x200001a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bb0 	.word	0x08005bb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001a8 	.word	0x200001a8
 800014c:	08005bb0 	.word	0x08005bb0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fcac 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f86a 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f91c 	bl	8000398 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000160:	f000 f8a2 	bl	80002a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8ce 	bl	8000304 <MX_USART1_UART_Init>
  MX_WWDG_Init();
 8000168:	f000 f8f6 	bl	8000358 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  initOLED(&hi2c1);
 800016c:	481e      	ldr	r0, [pc, #120]	; (80001e8 <main+0x98>)
 800016e:	f000 f97d 	bl	800046c <initOLED>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000172:	f002 fe5d 	bl	8002e30 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex */
  myMutexHandle = osMutexNew(&myMutex_attributes);
 8000176:	481d      	ldr	r0, [pc, #116]	; (80001ec <main+0x9c>)
 8000178:	f002 ff98 	bl	80030ac <osMutexNew>
 800017c:	4603      	mov	r3, r0
 800017e:	4a1c      	ldr	r2, [pc, #112]	; (80001f0 <main+0xa0>)
 8000180:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of mainQueue */
  mainQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &mainQueue_attributes);
 8000182:	4a1c      	ldr	r2, [pc, #112]	; (80001f4 <main+0xa4>)
 8000184:	2102      	movs	r1, #2
 8000186:	2010      	movs	r0, #16
 8000188:	f003 f82a 	bl	80031e0 <osMessageQueueNew>
 800018c:	4603      	mov	r3, r0
 800018e:	4a1a      	ldr	r2, [pc, #104]	; (80001f8 <main+0xa8>)
 8000190:	6013      	str	r3, [r2, #0]

  /* creation of bluetoothQueue */
  bluetoothQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &bluetoothQueue_attributes);
 8000192:	4a1a      	ldr	r2, [pc, #104]	; (80001fc <main+0xac>)
 8000194:	2102      	movs	r1, #2
 8000196:	2010      	movs	r0, #16
 8000198:	f003 f822 	bl	80031e0 <osMessageQueueNew>
 800019c:	4603      	mov	r3, r0
 800019e:	4a18      	ldr	r2, [pc, #96]	; (8000200 <main+0xb0>)
 80001a0:	6013      	str	r3, [r2, #0]

  /* creation of screenQueue */
  screenQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &screenQueue_attributes);
 80001a2:	4a18      	ldr	r2, [pc, #96]	; (8000204 <main+0xb4>)
 80001a4:	2102      	movs	r1, #2
 80001a6:	2010      	movs	r0, #16
 80001a8:	f003 f81a 	bl	80031e0 <osMessageQueueNew>
 80001ac:	4603      	mov	r3, r0
 80001ae:	4a16      	ldr	r2, [pc, #88]	; (8000208 <main+0xb8>)
 80001b0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bluetoothTask */
  bluetoothTaskHandle = osThreadNew(StartDefaultTask, NULL, &bluetoothTask_attributes);
 80001b2:	4a16      	ldr	r2, [pc, #88]	; (800020c <main+0xbc>)
 80001b4:	2100      	movs	r1, #0
 80001b6:	4816      	ldr	r0, [pc, #88]	; (8000210 <main+0xc0>)
 80001b8:	f002 fea0 	bl	8002efc <osThreadNew>
 80001bc:	4603      	mov	r3, r0
 80001be:	4a15      	ldr	r2, [pc, #84]	; (8000214 <main+0xc4>)
 80001c0:	6013      	str	r3, [r2, #0]

  /* creation of mainTask */
  mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 80001c2:	4a15      	ldr	r2, [pc, #84]	; (8000218 <main+0xc8>)
 80001c4:	2100      	movs	r1, #0
 80001c6:	4815      	ldr	r0, [pc, #84]	; (800021c <main+0xcc>)
 80001c8:	f002 fe98 	bl	8002efc <osThreadNew>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a14      	ldr	r2, [pc, #80]	; (8000220 <main+0xd0>)
 80001d0:	6013      	str	r3, [r2, #0]

  /* creation of screenTask */
  screenTaskHandle = osThreadNew(ScreenTask, NULL, &screenTask_attributes);
 80001d2:	4a14      	ldr	r2, [pc, #80]	; (8000224 <main+0xd4>)
 80001d4:	2100      	movs	r1, #0
 80001d6:	4814      	ldr	r0, [pc, #80]	; (8000228 <main+0xd8>)
 80001d8:	f002 fe90 	bl	8002efc <osThreadNew>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a13      	ldr	r2, [pc, #76]	; (800022c <main+0xdc>)
 80001e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001e2:	f002 fe57 	bl	8002e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x96>
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	08005cf4 	.word	0x08005cf4
 80001f0:	20000288 	.word	0x20000288
 80001f4:	08005cac 	.word	0x08005cac
 80001f8:	2000027c 	.word	0x2000027c
 80001fc:	08005cc4 	.word	0x08005cc4
 8000200:	20000280 	.word	0x20000280
 8000204:	08005cdc 	.word	0x08005cdc
 8000208:	20000284 	.word	0x20000284
 800020c:	08005c40 	.word	0x08005c40
 8000210:	08000431 	.word	0x08000431
 8000214:	20000270 	.word	0x20000270
 8000218:	08005c64 	.word	0x08005c64
 800021c:	08000441 	.word	0x08000441
 8000220:	20000274 	.word	0x20000274
 8000224:	08005c88 	.word	0x08005c88
 8000228:	08000451 	.word	0x08000451
 800022c:	20000278 	.word	0x20000278

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	; 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f005 fc7c 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fc7c 	bl	8001b64 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000272:	f000 f8f5 	bl	8000460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 feea 	bl	8002068 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f8e1 	bl	8000460 <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	; 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002ae:	4a13      	ldr	r2, [pc, #76]	; (80002fc <MX_I2C1_Init+0x54>)
 80002b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <MX_I2C1_Init+0x58>)
 80002b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_I2C1_Init+0x50>)
 80002e6:	f000 ffa1 	bl	800122c <HAL_I2C_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002f0:	f000 f8b6 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200001c0 	.word	0x200001c0
 80002fc:	40005400 	.word	0x40005400
 8000300:	000186a0 	.word	0x000186a0

08000304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_USART1_UART_Init+0x50>)
 800030c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800032a:	220c      	movs	r2, #12
 800032c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_USART1_UART_Init+0x4c>)
 800033c:	f002 f822 	bl	8002384 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000346:	f000 f88b 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000214 	.word	0x20000214
 8000354:	40013800 	.word	0x40013800

08000358 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_WWDG_Init+0x38>)
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <MX_WWDG_Init+0x3c>)
 8000360:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_WWDG_Init+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_WWDG_Init+0x38>)
 800036a:	2240      	movs	r2, #64	; 0x40
 800036c:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_WWDG_Init+0x38>)
 8000370:	2240      	movs	r2, #64	; 0x40
 8000372:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_WWDG_Init+0x38>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_WWDG_Init+0x38>)
 800037c:	f002 fd34 	bl	8002de8 <HAL_WWDG_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8000386:	f000 f86b 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	2000025c 	.word	0x2000025c
 8000394:	40002c00 	.word	0x40002c00

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_GPIO_Init+0x90>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a1d      	ldr	r2, [pc, #116]	; (8000428 <MX_GPIO_Init+0x90>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_GPIO_Init+0x90>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_GPIO_Init+0x90>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a17      	ldr	r2, [pc, #92]	; (8000428 <MX_GPIO_Init+0x90>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_GPIO_Init+0x90>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0304 	and.w	r3, r3, #4
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_GPIO_Init+0x90>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <MX_GPIO_Init+0x90>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_GPIO_Init+0x94>)
 80003fc:	f000 fefe 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0x94>)
 800041a:	f000 fd6b 	bl	8000ef4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800041e:	bf00      	nop
 8000420:	3720      	adds	r7, #32
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40011000 	.word	0x40011000

08000430 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000438:	2001      	movs	r0, #1
 800043a:	f002 fe09 	bl	8003050 <osDelay>
 800043e:	e7fb      	b.n	8000438 <StartDefaultTask+0x8>

08000440 <MainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f002 fe01 	bl	8003050 <osDelay>
 800044e:	e7fb      	b.n	8000448 <MainTask+0x8>

08000450 <ScreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScreenTask */
void ScreenTask(void *argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScreenTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000458:	2001      	movs	r0, #1
 800045a:	f002 fdf9 	bl	8003050 <osDelay>
 800045e:	e7fb      	b.n	8000458 <ScreenTask+0x8>

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000464:	b672      	cpsid	i
}
 8000466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000468:	e7fe      	b.n	8000468 <Error_Handler+0x8>
	...

0800046c <initOLED>:
0x30, 0x10, 0x10, 0x10, 0x08, 0x08, 0x10, 0x10, 0x10, 0x30,  // }
0x00, 0x00, 0x00, 0x74, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00,  // ~
};

void initOLED(I2C_HandleTypeDef *i2cInstance)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  memset(screenBuff, 0, BUFF_SIZE);
 8000474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000478:	2100      	movs	r1, #0
 800047a:	480c      	ldr	r0, [pc, #48]	; (80004ac <initOLED+0x40>)
 800047c:	f005 fb5e 	bl	8005b3c <memset>
  memset(cmdBuff, 0, WIRE_MAX);
 8000480:	2220      	movs	r2, #32
 8000482:	2100      	movs	r1, #0
 8000484:	480a      	ldr	r0, [pc, #40]	; (80004b0 <initOLED+0x44>)
 8000486:	f005 fb59 	bl	8005b3c <memset>
  i2c1 = i2cInstance;
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <initOLED+0x48>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6013      	str	r3, [r2, #0]
  initDisplay();
 8000490:	f000 f87a 	bl	8000588 <initDisplay>
  drawImage(logo_bmp,67,45); 
 8000494:	222d      	movs	r2, #45	; 0x2d
 8000496:	2143      	movs	r1, #67	; 0x43
 8000498:	4807      	ldr	r0, [pc, #28]	; (80004b8 <initOLED+0x4c>)
 800049a:	f000 f9aa 	bl	80007f2 <drawImage>
  display();
 800049e:	f000 f8c5 	bl	800062c <display>
  return;
 80004a2:	bf00      	nop
}
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200002dc 	.word	0x200002dc
 80004b0:	200006dc 	.word	0x200006dc
 80004b4:	200006fc 	.word	0x200006fc
 80004b8:	20000000 	.word	0x20000000

080004bc <write_cmd>:

static void write_cmd(uint8_t c)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
  uint8_t buffTemp[3];
  memset(screenBuff, 0, 3);
 80004c6:	2203      	movs	r2, #3
 80004c8:	2100      	movs	r1, #0
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <write_cmd+0x38>)
 80004cc:	f005 fb36 	bl	8005b3c <memset>
  buffTemp[0] = 0x00;
 80004d0:	2300      	movs	r3, #0
 80004d2:	733b      	strb	r3, [r7, #12]
  buffTemp[1] = c;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(i2c1, addr_oled, buffTemp, 2, 100);
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <write_cmd+0x3c>)
 80004da:	6818      	ldr	r0, [r3, #0]
 80004dc:	f107 020c 	add.w	r2, r7, #12
 80004e0:	2364      	movs	r3, #100	; 0x64
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2302      	movs	r3, #2
 80004e6:	2178      	movs	r1, #120	; 0x78
 80004e8:	f000 ffe4 	bl	80014b4 <HAL_I2C_Master_Transmit>
  return;
 80004ec:	bf00      	nop
}
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200002dc 	.word	0x200002dc
 80004f8:	200006fc 	.word	0x200006fc

080004fc <cmd_list>:

static void cmd_list(unsigned char *c, int n)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  unsigned char bytesOut = 1;
 8000506:	2301      	movs	r3, #1
 8000508:	73fb      	strb	r3, [r7, #15]
  memset(cmdBuff, 0, WIRE_MAX);
 800050a:	2220      	movs	r2, #32
 800050c:	2100      	movs	r1, #0
 800050e:	481c      	ldr	r0, [pc, #112]	; (8000580 <cmd_list+0x84>)
 8000510:	f005 fb14 	bl	8005b3c <memset>

  while (n--)
 8000514:	e01d      	b.n	8000552 <cmd_list+0x56>
  {
    if (bytesOut >= WIRE_MAX)
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2b1f      	cmp	r3, #31
 800051a:	d910      	bls.n	800053e <cmd_list+0x42>
    {
      HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, WIRE_MAX, 1000);
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <cmd_list+0x88>)
 800051e:	6818      	ldr	r0, [r3, #0]
 8000520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2320      	movs	r3, #32
 8000528:	4a15      	ldr	r2, [pc, #84]	; (8000580 <cmd_list+0x84>)
 800052a:	2178      	movs	r1, #120	; 0x78
 800052c:	f000 ffc2 	bl	80014b4 <HAL_I2C_Master_Transmit>
      memset(cmdBuff, 0, WIRE_MAX);
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4812      	ldr	r0, [pc, #72]	; (8000580 <cmd_list+0x84>)
 8000536:	f005 fb01 	bl	8005b3c <memset>
      bytesOut = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
    }
    cmdBuff[bytesOut] = *c++;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	7bfa      	ldrb	r2, [r7, #15]
 8000546:	7819      	ldrb	r1, [r3, #0]
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <cmd_list+0x84>)
 800054a:	5499      	strb	r1, [r3, r2]
    bytesOut++;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	3301      	adds	r3, #1
 8000550:	73fb      	strb	r3, [r7, #15]
  while (n--)
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	1e5a      	subs	r2, r3, #1
 8000556:	603a      	str	r2, [r7, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1dc      	bne.n	8000516 <cmd_list+0x1a>
  }
  if (bytesOut > 0)
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00a      	beq.n	8000578 <cmd_list+0x7c>
  {
    HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, bytesOut, 1000);
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <cmd_list+0x88>)
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	b29b      	uxth	r3, r3
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <cmd_list+0x84>)
 8000572:	2178      	movs	r1, #120	; 0x78
 8000574:	f000 ff9e 	bl	80014b4 <HAL_I2C_Master_Transmit>
  }
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200006dc 	.word	0x200006dc
 8000584:	200006fc 	.word	0x200006fc

08000588 <initDisplay>:

static void initDisplay()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  write_cmd(0xAE); // 0xAE // display off
 800058c:	20ae      	movs	r0, #174	; 0xae
 800058e:	f7ff ff95 	bl	80004bc <write_cmd>
  write_cmd(0xD5); // 0xD5 // set display clock division
 8000592:	20d5      	movs	r0, #213	; 0xd5
 8000594:	f7ff ff92 	bl	80004bc <write_cmd>
  write_cmd(0x80); // the suggested ratio 0x80
 8000598:	2080      	movs	r0, #128	; 0x80
 800059a:	f7ff ff8f 	bl	80004bc <write_cmd>
  write_cmd(0xA8); // 0xA8 set multiplex
 800059e:	20a8      	movs	r0, #168	; 0xa8
 80005a0:	f7ff ff8c 	bl	80004bc <write_cmd>
  write_cmd(63);   // set height
 80005a4:	203f      	movs	r0, #63	; 0x3f
 80005a6:	f7ff ff89 	bl	80004bc <write_cmd>
  write_cmd(0xD3); // set display offseti2c1
 80005aa:	20d3      	movs	r0, #211	; 0xd3
 80005ac:	f7ff ff86 	bl	80004bc <write_cmd>
  write_cmd(0x00); // no offset
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff ff83 	bl	80004bc <write_cmd>
  write_cmd(0x40); // line #0 setstartline
 80005b6:	2040      	movs	r0, #64	; 0x40
 80005b8:	f7ff ff80 	bl	80004bc <write_cmd>
  write_cmd(0x8D); // 0x8D // chargepump
 80005bc:	208d      	movs	r0, #141	; 0x8d
 80005be:	f7ff ff7d 	bl	80004bc <write_cmd>
  write_cmd(0x14); //?? 0x10
 80005c2:	2014      	movs	r0, #20
 80005c4:	f7ff ff7a 	bl	80004bc <write_cmd>
  write_cmd(0x20); // memory mode
 80005c8:	2020      	movs	r0, #32
 80005ca:	f7ff ff77 	bl	80004bc <write_cmd>
  write_cmd(0x00); // 0x0 act like ks0108
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff74 	bl	80004bc <write_cmd>
  write_cmd(0xA1); // segremap
 80005d4:	20a1      	movs	r0, #161	; 0xa1
 80005d6:	f7ff ff71 	bl	80004bc <write_cmd>
  write_cmd(0xC8); // comscandec
 80005da:	20c8      	movs	r0, #200	; 0xc8
 80005dc:	f7ff ff6e 	bl	80004bc <write_cmd>
  write_cmd(0xDA); // 0xDA set com pins
 80005e0:	20da      	movs	r0, #218	; 0xda
 80005e2:	f7ff ff6b 	bl	80004bc <write_cmd>
  write_cmd(0x12);
 80005e6:	2012      	movs	r0, #18
 80005e8:	f7ff ff68 	bl	80004bc <write_cmd>
  write_cmd(0x81); // 0x81 // set contract
 80005ec:	2081      	movs	r0, #129	; 0x81
 80005ee:	f7ff ff65 	bl	80004bc <write_cmd>
  write_cmd(0xCF); //??  0x9F
 80005f2:	20cf      	movs	r0, #207	; 0xcf
 80005f4:	f7ff ff62 	bl	80004bc <write_cmd>
  write_cmd(0xD9); // 0xd9 set pre-charge
 80005f8:	20d9      	movs	r0, #217	; 0xd9
 80005fa:	f7ff ff5f 	bl	80004bc <write_cmd>
  write_cmd(0xF1); // 0x22
 80005fe:	20f1      	movs	r0, #241	; 0xf1
 8000600:	f7ff ff5c 	bl	80004bc <write_cmd>
  write_cmd(0xDB); // SSD1306_SETVCOMDETECT
 8000604:	20db      	movs	r0, #219	; 0xdb
 8000606:	f7ff ff59 	bl	80004bc <write_cmd>
  write_cmd(0x40);
 800060a:	2040      	movs	r0, #64	; 0x40
 800060c:	f7ff ff56 	bl	80004bc <write_cmd>
  write_cmd(0xA4); // 0xA4 // display all on resume
 8000610:	20a4      	movs	r0, #164	; 0xa4
 8000612:	f7ff ff53 	bl	80004bc <write_cmd>
  write_cmd(0xA6); // 0xA6 // normal display
 8000616:	20a6      	movs	r0, #166	; 0xa6
 8000618:	f7ff ff50 	bl	80004bc <write_cmd>
  write_cmd(0x2E); // deactivate scroll
 800061c:	202e      	movs	r0, #46	; 0x2e
 800061e:	f7ff ff4d 	bl	80004bc <write_cmd>
  write_cmd(0xAF); // --turn on oled panel
 8000622:	20af      	movs	r0, #175	; 0xaf
 8000624:	f7ff ff4a 	bl	80004bc <write_cmd>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <display>:

static void display()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8

  int count = WIDTH * (HEIGHT / 8);
 8000632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000636:	60fb      	str	r3, [r7, #12]
  uint8_t *ptr = screenBuff;
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <display+0xb4>)
 800063a:	60bb      	str	r3, [r7, #8]
  unsigned char bytesOut = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	71fb      	strb	r3, [r7, #7]
  unsigned char dlist1[] = {
 8000640:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <display+0xb8>)
 8000642:	463b      	mov	r3, r7
 8000644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000648:	6018      	str	r0, [r3, #0]
 800064a:	3304      	adds	r3, #4
 800064c:	7019      	strb	r1, [r3, #0]
      0,    // Page start address
      0xFF, // Page end (not really, but works here)
      SSD1306_COLUMNADDR,
      0};
  // Column start address
  cmd_list(dlist1, sizeof(dlist1));
 800064e:	463b      	mov	r3, r7
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff52 	bl	80004fc <cmd_list>
  write_cmd(WIDTH - 1);
 8000658:	207f      	movs	r0, #127	; 0x7f
 800065a:	f7ff ff2f 	bl	80004bc <write_cmd>
  memset(cmdBuff, 0, WIRE_MAX);
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4821      	ldr	r0, [pc, #132]	; (80006e8 <display+0xbc>)
 8000664:	f005 fa6a 	bl	8005b3c <memset>
  cmdBuff[0] = 0x40;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <display+0xbc>)
 800066a:	2240      	movs	r2, #64	; 0x40
 800066c:	701a      	strb	r2, [r3, #0]
  while (count--)
 800066e:	e020      	b.n	80006b2 <display+0x86>
  {
    if (bytesOut >= WIRE_MAX)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b1f      	cmp	r3, #31
 8000674:	d913      	bls.n	800069e <display+0x72>
    {
      HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, WIRE_MAX, 1000);
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <display+0xc0>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2320      	movs	r3, #32
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <display+0xbc>)
 8000684:	2178      	movs	r1, #120	; 0x78
 8000686:	f000 ff15 	bl	80014b4 <HAL_I2C_Master_Transmit>
      memset(cmdBuff, 0, WIRE_MAX);
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <display+0xbc>)
 8000690:	f005 fa54 	bl	8005b3c <memset>
      cmdBuff[0] = 0x40;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <display+0xbc>)
 8000696:	2240      	movs	r2, #64	; 0x40
 8000698:	701a      	strb	r2, [r3, #0]
      bytesOut = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
    }
    cmdBuff[bytesOut] = *ptr++;
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	60ba      	str	r2, [r7, #8]
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	7819      	ldrb	r1, [r3, #0]
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <display+0xbc>)
 80006aa:	5499      	strb	r1, [r3, r2]
    bytesOut++;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	3301      	adds	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
  while (count--)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	60fa      	str	r2, [r7, #12]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1d9      	bne.n	8000670 <display+0x44>
  }
  if (bytesOut > 0)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00a      	beq.n	80006d8 <display+0xac>
  {
    HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, bytesOut, 1000);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <display+0xc0>)
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <display+0xbc>)
 80006d2:	2178      	movs	r1, #120	; 0x78
 80006d4:	f000 feee 	bl	80014b4 <HAL_I2C_Master_Transmit>
  }
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200002dc 	.word	0x200002dc
 80006e4:	08005c20 	.word	0x08005c20
 80006e8:	200006dc 	.word	0x200006dc
 80006ec:	200006fc 	.word	0x200006fc

080006f0 <drawpixel>:
  memset(screenBuff, 0, BUFF_SIZE);
  display();
}

static void drawpixel(int x, int y)
{ // draw hang y cot x
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]

  if ((x >= 0) && (x < WIDTH) && (y >= 0) && (y < HEIGHT))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db22      	blt.n	8000746 <drawpixel+0x56>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b7f      	cmp	r3, #127	; 0x7f
 8000704:	dc1f      	bgt.n	8000746 <drawpixel+0x56>
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db1c      	blt.n	8000746 <drawpixel+0x56>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	2b3f      	cmp	r3, #63	; 0x3f
 8000710:	dc19      	bgt.n	8000746 <drawpixel+0x56>
  {
    screenBuff[x + (y / 8) * WIDTH] |= (1 << (y & 7)); //
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	da00      	bge.n	800071a <drawpixel+0x2a>
 8000718:	3307      	adds	r3, #7
 800071a:	10db      	asrs	r3, r3, #3
 800071c:	01d9      	lsls	r1, r3, #7
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	440a      	add	r2, r1
 8000722:	490b      	ldr	r1, [pc, #44]	; (8000750 <drawpixel+0x60>)
 8000724:	5c8a      	ldrb	r2, [r1, r2]
 8000726:	b251      	sxtb	r1, r2
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	f002 0207 	and.w	r2, r2, #7
 800072e:	2001      	movs	r0, #1
 8000730:	fa00 f202 	lsl.w	r2, r0, r2
 8000734:	b252      	sxtb	r2, r2
 8000736:	430a      	orrs	r2, r1
 8000738:	b251      	sxtb	r1, r2
 800073a:	01da      	lsls	r2, r3, #7
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	b2c9      	uxtb	r1, r1
 8000742:	4a03      	ldr	r2, [pc, #12]	; (8000750 <drawpixel+0x60>)
 8000744:	54d1      	strb	r1, [r2, r3]
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	200002dc 	.word	0x200002dc

08000754 <drawBitmap>:

void drawBitmap(int x, int y, unsigned char bitmap[], int w, int h)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	603b      	str	r3, [r7, #0]

  int i, j;
  int byteWidth = (w + 7) / 8;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	3307      	adds	r3, #7
 8000766:	2b00      	cmp	r3, #0
 8000768:	da00      	bge.n	800076c <drawBitmap+0x18>
 800076a:	3307      	adds	r3, #7
 800076c:	10db      	asrs	r3, r3, #3
 800076e:	613b      	str	r3, [r7, #16]
  int byte = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  for (j = 0; j < h; j++)
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	e032      	b.n	80007e0 <drawBitmap+0x8c>
  {
    for (i = 0; i < w; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
 800077e:	e028      	b.n	80007d2 <drawBitmap+0x7e>
    {

      if (i & 7) // 8 bit 1
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <drawBitmap+0x3e>
        byte <<= 1;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	e00e      	b.n	80007b0 <drawBitmap+0x5c>
      else
        byte = bitmap[j * byteWidth + i / 8];
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	693a      	ldr	r2, [r7, #16]
 8000796:	fb03 f202 	mul.w	r2, r3, r2
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b00      	cmp	r3, #0
 800079e:	da00      	bge.n	80007a2 <drawBitmap+0x4e>
 80007a0:	3307      	adds	r3, #7
 80007a2:	10db      	asrs	r3, r3, #3
 80007a4:	4413      	add	r3, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	617b      	str	r3, [r7, #20]
      if (byte & 0x80)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d008      	beq.n	80007cc <drawBitmap+0x78>
      {
        drawpixel(x + i, y + j);
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	18d0      	adds	r0, r2, r3
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	4413      	add	r3, r2
 80007c6:	4619      	mov	r1, r3
 80007c8:	f7ff ff92 	bl	80006f0 <drawpixel>
    for (i = 0; i < w; i++)
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	69fa      	ldr	r2, [r7, #28]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbd2      	blt.n	8000780 <drawBitmap+0x2c>
  for (j = 0; j < h; j++)
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	3301      	adds	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbc8      	blt.n	800077a <drawBitmap+0x26>
      }
    }
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <drawImage>:

void drawImage(unsigned char bitmap[], int LOGO_HEIGHT, int LOGO_WIDTH)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af02      	add	r7, sp, #8
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]

  drawBitmap(
      (WIDTH - LOGO_WIDTH) / 2,
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
  drawBitmap(
 8000804:	0fda      	lsrs	r2, r3, #31
 8000806:	4413      	add	r3, r2
 8000808:	105b      	asrs	r3, r3, #1
 800080a:	4618      	mov	r0, r3
      (HEIGHT - LOGO_HEIGHT) / 2,
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  drawBitmap(
 8000812:	0fda      	lsrs	r2, r3, #31
 8000814:	4413      	add	r3, r2
 8000816:	105b      	asrs	r3, r3, #1
 8000818:	4619      	mov	r1, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	f7ff ff97 	bl	8000754 <drawBitmap>
      bitmap, LOGO_WIDTH, LOGO_HEIGHT);
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_MspInit+0x68>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_MspInit+0x68>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x68>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x68>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_MspInit+0x68>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x68>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 fa58 	bl	8000d22 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x6c>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x6c>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <HAL_I2C_MspInit+0x70>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d123      	bne.n	8000908 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d8:	23c0      	movs	r3, #192	; 0xc0
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008dc:	2312      	movs	r3, #18
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <HAL_I2C_MspInit+0x78>)
 80008ec:	f000 fb02 	bl	8000ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008fa:	61d3      	str	r3, [r2, #28]
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40005400 	.word	0x40005400
 8000914:	40021000 	.word	0x40021000
 8000918:	40010c00 	.word	0x40010c00

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <HAL_UART_MspInit+0x9c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d139      	bne.n	80009b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_UART_MspInit+0xa0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <HAL_UART_MspInit+0xa0>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_UART_MspInit+0xa0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_UART_MspInit+0xa0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_UART_MspInit+0xa0>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_UART_MspInit+0xa0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800096c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <HAL_UART_MspInit+0xa4>)
 8000982:	f000 fab7 	bl	8000ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_UART_MspInit+0xa4>)
 800099c:	f000 faaa 	bl	8000ef4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2105      	movs	r1, #5
 80009a4:	2025      	movs	r0, #37	; 0x25
 80009a6:	f000 f9bc 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009aa:	2025      	movs	r0, #37	; 0x25
 80009ac:	f000 f9d5 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <HAL_WWDG_MspInit+0x34>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d10b      	bne.n	80009ee <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_WWDG_MspInit+0x38>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_WWDG_MspInit+0x38>)
 80009dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_WWDG_MspInit+0x38>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40002c00 	.word	0x40002c00
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2e:	f000 f885 	bl	8000b3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a32:	f004 f8c5 	bl	8004bc0 <xTaskGetSchedulerState>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d001      	beq.n	8000a40 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3c:	f004 fe24 	bl	8005688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <USART1_IRQHandler+0x10>)
 8000a4a:	f001 fceb 	bl	8002424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000214 	.word	0x20000214

08000a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff fff8 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6a:	490c      	ldr	r1, [pc, #48]	; (8000a9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a80:	4c09      	ldr	r4, [pc, #36]	; (8000aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f005 f85d 	bl	8005b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fb5d 	bl	8000150 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000aa0:	08005d38 	.word	0x08005d38
  ldr r2, =_sbss
 8000aa4:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000aa8:	2000204c 	.word	0x2000204c

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f923 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff feb0 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f93b 	bl	8000d76 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f903 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000194 	.word	0x20000194
 8000b34:	2000019c 	.word	0x2000019c
 8000b38:	20000198 	.word	0x20000198

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	2000019c 	.word	0x2000019c
 8000b5c:	20000700 	.word	0x20000700

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000700 	.word	0x20000700

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <__NVIC_EnableIRQ+0x34>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff90 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff2d 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff42 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff35 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b085      	sub	sp, #20
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d008      	beq.n	8000db8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2204      	movs	r2, #4
 8000daa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e020      	b.n	8000dfa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 020e 	bic.w	r2, r2, #14
 8000dc6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d005      	beq.n	8000e28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2204      	movs	r2, #4
 8000e20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e051      	b.n	8000ecc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 020e 	bic.w	r2, r2, #14
 8000e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_DMA_Abort_IT+0xd4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d029      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0xa2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a21      	ldr	r2, [pc, #132]	; (8000edc <HAL_DMA_Abort_IT+0xd8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d022      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x9e>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_DMA_Abort_IT+0xdc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01a      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x98>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_DMA_Abort_IT+0xe0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d012      	beq.n	8000e96 <HAL_DMA_Abort_IT+0x92>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_DMA_Abort_IT+0xe4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00a      	beq.n	8000e90 <HAL_DMA_Abort_IT+0x8c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_DMA_Abort_IT+0xe8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d102      	bne.n	8000e8a <HAL_DMA_Abort_IT+0x86>
 8000e84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e88:	e00e      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xa4>
 8000e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e8e:	e00b      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xa4>
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	e008      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xa4>
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	e005      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xa4>
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	e002      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xa4>
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	e000      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xa4>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_DMA_Abort_IT+0xec>)
 8000eaa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	4798      	blx	r3
    } 
  }
  return status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020008 	.word	0x40020008
 8000edc:	4002001c 	.word	0x4002001c
 8000ee0:	40020030 	.word	0x40020030
 8000ee4:	40020044 	.word	0x40020044
 8000ee8:	40020058 	.word	0x40020058
 8000eec:	4002006c 	.word	0x4002006c
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b08b      	sub	sp, #44	; 0x2c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f06:	e169      	b.n	80011dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 8158 	bne.w	80011d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4a9a      	ldr	r2, [pc, #616]	; (8001194 <HAL_GPIO_Init+0x2a0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d05e      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f30:	4a98      	ldr	r2, [pc, #608]	; (8001194 <HAL_GPIO_Init+0x2a0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d875      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f36:	4a98      	ldr	r2, [pc, #608]	; (8001198 <HAL_GPIO_Init+0x2a4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d058      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f3c:	4a96      	ldr	r2, [pc, #600]	; (8001198 <HAL_GPIO_Init+0x2a4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d86f      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f42:	4a96      	ldr	r2, [pc, #600]	; (800119c <HAL_GPIO_Init+0x2a8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d052      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f48:	4a94      	ldr	r2, [pc, #592]	; (800119c <HAL_GPIO_Init+0x2a8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d869      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f4e:	4a94      	ldr	r2, [pc, #592]	; (80011a0 <HAL_GPIO_Init+0x2ac>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d04c      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f54:	4a92      	ldr	r2, [pc, #584]	; (80011a0 <HAL_GPIO_Init+0x2ac>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d863      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f5a:	4a92      	ldr	r2, [pc, #584]	; (80011a4 <HAL_GPIO_Init+0x2b0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d046      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
 8000f60:	4a90      	ldr	r2, [pc, #576]	; (80011a4 <HAL_GPIO_Init+0x2b0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d85d      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d82a      	bhi.n	8000fc0 <HAL_GPIO_Init+0xcc>
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d859      	bhi.n	8001022 <HAL_GPIO_Init+0x12e>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <HAL_GPIO_Init+0x80>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000fef 	.word	0x08000fef
 8000f78:	08000fc9 	.word	0x08000fc9
 8000f7c:	08000fdb 	.word	0x08000fdb
 8000f80:	0800101d 	.word	0x0800101d
 8000f84:	08001023 	.word	0x08001023
 8000f88:	08001023 	.word	0x08001023
 8000f8c:	08001023 	.word	0x08001023
 8000f90:	08001023 	.word	0x08001023
 8000f94:	08001023 	.word	0x08001023
 8000f98:	08001023 	.word	0x08001023
 8000f9c:	08001023 	.word	0x08001023
 8000fa0:	08001023 	.word	0x08001023
 8000fa4:	08001023 	.word	0x08001023
 8000fa8:	08001023 	.word	0x08001023
 8000fac:	08001023 	.word	0x08001023
 8000fb0:	08001023 	.word	0x08001023
 8000fb4:	08001023 	.word	0x08001023
 8000fb8:	08000fd1 	.word	0x08000fd1
 8000fbc:	08000fe5 	.word	0x08000fe5
 8000fc0:	4a79      	ldr	r2, [pc, #484]	; (80011a8 <HAL_GPIO_Init+0x2b4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d013      	beq.n	8000fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc6:	e02c      	b.n	8001022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e029      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e024      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e01f      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e01a      	b.n	8001024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d102      	bne.n	8000ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e013      	b.n	8001024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d105      	bne.n	8001010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001004:	2308      	movs	r3, #8
 8001006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	611a      	str	r2, [r3, #16]
          break;
 800100e:	e009      	b.n	8001024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001010:	2308      	movs	r3, #8
 8001012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	615a      	str	r2, [r3, #20]
          break;
 800101a:	e003      	b.n	8001024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x130>
          break;
 8001022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2bff      	cmp	r3, #255	; 0xff
 8001028:	d801      	bhi.n	800102e <HAL_GPIO_Init+0x13a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	e001      	b.n	8001032 <HAL_GPIO_Init+0x13e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3304      	adds	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d802      	bhi.n	8001040 <HAL_GPIO_Init+0x14c>
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x152>
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	3b08      	subs	r3, #8
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	210f      	movs	r1, #15
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	6a39      	ldr	r1, [r7, #32]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80b1 	beq.w	80011d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001074:	4b4d      	ldr	r3, [pc, #308]	; (80011ac <HAL_GPIO_Init+0x2b8>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <HAL_GPIO_Init+0x2b8>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_GPIO_Init+0x2b8>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2bc>)
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	3302      	adds	r3, #2
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <HAL_GPIO_Init+0x2c0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x1ec>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <HAL_GPIO_Init+0x2c4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1e8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3e      	ldr	r2, [pc, #248]	; (80011bc <HAL_GPIO_Init+0x2c8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1e4>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a3d      	ldr	r2, [pc, #244]	; (80011c0 <HAL_GPIO_Init+0x2cc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1e0>
 80010d0:	2303      	movs	r3, #3
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1ee>
 80010e0:	2300      	movs	r3, #0
 80010e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010f2:	492f      	ldr	r1, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x2bc>)
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	492c      	ldr	r1, [pc, #176]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	4928      	ldr	r1, [pc, #160]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001124:	4013      	ands	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	4922      	ldr	r1, [pc, #136]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	491e      	ldr	r1, [pc, #120]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800114c:	4013      	ands	r3, r2
 800114e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d006      	beq.n	800116a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4918      	ldr	r1, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	43db      	mvns	r3, r3
 8001172:	4914      	ldr	r1, [pc, #80]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001174:	4013      	ands	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d021      	beq.n	80011c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	490e      	ldr	r1, [pc, #56]	; (80011c4 <HAL_GPIO_Init+0x2d0>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
 8001190:	e021      	b.n	80011d6 <HAL_GPIO_Init+0x2e2>
 8001192:	bf00      	nop
 8001194:	10320000 	.word	0x10320000
 8001198:	10310000 	.word	0x10310000
 800119c:	10220000 	.word	0x10220000
 80011a0:	10210000 	.word	0x10210000
 80011a4:	10120000 	.word	0x10120000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	40011000 	.word	0x40011000
 80011c0:	40011400 	.word	0x40011400
 80011c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_GPIO_Init+0x304>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	4909      	ldr	r1, [pc, #36]	; (80011f8 <HAL_GPIO_Init+0x304>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	3301      	adds	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	fa22 f303 	lsr.w	r3, r2, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f47f ae8e 	bne.w	8000f08 <HAL_GPIO_Init+0x14>
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	372c      	adds	r7, #44	; 0x2c
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001218:	e003      	b.n	8001222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	611a      	str	r2, [r3, #16]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e12b      	b.n	8001496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fb24 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800127e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001290:	f001 f832 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8001294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a81      	ldr	r2, [pc, #516]	; (80014a0 <HAL_I2C_Init+0x274>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d807      	bhi.n	80012b0 <HAL_I2C_Init+0x84>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a80      	ldr	r2, [pc, #512]	; (80014a4 <HAL_I2C_Init+0x278>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bf94      	ite	ls
 80012a8:	2301      	movls	r3, #1
 80012aa:	2300      	movhi	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	e006      	b.n	80012be <HAL_I2C_Init+0x92>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a7d      	ldr	r2, [pc, #500]	; (80014a8 <HAL_I2C_Init+0x27c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bf94      	ite	ls
 80012b8:	2301      	movls	r3, #1
 80012ba:	2300      	movhi	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e0e7      	b.n	8001496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4a78      	ldr	r2, [pc, #480]	; (80014ac <HAL_I2C_Init+0x280>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0c9b      	lsrs	r3, r3, #18
 80012d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a6a      	ldr	r2, [pc, #424]	; (80014a0 <HAL_I2C_Init+0x274>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d802      	bhi.n	8001300 <HAL_I2C_Init+0xd4>
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	3301      	adds	r3, #1
 80012fe:	e009      	b.n	8001314 <HAL_I2C_Init+0xe8>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a69      	ldr	r2, [pc, #420]	; (80014b0 <HAL_I2C_Init+0x284>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	3301      	adds	r3, #1
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	430b      	orrs	r3, r1
 800131a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	495c      	ldr	r1, [pc, #368]	; (80014a0 <HAL_I2C_Init+0x274>)
 8001330:	428b      	cmp	r3, r1
 8001332:	d819      	bhi.n	8001368 <HAL_I2C_Init+0x13c>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e59      	subs	r1, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001342:	1c59      	adds	r1, r3, #1
 8001344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001348:	400b      	ands	r3, r1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00a      	beq.n	8001364 <HAL_I2C_Init+0x138>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1e59      	subs	r1, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fbb1 f3f3 	udiv	r3, r1, r3
 800135c:	3301      	adds	r3, #1
 800135e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001362:	e051      	b.n	8001408 <HAL_I2C_Init+0x1dc>
 8001364:	2304      	movs	r3, #4
 8001366:	e04f      	b.n	8001408 <HAL_I2C_Init+0x1dc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d111      	bne.n	8001394 <HAL_I2C_Init+0x168>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e58      	subs	r0, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	e012      	b.n	80013ba <HAL_I2C_Init+0x18e>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	0099      	lsls	r1, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013aa:	3301      	adds	r3, #1
 80013ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_Init+0x196>
 80013be:	2301      	movs	r3, #1
 80013c0:	e022      	b.n	8001408 <HAL_I2C_Init+0x1dc>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10e      	bne.n	80013e8 <HAL_I2C_Init+0x1bc>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e58      	subs	r0, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6859      	ldr	r1, [r3, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	440b      	add	r3, r1
 80013d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e6:	e00f      	b.n	8001408 <HAL_I2C_Init+0x1dc>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1e58      	subs	r0, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	0099      	lsls	r1, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	6809      	ldr	r1, [r1, #0]
 800140c:	4313      	orrs	r3, r2
 800140e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69da      	ldr	r2, [r3, #28]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6911      	ldr	r1, [r2, #16]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68d2      	ldr	r2, [r2, #12]
 8001442:	4311      	orrs	r1, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	430b      	orrs	r3, r1
 800144a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2220      	movs	r2, #32
 8001482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	000186a0 	.word	0x000186a0
 80014a4:	001e847f 	.word	0x001e847f
 80014a8:	003d08ff 	.word	0x003d08ff
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	10624dd3 	.word	0x10624dd3

080014b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	461a      	mov	r2, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	817b      	strh	r3, [r7, #10]
 80014c4:	4613      	mov	r3, r2
 80014c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff fb4a 	bl	8000b60 <HAL_GetTick>
 80014cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	f040 80e0 	bne.w	800169c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2319      	movs	r3, #25
 80014e2:	2201      	movs	r2, #1
 80014e4:	4970      	ldr	r1, [pc, #448]	; (80016a8 <HAL_I2C_Master_Transmit+0x1f4>)
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 f964 	bl	80017b4 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014f2:	2302      	movs	r3, #2
 80014f4:	e0d3      	b.n	800169e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_I2C_Master_Transmit+0x50>
 8001500:	2302      	movs	r3, #2
 8001502:	e0cc      	b.n	800169e <HAL_I2C_Master_Transmit+0x1ea>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d007      	beq.n	800152a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0201 	orr.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001538:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2221      	movs	r2, #33	; 0x21
 800153e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2210      	movs	r2, #16
 8001546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	893a      	ldrh	r2, [r7, #8]
 800155a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4a50      	ldr	r2, [pc, #320]	; (80016ac <HAL_I2C_Master_Transmit+0x1f8>)
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800156c:	8979      	ldrh	r1, [r7, #10]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6a3a      	ldr	r2, [r7, #32]
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f89c 	bl	80016b0 <I2C_MasterRequestWrite>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e08d      	b.n	800169e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001598:	e066      	b.n	8001668 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	6a39      	ldr	r1, [r7, #32]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fa22 	bl	80019e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00d      	beq.n	80015c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d107      	bne.n	80015c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06b      	b.n	800169e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b04      	cmp	r3, #4
 8001602:	d11b      	bne.n	800163c <HAL_I2C_Master_Transmit+0x188>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d017      	beq.n	800163c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001626:	b29b      	uxth	r3, r3
 8001628:	3b01      	subs	r3, #1
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	6a39      	ldr	r1, [r7, #32]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 fa19 	bl	8001a78 <I2C_WaitOnBTFFlagUntilTimeout>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00d      	beq.n	8001668 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	2b04      	cmp	r3, #4
 8001652:	d107      	bne.n	8001664 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001662:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e01a      	b.n	800169e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	d194      	bne.n	800159a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2220      	movs	r2, #32
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800169c:	2302      	movs	r3, #2
  }
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	00100002 	.word	0x00100002
 80016ac:	ffff0000 	.word	0xffff0000

080016b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	460b      	mov	r3, r1
 80016be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d006      	beq.n	80016da <I2C_MasterRequestWrite+0x2a>
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d003      	beq.n	80016da <I2C_MasterRequestWrite+0x2a>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016d8:	d108      	bne.n	80016ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e00b      	b.n	8001704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d107      	bne.n	8001704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 f84f 	bl	80017b4 <I2C_WaitOnFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00d      	beq.n	8001738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800172a:	d103      	bne.n	8001734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e035      	b.n	80017a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001740:	d108      	bne.n	8001754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001742:	897b      	ldrh	r3, [r7, #10]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	e01b      	b.n	800178c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001754:	897b      	ldrh	r3, [r7, #10]
 8001756:	11db      	asrs	r3, r3, #7
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f003 0306 	and.w	r3, r3, #6
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f063 030f 	orn	r3, r3, #15
 8001764:	b2da      	uxtb	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <I2C_MasterRequestWrite+0xfc>)
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f898 	bl	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e010      	b.n	80017a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001782:	897b      	ldrh	r3, [r7, #10]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <I2C_MasterRequestWrite+0x100>)
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f888 	bl	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	00010008 	.word	0x00010008
 80017b0:	00010002 	.word	0x00010002

080017b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c4:	e048      	b.n	8001858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d044      	beq.n	8001858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ce:	f7ff f9c7 	bl	8000b60 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d302      	bcc.n	80017e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d139      	bne.n	8001858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	0c1b      	lsrs	r3, r3, #16
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d10d      	bne.n	800180a <I2C_WaitOnFlagUntilTimeout+0x56>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	43da      	mvns	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4013      	ands	r3, r2
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	e00c      	b.n	8001824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	43da      	mvns	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4013      	ands	r3, r2
 8001816:	b29b      	uxth	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	429a      	cmp	r2, r3
 8001828:	d116      	bne.n	8001858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2220      	movs	r2, #32
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e023      	b.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	0c1b      	lsrs	r3, r3, #16
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	43da      	mvns	r2, r3
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4013      	ands	r3, r2
 800186e:	b29b      	uxth	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	e00c      	b.n	8001898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	43da      	mvns	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	4013      	ands	r3, r2
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	429a      	cmp	r2, r3
 800189c:	d093      	beq.n	80017c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018b6:	e071      	b.n	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c6:	d123      	bne.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e067      	b.n	80019e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	d041      	beq.n	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001918:	f7ff f922 	bl	8000b60 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	d302      	bcc.n	800192e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d136      	bne.n	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b01      	cmp	r3, #1
 8001936:	d10c      	bne.n	8001952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	43da      	mvns	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4013      	ands	r3, r2
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	bf14      	ite	ne
 800194a:	2301      	movne	r3, #1
 800194c:	2300      	moveq	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	e00b      	b.n	800196a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	43da      	mvns	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4013      	ands	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d016      	beq.n	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e021      	b.n	80019e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10c      	bne.n	80019c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	43da      	mvns	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4013      	ands	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e00b      	b.n	80019d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4013      	ands	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf14      	ite	ne
 80019d2:	2301      	movne	r3, #1
 80019d4:	2300      	moveq	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f47f af6d 	bne.w	80018b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019f4:	e034      	b.n	8001a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f886 	bl	8001b08 <I2C_IsAcknowledgeFailed>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e034      	b.n	8001a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d028      	beq.n	8001a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff f8a7 	bl	8000b60 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11d      	bne.n	8001a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	2b80      	cmp	r3, #128	; 0x80
 8001a30:	d016      	beq.n	8001a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f043 0220 	orr.w	r2, r3, #32
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e007      	b.n	8001a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	2b80      	cmp	r3, #128	; 0x80
 8001a6c:	d1c3      	bne.n	80019f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a84:	e034      	b.n	8001af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f83e 	bl	8001b08 <I2C_IsAcknowledgeFailed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e034      	b.n	8001b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a9c:	d028      	beq.n	8001af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9e:	f7ff f85f 	bl	8000b60 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d302      	bcc.n	8001ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11d      	bne.n	8001af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d016      	beq.n	8001af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f043 0220 	orr.w	r2, r3, #32
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e007      	b.n	8001b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d1c3      	bne.n	8001a86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d11b      	bne.n	8001b58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f043 0204 	orr.w	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e272      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e24c      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a77      	ldr	r2, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe ff8e 	bl	8000b60 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7fe ff8a 	bl	8000b60 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e200      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7fe ff7a 	bl	8000b60 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7fe ff76 	bl	8000b60 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ec      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c0      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4939      	ldr	r1, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ff2f 	bl	8000b60 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7fe ff2b 	bl	8000b60 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe ff0e 	bl	8000b60 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7fe ff0a 	bl	8000b60 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e180      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7fe feee 	bl	8000b60 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7fe feea 	bl	8000b60 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e160      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 face 	bl	8002348 <RCC_Delay>
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7fe fed4 	bl	8000b60 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7fe fed0 	bl	8000b60 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d908      	bls.n	8001ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e146      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42420000 	.word	0x42420000
 8001dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e9      	bne.n	8001dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a87      	ldr	r2, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7fe fe91 	bl	8000b60 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7fe fe8d 	bl	8000b60 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e103      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x356>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe fe41 	bl	8000b60 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fe3d 	bl	8000b60 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe fe2b 	bl	8000b60 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe fe27 	bl	8000b60 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e09b      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d061      	beq.n	800201c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d146      	bne.n	8001fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fdfb 	bl	8000b60 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fdf7 	bl	8000b60 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4921      	ldr	r1, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a19      	ldr	r1, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fdcb 	bl	8000b60 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fdc7 	bl	8000b60 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x46a>
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fdb4 	bl	8000b60 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fdb0 	bl	8000b60 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e026      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x498>
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x500>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4965      	ldr	r1, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe fd02 	bl	8000b60 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fcfe 	bl	8000b60 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fc60 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	08005d04 	.word	0x08005d04
 8002234:	20000194 	.word	0x20000194
 8002238:	20000198 	.word	0x20000198

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x30>
 8002266:	2b08      	cmp	r3, #8
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x36>
 800226a:	e027      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	613b      	str	r3, [r7, #16]
      break;
 8002270:	e027      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c5b      	lsrs	r3, r3, #17
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e004      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	613b      	str	r3, [r7, #16]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	693b      	ldr	r3, [r7, #16]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	007a1200 	.word	0x007a1200
 80022d8:	08005d1c 	.word	0x08005d1c
 80022dc:	08005d2c 	.word	0x08005d2c
 80022e0:	003d0900 	.word	0x003d0900

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000194 	.word	0x20000194

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	; (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08005d14 	.word	0x08005d14

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002324:	f7ff ffde 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	08005d14 	.word	0x08005d14

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000194 	.word	0x20000194
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e042      	b.n	800241c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fab6 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	; 0x24
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fc7f 	bl	8002ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0ba      	sub	sp, #232	; 0xe8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_UART_IRQHandler+0x66>
 8002476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fb63 	bl	8002b4e <UART_Receive_IT>
      return;
 8002488:	e25b      	b.n	8002942 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800248a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80de 	beq.w	8002650 <HAL_UART_IRQHandler+0x22c>
 8002494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80d1 	beq.w	8002650 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_UART_IRQHandler+0xae>
 80024ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f043 0201 	orr.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_UART_IRQHandler+0xd2>
 80024de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	f043 0202 	orr.w	r2, r3, #2
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_UART_IRQHandler+0xf6>
 8002502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f043 0204 	orr.w	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800251a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d011      	beq.n	800254a <HAL_UART_IRQHandler+0x126>
 8002526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f043 0208 	orr.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 81f2 	beq.w	8002938 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_UART_IRQHandler+0x14e>
 8002560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 faee 	bl	8002b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_UART_IRQHandler+0x17a>
 8002596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d04f      	beq.n	800263e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9f8 	bl	8002994 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d041      	beq.n	8002636 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3314      	adds	r3, #20
 80025b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025ee:	e841 2300 	strex	r3, r2, [r1]
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1d9      	bne.n	80025b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d013      	beq.n	800262e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <HAL_UART_IRQHandler+0x3e0>)
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fbf6 	bl	8000e04 <HAL_DMA_Abort_IT>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00e      	b.n	800264c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f99c 	bl	800296c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e00a      	b.n	800264c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f998 	bl	800296c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	e006      	b.n	800264c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f994 	bl	800296c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800264a:	e175      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	bf00      	nop
    return;
 800264e:	e173      	b.n	8002938 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b01      	cmp	r3, #1
 8002656:	f040 814f 	bne.w	80028f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8148 	beq.w	80028f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8141 	beq.w	80028f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80b6 	beq.w	8002808 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8145 	beq.w	800293c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ba:	429a      	cmp	r2, r3
 80026bc:	f080 813e 	bcs.w	800293c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	f000 8088 	beq.w	80027e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026e2:	e853 3f00 	ldrex	r3, [r3]
 80026e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	330c      	adds	r3, #12
 80026fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002700:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800270c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002710:	e841 2300 	strex	r3, r2, [r1]
 8002714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1d9      	bne.n	80026d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3314      	adds	r3, #20
 8002726:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272a:	e853 3f00 	ldrex	r3, [r3]
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002744:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002748:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800274c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e1      	bne.n	8002720 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800276c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3314      	adds	r3, #20
 800277c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002780:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002784:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002786:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002788:	e841 2300 	strex	r3, r2, [r1]
 800278c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800278e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e3      	bne.n	800275c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ac:	e853 3f00 	ldrex	r3, [r3]
 80027b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b4:	f023 0310 	bic.w	r3, r3, #16
 80027b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ce:	e841 2300 	strex	r3, r2, [r1]
 80027d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1e3      	bne.n	80027a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fad5 	bl	8000d8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8bf 	bl	800297e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002800:	e09c      	b.n	800293c <HAL_UART_IRQHandler+0x518>
 8002802:	bf00      	nop
 8002804:	08002a59 	.word	0x08002a59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 808e 	beq.w	8002940 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8089 	beq.w	8002940 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002852:	647a      	str	r2, [r7, #68]	; 0x44
 8002854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e3      	bne.n	800282e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	623b      	str	r3, [r7, #32]
   return(result);
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3314      	adds	r3, #20
 8002886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800288a:	633a      	str	r2, [r7, #48]	; 0x30
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002892:	e841 2300 	strex	r3, r2, [r1]
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e3      	bne.n	8002866 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	e853 3f00 	ldrex	r3, [r3]
 80028ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0310 	bic.w	r3, r3, #16
 80028c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	330c      	adds	r3, #12
 80028cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028d0:	61fa      	str	r2, [r7, #28]
 80028d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	e841 2300 	strex	r3, r2, [r1]
 80028dc:	617b      	str	r3, [r7, #20]
   return(result);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e3      	bne.n	80028ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028ee:	4619      	mov	r1, r3
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f844 	bl	800297e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f6:	e023      	b.n	8002940 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_UART_IRQHandler+0x4f4>
 8002904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f8b5 	bl	8002a80 <UART_Transmit_IT>
    return;
 8002916:	e014      	b.n	8002942 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <HAL_UART_IRQHandler+0x51e>
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8f4 	bl	8002b1e <UART_EndTransmit_IT>
    return;
 8002936:	e004      	b.n	8002942 <HAL_UART_IRQHandler+0x51e>
    return;
 8002938:	bf00      	nop
 800293a:	e002      	b.n	8002942 <HAL_UART_IRQHandler+0x51e>
      return;
 800293c:	bf00      	nop
 800293e:	e000      	b.n	8002942 <HAL_UART_IRQHandler+0x51e>
      return;
 8002940:	bf00      	nop
  }
}
 8002942:	37e8      	adds	r7, #232	; 0xe8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002994:	b480      	push	{r7}
 8002996:	b095      	sub	sp, #84	; 0x54
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029bc:	643a      	str	r2, [r7, #64]	; 0x40
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e5      	bne.n	800299c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	3314      	adds	r3, #20
 80029d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	61fb      	str	r3, [r7, #28]
   return(result);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3314      	adds	r3, #20
 80029ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f8:	e841 2300 	strex	r3, r2, [r1]
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e5      	bne.n	80029d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d119      	bne.n	8002a40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f023 0310 	bic.w	r3, r3, #16
 8002a22:	647b      	str	r3, [r7, #68]	; 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2c:	61ba      	str	r2, [r7, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6979      	ldr	r1, [r7, #20]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e5      	bne.n	8002a0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a4e:	bf00      	nop
 8002a50:	3754      	adds	r7, #84	; 0x54
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff7a 	bl	800296c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b21      	cmp	r3, #33	; 0x21
 8002a92:	d13e      	bne.n	8002b12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d114      	bne.n	8002ac8 <UART_Transmit_IT+0x48>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d110      	bne.n	8002ac8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]
 8002ac6:	e008      	b.n	8002ada <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	1c59      	adds	r1, r3, #1
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6211      	str	r1, [r2, #32]
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e000      	b.n	8002b14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b12:	2302      	movs	r3, #2
  }
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff02 	bl	8002948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08c      	sub	sp, #48	; 0x30
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b22      	cmp	r3, #34	; 0x22
 8002b60:	f040 80ae 	bne.w	8002cc0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6c:	d117      	bne.n	8002b9e <UART_Receive_IT+0x50>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d113      	bne.n	8002b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	1c9a      	adds	r2, r3, #2
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b9c:	e026      	b.n	8002bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb0:	d007      	beq.n	8002bc2 <UART_Receive_IT+0x74>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <UART_Receive_IT+0x82>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e008      	b.n	8002be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d15d      	bne.n	8002cbc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0220 	bic.w	r2, r2, #32
 8002c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d135      	bne.n	8002cb2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	330c      	adds	r3, #12
 8002c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f023 0310 	bic.w	r3, r3, #16
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	623a      	str	r2, [r7, #32]
 8002c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	69f9      	ldr	r1, [r7, #28]
 8002c72:	6a3a      	ldr	r2, [r7, #32]
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e5      	bne.n	8002c4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d10a      	bne.n	8002ca4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fe67 	bl	800297e <HAL_UARTEx_RxEventCallback>
 8002cb0:	e002      	b.n	8002cb8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fe51 	bl	800295a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e002      	b.n	8002cc2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3730      	adds	r7, #48	; 0x30
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d06:	f023 030c 	bic.w	r3, r3, #12
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	; (8002de0 <UART_SetConfig+0x114>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d103      	bne.n	8002d3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d34:	f7ff faf4 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	e002      	b.n	8002d42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d3c:	f7ff fadc 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8002d40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <UART_SetConfig+0x118>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	0119      	lsls	r1, r3, #4
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009a      	lsls	r2, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <UART_SetConfig+0x118>)
 8002d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2064      	movs	r0, #100	; 0x64
 8002d82:	fb00 f303 	mul.w	r3, r0, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	3332      	adds	r3, #50	; 0x32
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <UART_SetConfig+0x118>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d98:	4419      	add	r1, r3
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009a      	lsls	r2, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <UART_SetConfig+0x118>)
 8002db2:	fba3 0302 	umull	r0, r3, r3, r2
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2064      	movs	r0, #100	; 0x64
 8002dba:	fb00 f303 	mul.w	r3, r0, r3
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	3332      	adds	r3, #50	; 0x32
 8002dc4:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <UART_SetConfig+0x118>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	f003 020f 	and.w	r2, r3, #15
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	440a      	add	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40013800 	.word	0x40013800
 8002de4:	51eb851f 	.word	0x51eb851f

08002de8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e016      	b.n	8002e28 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fde2 	bl	80009c4 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e0c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e36:	f3ef 8305 	mrs	r3, IPSR
 8002e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e42:	f3ef 8310 	mrs	r3, PRIMASK
 8002e46:	607b      	str	r3, [r7, #4]
  return(result);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <osKernelInitialize+0x32>
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <osKernelInitialize+0x60>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d109      	bne.n	8002e6a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e56:	f3ef 8311 	mrs	r3, BASEPRI
 8002e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e62:	f06f 0305 	mvn.w	r3, #5
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e00c      	b.n	8002e84 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <osKernelInitialize+0x60>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <osKernelInitialize+0x60>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e002      	b.n	8002e84 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e84:	68fb      	ldr	r3, [r7, #12]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	20000704 	.word	0x20000704

08002e94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e9a:	f3ef 8305 	mrs	r3, IPSR
 8002e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eaa:	607b      	str	r3, [r7, #4]
  return(result);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <osKernelStart+0x32>
 8002eb2:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <osKernelStart+0x64>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d109      	bne.n	8002ece <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002eba:	f3ef 8311 	mrs	r3, BASEPRI
 8002ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ec6:	f06f 0305 	mvn.w	r3, #5
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e00e      	b.n	8002eec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <osKernelStart+0x64>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <osKernelStart+0x64>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002edc:	f001 fa24 	bl	8004328 <vTaskStartScheduler>
      stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e002      	b.n	8002eec <osKernelStart+0x58>
    } else {
      stat = osError;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000704 	.word	0x20000704

08002efc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b092      	sub	sp, #72	; 0x48
 8002f00:	af04      	add	r7, sp, #16
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f0c:	f3ef 8305 	mrs	r3, IPSR
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 8094 	bne.w	8003042 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 808d 	bne.w	8003042 <osThreadNew+0x146>
 8002f28:	4b48      	ldr	r3, [pc, #288]	; (800304c <osThreadNew+0x150>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d106      	bne.n	8002f3e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f30:	f3ef 8311 	mrs	r3, BASEPRI
 8002f34:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 8082 	bne.w	8003042 <osThreadNew+0x146>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d07e      	beq.n	8003042 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002f48:	2318      	movs	r3, #24
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002f50:	f107 031b 	add.w	r3, r7, #27
 8002f54:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d045      	beq.n	8002fee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <osThreadNew+0x74>
        name = attr->name;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <osThreadNew+0x9a>
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b38      	cmp	r3, #56	; 0x38
 8002f88:	d805      	bhi.n	8002f96 <osThreadNew+0x9a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <osThreadNew+0x9e>
        return (NULL);
 8002f96:	2300      	movs	r3, #0
 8002f98:	e054      	b.n	8003044 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00e      	beq.n	8002fd0 <osThreadNew+0xd4>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b5b      	cmp	r3, #91	; 0x5b
 8002fb8:	d90a      	bls.n	8002fd0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <osThreadNew+0xd4>
        mem = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	e010      	b.n	8002ff2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10c      	bne.n	8002ff2 <osThreadNew+0xf6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <osThreadNew+0xf6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <osThreadNew+0xf6>
          mem = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fec:	e001      	b.n	8002ff2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d110      	bne.n	800301a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003000:	9202      	str	r2, [sp, #8]
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 ffbe 	bl	8003f90 <xTaskCreateStatic>
 8003014:	4603      	mov	r3, r0
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e013      	b.n	8003042 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d110      	bne.n	8003042 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	b29a      	uxth	r2, r3
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f001 f808 	bl	8004048 <xTaskCreate>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d001      	beq.n	8003042 <osThreadNew+0x146>
          hTask = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003042:	697b      	ldr	r3, [r7, #20]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3738      	adds	r7, #56	; 0x38
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000704 	.word	0x20000704

08003050 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003058:	f3ef 8305 	mrs	r3, IPSR
 800305c:	613b      	str	r3, [r7, #16]
  return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10f      	bne.n	8003084 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003064:	f3ef 8310 	mrs	r3, PRIMASK
 8003068:	60fb      	str	r3, [r7, #12]
  return(result);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <osDelay+0x34>
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <osDelay+0x58>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d109      	bne.n	800308c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003078:	f3ef 8311 	mrs	r3, BASEPRI
 800307c:	60bb      	str	r3, [r7, #8]
  return(result);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <osDelay+0x3c>
    stat = osErrorISR;
 8003084:	f06f 0305 	mvn.w	r3, #5
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e007      	b.n	800309c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f001 f912 	bl	80042c0 <vTaskDelay>
    }
  }

  return (stat);
 800309c:	697b      	ldr	r3, [r7, #20]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000704 	.word	0x20000704

080030ac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030b8:	f3ef 8305 	mrs	r3, IPSR
 80030bc:	613b      	str	r3, [r7, #16]
  return(result);
 80030be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 8085 	bne.w	80031d0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d17e      	bne.n	80031d0 <osMutexNew+0x124>
 80030d2:	4b42      	ldr	r3, [pc, #264]	; (80031dc <osMutexNew+0x130>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d105      	bne.n	80030e6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030da:	f3ef 8311 	mrs	r3, BASEPRI
 80030de:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d174      	bne.n	80031d0 <osMutexNew+0x124>
    if (attr != NULL) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <osMutexNew+0x48>
      type = attr->attr_bits;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	e001      	b.n	80030f8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <osMutexNew+0x5c>
      rmtx = 1U;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e001      	b.n	800310c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d15c      	bne.n	80031d0 <osMutexNew+0x124>
      mem = -1;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d015      	beq.n	800314e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <osMutexNew+0x8c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b4f      	cmp	r3, #79	; 0x4f
 8003130:	d902      	bls.n	8003138 <osMutexNew+0x8c>
          mem = 1;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	e00c      	b.n	8003152 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <osMutexNew+0xa6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <osMutexNew+0xa6>
            mem = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e001      	b.n	8003152 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d112      	bne.n	800317e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	4619      	mov	r1, r3
 8003164:	2004      	movs	r0, #4
 8003166:	f000 fb15 	bl	8003794 <xQueueCreateMutexStatic>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24
 800316c:	e016      	b.n	800319c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4619      	mov	r1, r3
 8003174:	2001      	movs	r0, #1
 8003176:	f000 fb0d 	bl	8003794 <xQueueCreateMutexStatic>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24
 800317c:	e00e      	b.n	800319c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800318a:	2004      	movs	r0, #4
 800318c:	f000 faea 	bl	8003764 <xQueueCreateMutex>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24
 8003192:	e003      	b.n	800319c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003194:	2001      	movs	r0, #1
 8003196:	f000 fae5 	bl	8003764 <xQueueCreateMutex>
 800319a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <osMutexNew+0x110>
        if (attr != NULL) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <osMutexNew+0x104>
          name = attr->name;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e001      	b.n	80031b4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80031b4:	6979      	ldr	r1, [r7, #20]
 80031b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031b8:	f000 fe8e 	bl	8003ed8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <osMutexNew+0x124>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3728      	adds	r7, #40	; 0x28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000704 	.word	0x20000704

080031e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031f0:	f3ef 8305 	mrs	r3, IPSR
 80031f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80031f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d16f      	bne.n	80032dc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003200:	617b      	str	r3, [r7, #20]
  return(result);
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d169      	bne.n	80032dc <osMessageQueueNew+0xfc>
 8003208:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <osMessageQueueNew+0x108>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d105      	bne.n	800321c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003210:	f3ef 8311 	mrs	r3, BASEPRI
 8003214:	613b      	str	r3, [r7, #16]
  return(result);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d15f      	bne.n	80032dc <osMessageQueueNew+0xfc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d05c      	beq.n	80032dc <osMessageQueueNew+0xfc>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d059      	beq.n	80032dc <osMessageQueueNew+0xfc>
    mem = -1;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d029      	beq.n	8003288 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d012      	beq.n	8003262 <osMessageQueueNew+0x82>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b4f      	cmp	r3, #79	; 0x4f
 8003242:	d90e      	bls.n	8003262 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <osMessageQueueNew+0x82>
        mem = 1;
 800325c:	2301      	movs	r3, #1
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	e014      	b.n	800328c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d110      	bne.n	800328c <osMessageQueueNew+0xac>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d108      	bne.n	800328c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <osMessageQueueNew+0xac>
          mem = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	e001      	b.n	800328c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10b      	bne.n	80032aa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2100      	movs	r1, #0
 800329c:	9100      	str	r1, [sp, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f96d 	bl	8003580 <xQueueGenericCreateStatic>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24
 80032a8:	e008      	b.n	80032bc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80032b0:	2200      	movs	r2, #0
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f9da 	bl	800366e <xQueueGenericCreate>
 80032ba:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00c      	beq.n	80032dc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e001      	b.n	80032d4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80032d4:	69f9      	ldr	r1, [r7, #28]
 80032d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032d8:	f000 fdfe 	bl	8003ed8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000704 	.word	0x20000704

080032ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a06      	ldr	r2, [pc, #24]	; (8003314 <vApplicationGetIdleTaskMemory+0x28>)
 80032fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a05      	ldr	r2, [pc, #20]	; (8003318 <vApplicationGetIdleTaskMemory+0x2c>)
 8003302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000708 	.word	0x20000708
 8003318:	20000764 	.word	0x20000764

0800331c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <vApplicationGetTimerTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <vApplicationGetTimerTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333a:	601a      	str	r2, [r3, #0]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000964 	.word	0x20000964
 800334c:	200009c0 	.word	0x200009c0

08003350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f103 0208 	add.w	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f103 0208 	add.w	r2, r3, #8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f103 0208 	add.w	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003402:	d103      	bne.n	800340c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e00c      	b.n	8003426 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3308      	adds	r3, #8
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e002      	b.n	800341a <vListInsert+0x2e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	d2f6      	bcs.n	8003414 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6892      	ldr	r2, [r2, #8]
 8003472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6852      	ldr	r2, [r2, #4]
 800347c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d103      	bne.n	8003490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	1e5a      	subs	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c8:	f383 8811 	msr	BASEPRI, r3
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f3bf 8f4f 	dsb	sy
 80034d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034d6:	bf00      	nop
 80034d8:	e7fe      	b.n	80034d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034da:	f002 f857 	bl	800558c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	441a      	add	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	3b01      	subs	r3, #1
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	441a      	add	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d114      	bne.n	800355a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01a      	beq.n	800356e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3310      	adds	r3, #16
 800353c:	4618      	mov	r0, r3
 800353e:	f001 f97d 	bl	800483c <xTaskRemoveFromEventList>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d012      	beq.n	800356e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <xQueueGenericReset+0xcc>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	e009      	b.n	800356e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3310      	adds	r3, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fef6 	bl	8003350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fef1 	bl	8003350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800356e:	f002 f83d 	bl	80055ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003572:	2301      	movs	r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08e      	sub	sp, #56	; 0x38
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035a6:	bf00      	nop
 80035a8:	e7fe      	b.n	80035a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <xQueueGenericCreateStatic+0x52>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <xQueueGenericCreateStatic+0x56>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <xQueueGenericCreateStatic+0x58>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <xQueueGenericCreateStatic+0x7e>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <xQueueGenericCreateStatic+0x82>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <xQueueGenericCreateStatic+0x84>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	61fb      	str	r3, [r7, #28]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800361e:	2350      	movs	r3, #80	; 0x50
 8003620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b50      	cmp	r3, #80	; 0x50
 8003626:	d00a      	beq.n	800363e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	61bb      	str	r3, [r7, #24]
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003650:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f843 	bl	80036ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003666:	4618      	mov	r0, r3
 8003668:	3730      	adds	r7, #48	; 0x30
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af02      	add	r7, sp, #8
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	613b      	str	r3, [r7, #16]
}
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e004      	b.n	80036ae <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3350      	adds	r3, #80	; 0x50
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 f86a 	bl	800578c <pvPortMalloc>
 80036b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00f      	beq.n	80036e0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	3350      	adds	r3, #80	; 0x50
 80036c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f805 	bl	80036ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80036e0:	69bb      	ldr	r3, [r7, #24]
	}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e002      	b.n	800370c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003718:	2101      	movs	r1, #1
 800371a:	69b8      	ldr	r0, [r7, #24]
 800371c:	f7ff fec8 	bl	80034b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00e      	beq.n	800375c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003750:	2300      	movs	r3, #0
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f838 	bl	80037cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800376e:	2301      	movs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	2300      	movs	r3, #0
 8003774:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	461a      	mov	r2, r3
 800377a:	6939      	ldr	r1, [r7, #16]
 800377c:	6978      	ldr	r0, [r7, #20]
 800377e:	f7ff ff76 	bl	800366e <xQueueGenericCreate>
 8003782:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff ffd3 	bl	8003730 <prvInitialiseMutex>

		return pxNewQueue;
 800378a:	68fb      	ldr	r3, [r7, #12]
	}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff fee4 	bl	8003580 <xQueueGenericCreateStatic>
 80037b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff ffb8 	bl	8003730 <prvInitialiseMutex>

		return pxNewQueue;
 80037c0:	68fb      	ldr	r3, [r7, #12]
	}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08e      	sub	sp, #56	; 0x38
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037da:	2300      	movs	r3, #0
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <xQueueGenericSend+0x32>
	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <xQueueGenericSend+0x40>
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <xQueueGenericSend+0x44>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <xQueueGenericSend+0x46>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <xQueueGenericSend+0x60>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003828:	bf00      	nop
 800382a:	e7fe      	b.n	800382a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d103      	bne.n	800383a <xQueueGenericSend+0x6e>
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <xQueueGenericSend+0x72>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <xQueueGenericSend+0x74>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGenericSend+0x8e>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	623b      	str	r3, [r7, #32]
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800385a:	f001 f9b1 	bl	8004bc0 <xTaskGetSchedulerState>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <xQueueGenericSend+0x9e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <xQueueGenericSend+0xa2>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <xQueueGenericSend+0xa4>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <xQueueGenericSend+0xbe>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	61fb      	str	r3, [r7, #28]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800388a:	f001 fe7f 	bl	800558c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <xQueueGenericSend+0xd4>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d129      	bne.n	80038f4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038a6:	f000 fa07 	bl	8003cb8 <prvCopyDataToQueue>
 80038aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 ffbf 	bl	800483c <xTaskRemoveFromEventList>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038c4:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <xQueueGenericSend+0x1f8>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	e00a      	b.n	80038ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038dc:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <xQueueGenericSend+0x1f8>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038ec:	f001 fe7e 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e063      	b.n	80039bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038fa:	f001 fe77 	bl	80055ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	e05c      	b.n	80039bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fff9 	bl	8004904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003912:	2301      	movs	r3, #1
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003916:	f001 fe69 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800391a:	f000 fd6b 	bl	80043f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800391e:	f001 fe35 	bl	800558c <vPortEnterCritical>
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003928:	b25b      	sxtb	r3, r3
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d103      	bne.n	8003938 <xQueueGenericSend+0x16c>
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800393e:	b25b      	sxtb	r3, r3
 8003940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003944:	d103      	bne.n	800394e <xQueueGenericSend+0x182>
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800394e:	f001 fe4d 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003952:	1d3a      	adds	r2, r7, #4
 8003954:	f107 0314 	add.w	r3, r7, #20
 8003958:	4611      	mov	r1, r2
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ffe8 	bl	8004930 <xTaskCheckForTimeOut>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d124      	bne.n	80039b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003968:	f000 fa9e 	bl	8003ea8 <prvIsQueueFull>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	3310      	adds	r3, #16
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f000 ff0e 	bl	800479c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003982:	f000 fa29 	bl	8003dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003986:	f000 fd43 	bl	8004410 <xTaskResumeAll>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	f47f af7c 	bne.w	800388a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <xQueueGenericSend+0x1f8>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	e772      	b.n	800388a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a6:	f000 fa17 	bl	8003dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039aa:	f000 fd31 	bl	8004410 <xTaskResumeAll>
 80039ae:	e76c      	b.n	800388a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b2:	f000 fa11 	bl	8003dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039b6:	f000 fd2b 	bl	8004410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ba:	2300      	movs	r3, #0
		}
	}
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3738      	adds	r7, #56	; 0x38
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	; 0x38
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <xQueueGenericSendFromISR+0x3c>
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <xQueueGenericSendFromISR+0x40>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <xQueueGenericSendFromISR+0x42>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	623b      	str	r3, [r7, #32]
}
 8003a20:	bf00      	nop
 8003a22:	e7fe      	b.n	8003a22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d103      	bne.n	8003a32 <xQueueGenericSendFromISR+0x6a>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <xQueueGenericSendFromISR+0x6e>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <xQueueGenericSendFromISR+0x70>
 8003a36:	2300      	movs	r3, #0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	61fb      	str	r3, [r7, #28]
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a52:	f001 fe5d 	bl	8005710 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a56:	f3ef 8211 	mrs	r2, BASEPRI
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	61ba      	str	r2, [r7, #24]
 8003a6c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <xQueueGenericSendFromISR+0xbc>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d12c      	bne.n	8003ade <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a94:	f000 f910 	bl	8003cb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a98:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d112      	bne.n	8003ac8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	3324      	adds	r3, #36	; 0x24
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fec4 	bl	800483c <xTaskRemoveFromEventList>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00e      	beq.n	8003ad8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003acc:	3301      	adds	r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	b25a      	sxtb	r2, r3
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003adc:	e001      	b.n	8003ae2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3738      	adds	r7, #56	; 0x38
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <xQueueReceive+0x30>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	623b      	str	r3, [r7, #32]
}
 8003b24:	bf00      	nop
 8003b26:	e7fe      	b.n	8003b26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d103      	bne.n	8003b36 <xQueueReceive+0x3e>
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <xQueueReceive+0x42>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <xQueueReceive+0x44>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xQueueReceive+0x5e>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	61fb      	str	r3, [r7, #28]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b56:	f001 f833 	bl	8004bc0 <xTaskGetSchedulerState>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <xQueueReceive+0x6e>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <xQueueReceive+0x72>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <xQueueReceive+0x74>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xQueueReceive+0x8e>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b86:	f001 fd01 	bl	800558c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01f      	beq.n	8003bd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9a:	f000 f8f7 	bl	8003d8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00f      	beq.n	8003bce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	3310      	adds	r3, #16
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fe42 	bl	800483c <xTaskRemoveFromEventList>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bbe:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <xQueueReceive+0x1bc>)
 8003bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bce:	f001 fd0d 	bl	80055ec <vPortExitCritical>
				return pdPASS;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e069      	b.n	8003caa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bdc:	f001 fd06 	bl	80055ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e062      	b.n	8003caa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bea:	f107 0310 	add.w	r3, r7, #16
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fe88 	bl	8004904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bf8:	f001 fcf8 	bl	80055ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bfc:	f000 fbfa 	bl	80043f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c00:	f001 fcc4 	bl	800558c <vPortEnterCritical>
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d103      	bne.n	8003c1a <xQueueReceive+0x122>
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d103      	bne.n	8003c30 <xQueueReceive+0x138>
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c30:	f001 fcdc 	bl	80055ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c34:	1d3a      	adds	r2, r7, #4
 8003c36:	f107 0310 	add.w	r3, r7, #16
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fe77 	bl	8004930 <xTaskCheckForTimeOut>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d123      	bne.n	8003c90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4a:	f000 f917 	bl	8003e7c <prvIsQueueEmpty>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d017      	beq.n	8003c84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	3324      	adds	r3, #36	; 0x24
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fd9d 	bl	800479c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c64:	f000 f8b8 	bl	8003dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c68:	f000 fbd2 	bl	8004410 <xTaskResumeAll>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d189      	bne.n	8003b86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <xQueueReceive+0x1bc>)
 8003c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	e780      	b.n	8003b86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c86:	f000 f8a7 	bl	8003dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8a:	f000 fbc1 	bl	8004410 <xTaskResumeAll>
 8003c8e:	e77a      	b.n	8003b86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c92:	f000 f8a1 	bl	8003dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c96:	f000 fbbb 	bl	8004410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c9c:	f000 f8ee 	bl	8003e7c <prvIsQueueEmpty>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f43f af6f 	beq.w	8003b86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ca8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3730      	adds	r7, #48	; 0x30
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d14d      	bne.n	8003d7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 ff8a 	bl	8004bfc <xTaskPriorityDisinherit>
 8003ce8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	e043      	b.n	8003d7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d119      	bne.n	8003d2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6898      	ldr	r0, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	461a      	mov	r2, r3
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	f001 ff46 	bl	8005b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d32b      	bcc.n	8003d7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	e026      	b.n	8003d7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68d8      	ldr	r0, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	461a      	mov	r2, r3
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	f001 ff2c 	bl	8005b94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	425b      	negs	r3, r3
 8003d46:	441a      	add	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d207      	bcs.n	8003d68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	425b      	negs	r3, r3
 8003d62:	441a      	add	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d105      	bne.n	8003d7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d82:	697b      	ldr	r3, [r7, #20]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	441a      	add	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d303      	bcc.n	8003dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68d9      	ldr	r1, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f001 fee2 	bl	8005b94 <memcpy>
	}
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 fbd4 	bl	800558c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dec:	e011      	b.n	8003e12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd1e 	bl	800483c <xTaskRemoveFromEventList>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e06:	f000 fdf5 	bl	80049f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dce9      	bgt.n	8003dee <prvUnlockQueue+0x16>
 8003e1a:	e000      	b.n	8003e1e <prvUnlockQueue+0x46>
					break;
 8003e1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e26:	f001 fbe1 	bl	80055ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e2a:	f001 fbaf 	bl	800558c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e36:	e011      	b.n	8003e5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3310      	adds	r3, #16
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fcf9 	bl	800483c <xTaskRemoveFromEventList>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e50:	f000 fdd0 	bl	80049f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e54:	7bbb      	ldrb	r3, [r7, #14]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	dce9      	bgt.n	8003e38 <prvUnlockQueue+0x60>
 8003e64:	e000      	b.n	8003e68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	22ff      	movs	r2, #255	; 0xff
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e70:	f001 fbbc 	bl	80055ec <vPortExitCritical>
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e84:	f001 fb82 	bl	800558c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e001      	b.n	8003e9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e9a:	f001 fba7 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb0:	f001 fb6c 	bl	800558c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d102      	bne.n	8003ec6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e001      	b.n	8003eca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eca:	f001 fb8f 	bl	80055ec <vPortExitCritical>

	return xReturn;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e014      	b.n	8003f12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ee8:	4a0e      	ldr	r2, [pc, #56]	; (8003f24 <vQueueAddToRegistry+0x4c>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ef4:	490b      	ldr	r1, [pc, #44]	; (8003f24 <vQueueAddToRegistry+0x4c>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <vQueueAddToRegistry+0x4c>)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f0a:	e006      	b.n	8003f1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b07      	cmp	r3, #7
 8003f16:	d9e7      	bls.n	8003ee8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	20000dc0 	.word	0x20000dc0

08003f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f38:	f001 fb28 	bl	800558c <vPortEnterCritical>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d103      	bne.n	8003f52 <vQueueWaitForMessageRestricted+0x2a>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f58:	b25b      	sxtb	r3, r3
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d103      	bne.n	8003f68 <vQueueWaitForMessageRestricted+0x40>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f68:	f001 fb40 	bl	80055ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3324      	adds	r3, #36	; 0x24
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fc31 	bl	80047e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f82:	6978      	ldr	r0, [r7, #20]
 8003f84:	f7ff ff28 	bl	8003dd8 <prvUnlockQueue>
	}
 8003f88:	bf00      	nop
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	; 0x38
 8003f94:	af04      	add	r7, sp, #16
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	623b      	str	r3, [r7, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	61fb      	str	r3, [r7, #28]
}
 8003fd2:	bf00      	nop
 8003fd4:	e7fe      	b.n	8003fd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fd6:	235c      	movs	r3, #92	; 0x5c
 8003fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b5c      	cmp	r3, #92	; 0x5c
 8003fde:	d00a      	beq.n	8003ff6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	61bb      	str	r3, [r7, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01e      	beq.n	800403a <xTaskCreateStatic+0xaa>
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800400a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004014:	2300      	movs	r3, #0
 8004016:	9303      	str	r3, [sp, #12]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	9302      	str	r3, [sp, #8]
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f850 	bl	80040d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004034:	f000 f8d4 	bl	80041e0 <prvAddNewTaskToReadyList>
 8004038:	e001      	b.n	800403e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800403e:	697b      	ldr	r3, [r7, #20]
	}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af04      	add	r7, sp, #16
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fb95 	bl	800578c <pvPortMalloc>
 8004062:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00e      	beq.n	8004088 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800406a:	205c      	movs	r0, #92	; 0x5c
 800406c:	f001 fb8e 	bl	800578c <pvPortMalloc>
 8004070:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
 800407e:	e005      	b.n	800408c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	f001 fc47 	bl	8005914 <vPortFree>
 8004086:	e001      	b.n	800408c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d017      	beq.n	80040c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	2300      	movs	r3, #0
 800409e:	9303      	str	r3, [sp, #12]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f80e 	bl	80040d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b6:	69f8      	ldr	r0, [r7, #28]
 80040b8:	f000 f892 	bl	80041e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040bc:	2301      	movs	r3, #1
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	e002      	b.n	80040c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040c8:	69bb      	ldr	r3, [r7, #24]
	}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b088      	sub	sp, #32
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	461a      	mov	r2, r3
 80040ea:	21a5      	movs	r1, #165	; 0xa5
 80040ec:	f001 fd26 	bl	8005b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040fa:	3b01      	subs	r3, #1
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f023 0307 	bic.w	r3, r3, #7
 8004108:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <prvInitialiseNewTask+0x58>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	617b      	str	r3, [r7, #20]
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e012      	b.n	8004156 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	7819      	ldrb	r1, [r3, #0]
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	4413      	add	r3, r2
 800413e:	3334      	adds	r3, #52	; 0x34
 8004140:	460a      	mov	r2, r1
 8004142:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b0f      	cmp	r3, #15
 800415a:	d9e9      	bls.n	8004130 <prvInitialiseNewTask+0x5e>
 800415c:	e000      	b.n	8004160 <prvInitialiseNewTask+0x8e>
		{
			break;
 800415e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	2b37      	cmp	r3, #55	; 0x37
 800416c:	d901      	bls.n	8004172 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800416e:	2337      	movs	r3, #55	; 0x37
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	2200      	movs	r2, #0
 8004182:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	3304      	adds	r3, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f900 	bl	800338e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	3318      	adds	r3, #24
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff f8fb 	bl	800338e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	2200      	movs	r2, #0
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	68f9      	ldr	r1, [r7, #12]
 80041c0:	69b8      	ldr	r0, [r7, #24]
 80041c2:	f001 f8ef 	bl	80053a4 <pxPortInitialiseStack>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041d8:	bf00      	nop
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041e8:	f001 f9d0 	bl	800558c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041ec:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <prvAddNewTaskToReadyList+0xc4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <prvAddNewTaskToReadyList+0xc4>)
 80041f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041f6:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041fe:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <prvAddNewTaskToReadyList+0xc4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d110      	bne.n	800422e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800420c:	f000 fc16 	bl	8004a3c <prvInitialiseTaskLists>
 8004210:	e00d      	b.n	800422e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004212:	4b26      	ldr	r3, [pc, #152]	; (80042ac <prvAddNewTaskToReadyList+0xcc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800421a:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	429a      	cmp	r2, r3
 8004226:	d802      	bhi.n	800422e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004228:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <prvAddNewTaskToReadyList+0xd0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <prvAddNewTaskToReadyList+0xd0>)
 8004236:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004238:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <prvAddNewTaskToReadyList+0xd0>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <prvAddNewTaskToReadyList+0xd4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d903      	bls.n	8004254 <prvAddNewTaskToReadyList+0x74>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <prvAddNewTaskToReadyList+0xd4>)
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <prvAddNewTaskToReadyList+0xd8>)
 8004262:	441a      	add	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f7ff f89b 	bl	80033a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004270:	f001 f9bc 	bl	80055ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <prvAddNewTaskToReadyList+0xcc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <prvAddNewTaskToReadyList+0xc8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	429a      	cmp	r2, r3
 8004288:	d207      	bcs.n	800429a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <prvAddNewTaskToReadyList+0xdc>)
 800428c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200012d4 	.word	0x200012d4
 80042a8:	20000e00 	.word	0x20000e00
 80042ac:	200012e0 	.word	0x200012e0
 80042b0:	200012f0 	.word	0x200012f0
 80042b4:	200012dc 	.word	0x200012dc
 80042b8:	20000e04 	.word	0x20000e04
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d017      	beq.n	8004302 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <vTaskDelay+0x60>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <vTaskDelay+0x30>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	60bb      	str	r3, [r7, #8]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042f0:	f000 f880 	bl	80043f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042f4:	2100      	movs	r1, #0
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fcee 	bl	8004cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042fc:	f000 f888 	bl	8004410 <xTaskResumeAll>
 8004300:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004308:	4b06      	ldr	r3, [pc, #24]	; (8004324 <vTaskDelay+0x64>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200012fc 	.word	0x200012fc
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004336:	463a      	mov	r2, r7
 8004338:	1d39      	adds	r1, r7, #4
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe ffd4 	bl	80032ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004344:	6839      	ldr	r1, [r7, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	9202      	str	r2, [sp, #8]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	2300      	movs	r3, #0
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2300      	movs	r3, #0
 8004354:	460a      	mov	r2, r1
 8004356:	4921      	ldr	r1, [pc, #132]	; (80043dc <vTaskStartScheduler+0xb4>)
 8004358:	4821      	ldr	r0, [pc, #132]	; (80043e0 <vTaskStartScheduler+0xb8>)
 800435a:	f7ff fe19 	bl	8003f90 <xTaskCreateStatic>
 800435e:	4603      	mov	r3, r0
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <vTaskStartScheduler+0xbc>)
 8004362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004364:	4b1f      	ldr	r3, [pc, #124]	; (80043e4 <vTaskStartScheduler+0xbc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800436c:	2301      	movs	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e001      	b.n	8004376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d102      	bne.n	8004382 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800437c:	f000 fd00 	bl	8004d80 <xTimerCreateTimerTask>
 8004380:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d116      	bne.n	80043b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	613b      	str	r3, [r7, #16]
}
 800439a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <vTaskStartScheduler+0xc0>)
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <vTaskStartScheduler+0xc4>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <vTaskStartScheduler+0xc8>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043b0:	f001 f87a 	bl	80054a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043b4:	e00e      	b.n	80043d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d10a      	bne.n	80043d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <vTaskStartScheduler+0xaa>
}
 80043d4:	bf00      	nop
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	08005c28 	.word	0x08005c28
 80043e0:	08004a0d 	.word	0x08004a0d
 80043e4:	200012f8 	.word	0x200012f8
 80043e8:	200012f4 	.word	0x200012f4
 80043ec:	200012e0 	.word	0x200012e0
 80043f0:	200012d8 	.word	0x200012d8

080043f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <vTaskSuspendAll+0x18>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a03      	ldr	r2, [pc, #12]	; (800440c <vTaskSuspendAll+0x18>)
 8004400:	6013      	str	r3, [r2, #0]
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200012fc 	.word	0x200012fc

08004410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800441e:	4b42      	ldr	r3, [pc, #264]	; (8004528 <xTaskResumeAll+0x118>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <xTaskResumeAll+0x2c>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	603b      	str	r3, [r7, #0]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800443c:	f001 f8a6 	bl	800558c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004440:	4b39      	ldr	r3, [pc, #228]	; (8004528 <xTaskResumeAll+0x118>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3b01      	subs	r3, #1
 8004446:	4a38      	ldr	r2, [pc, #224]	; (8004528 <xTaskResumeAll+0x118>)
 8004448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800444a:	4b37      	ldr	r3, [pc, #220]	; (8004528 <xTaskResumeAll+0x118>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d162      	bne.n	8004518 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <xTaskResumeAll+0x11c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d05e      	beq.n	8004518 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800445a:	e02f      	b.n	80044bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800445c:	4b34      	ldr	r3, [pc, #208]	; (8004530 <xTaskResumeAll+0x120>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3318      	adds	r3, #24
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe fff7 	bl	800345c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fff2 	bl	800345c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447c:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <xTaskResumeAll+0x124>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d903      	bls.n	800448c <xTaskResumeAll+0x7c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <xTaskResumeAll+0x124>)
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4a27      	ldr	r2, [pc, #156]	; (8004538 <xTaskResumeAll+0x128>)
 800449a:	441a      	add	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f7fe ff7f 	bl	80033a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <xTaskResumeAll+0x12c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <xTaskResumeAll+0x130>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <xTaskResumeAll+0x120>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1cb      	bne.n	800445c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044ca:	f000 fb55 	bl	8004b78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <xTaskResumeAll+0x134>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d010      	beq.n	80044fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044da:	f000 f845 	bl	8004568 <xTaskIncrementTick>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <xTaskResumeAll+0x130>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f1      	bne.n	80044da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <xTaskResumeAll+0x134>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <xTaskResumeAll+0x130>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <xTaskResumeAll+0x138>)
 800450a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004518:	f001 f868 	bl	80055ec <vPortExitCritical>

	return xAlreadyYielded;
 800451c:	68bb      	ldr	r3, [r7, #8]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200012fc 	.word	0x200012fc
 800452c:	200012d4 	.word	0x200012d4
 8004530:	20001294 	.word	0x20001294
 8004534:	200012dc 	.word	0x200012dc
 8004538:	20000e04 	.word	0x20000e04
 800453c:	20000e00 	.word	0x20000e00
 8004540:	200012e8 	.word	0x200012e8
 8004544:	200012e4 	.word	0x200012e4
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004552:	4b04      	ldr	r3, [pc, #16]	; (8004564 <xTaskGetTickCount+0x18>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004558:	687b      	ldr	r3, [r7, #4]
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr
 8004564:	200012d8 	.word	0x200012d8

08004568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004572:	4b51      	ldr	r3, [pc, #324]	; (80046b8 <xTaskIncrementTick+0x150>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f040 808e 	bne.w	8004698 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800457c:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <xTaskIncrementTick+0x154>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004584:	4a4d      	ldr	r2, [pc, #308]	; (80046bc <xTaskIncrementTick+0x154>)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d120      	bne.n	80045d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004590:	4b4b      	ldr	r3, [pc, #300]	; (80046c0 <xTaskIncrementTick+0x158>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	603b      	str	r3, [r7, #0]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <xTaskIncrementTick+0x46>
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <xTaskIncrementTick+0x158>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <xTaskIncrementTick+0x15c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a41      	ldr	r2, [pc, #260]	; (80046c0 <xTaskIncrementTick+0x158>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4a41      	ldr	r2, [pc, #260]	; (80046c4 <xTaskIncrementTick+0x15c>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b40      	ldr	r3, [pc, #256]	; (80046c8 <xTaskIncrementTick+0x160>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a3f      	ldr	r2, [pc, #252]	; (80046c8 <xTaskIncrementTick+0x160>)
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	f000 fad3 	bl	8004b78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045d2:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <xTaskIncrementTick+0x164>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d34e      	bcc.n	800467a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045dc:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <xTaskIncrementTick+0x158>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xTaskIncrementTick+0x82>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xTaskIncrementTick+0x84>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <xTaskIncrementTick+0x164>)
 80045f2:	f04f 32ff 	mov.w	r2, #4294967295
 80045f6:	601a      	str	r2, [r3, #0]
					break;
 80045f8:	e03f      	b.n	800467a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045fa:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <xTaskIncrementTick+0x158>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d203      	bcs.n	800461a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004612:	4a2e      	ldr	r2, [pc, #184]	; (80046cc <xTaskIncrementTick+0x164>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6013      	str	r3, [r2, #0]
						break;
 8004618:	e02f      	b.n	800467a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	3304      	adds	r3, #4
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe ff1c 	bl	800345c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3318      	adds	r3, #24
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe ff13 	bl	800345c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <xTaskIncrementTick+0x168>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d903      	bls.n	800464a <xTaskIncrementTick+0xe2>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <xTaskIncrementTick+0x168>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <xTaskIncrementTick+0x16c>)
 8004658:	441a      	add	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7fe fea0 	bl	80033a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <xTaskIncrementTick+0x170>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	429a      	cmp	r2, r3
 8004672:	d3b3      	bcc.n	80045dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004678:	e7b0      	b.n	80045dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <xTaskIncrementTick+0x170>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4914      	ldr	r1, [pc, #80]	; (80046d4 <xTaskIncrementTick+0x16c>)
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d907      	bls.n	80046a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004692:	2301      	movs	r3, #1
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e004      	b.n	80046a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004698:	4b10      	ldr	r3, [pc, #64]	; (80046dc <xTaskIncrementTick+0x174>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	4a0f      	ldr	r2, [pc, #60]	; (80046dc <xTaskIncrementTick+0x174>)
 80046a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <xTaskIncrementTick+0x178>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046ae:	697b      	ldr	r3, [r7, #20]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200012fc 	.word	0x200012fc
 80046bc:	200012d8 	.word	0x200012d8
 80046c0:	2000128c 	.word	0x2000128c
 80046c4:	20001290 	.word	0x20001290
 80046c8:	200012ec 	.word	0x200012ec
 80046cc:	200012f4 	.word	0x200012f4
 80046d0:	200012dc 	.word	0x200012dc
 80046d4:	20000e04 	.word	0x20000e04
 80046d8:	20000e00 	.word	0x20000e00
 80046dc:	200012e4 	.word	0x200012e4
 80046e0:	200012e8 	.word	0x200012e8

080046e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <vTaskSwitchContext+0xa4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <vTaskSwitchContext+0xa8>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046f8:	e041      	b.n	800477e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80046fa:	4b24      	ldr	r3, [pc, #144]	; (800478c <vTaskSwitchContext+0xa8>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004700:	4b23      	ldr	r3, [pc, #140]	; (8004790 <vTaskSwitchContext+0xac>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
 8004706:	e010      	b.n	800472a <vTaskSwitchContext+0x46>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <vTaskSwitchContext+0x40>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
}
 8004720:	bf00      	nop
 8004722:	e7fe      	b.n	8004722 <vTaskSwitchContext+0x3e>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3b01      	subs	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	491a      	ldr	r1, [pc, #104]	; (8004794 <vTaskSwitchContext+0xb0>)
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0e4      	beq.n	8004708 <vTaskSwitchContext+0x24>
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4a12      	ldr	r2, [pc, #72]	; (8004794 <vTaskSwitchContext+0xb0>)
 800474a:	4413      	add	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3308      	adds	r3, #8
 8004760:	429a      	cmp	r2, r3
 8004762:	d104      	bne.n	800476e <vTaskSwitchContext+0x8a>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <vTaskSwitchContext+0xb4>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4a05      	ldr	r2, [pc, #20]	; (8004790 <vTaskSwitchContext+0xac>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6013      	str	r3, [r2, #0]
}
 800477e:	bf00      	nop
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	200012fc 	.word	0x200012fc
 800478c:	200012e8 	.word	0x200012e8
 8004790:	200012dc 	.word	0x200012dc
 8004794:	20000e04 	.word	0x20000e04
 8004798:	20000e00 	.word	0x20000e00

0800479c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047c2:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <vTaskPlaceOnEventList+0x44>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3318      	adds	r3, #24
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fe fe0e 	bl	80033ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047d0:	2101      	movs	r1, #1
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	f000 fa80 	bl	8004cd8 <prvAddCurrentTaskToDelayedList>
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20000e00 	.word	0x20000e00

080047e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	617b      	str	r3, [r7, #20]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <vTaskPlaceOnEventListRestricted+0x54>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3318      	adds	r3, #24
 8004812:	4619      	mov	r1, r3
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7fe fdc6 	bl	80033a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	68b8      	ldr	r0, [r7, #8]
 800482a:	f000 fa55 	bl	8004cd8 <prvAddCurrentTaskToDelayedList>
	}
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000e00 	.word	0x20000e00

0800483c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	60fb      	str	r3, [r7, #12]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3318      	adds	r3, #24
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fdf5 	bl	800345c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004872:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <xTaskRemoveFromEventList+0xb0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11d      	bne.n	80048b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3304      	adds	r3, #4
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fdec 	bl	800345c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <xTaskRemoveFromEventList+0xb4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d903      	bls.n	8004898 <xTaskRemoveFromEventList+0x5c>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <xTaskRemoveFromEventList+0xb4>)
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <xTaskRemoveFromEventList+0xb8>)
 80048a6:	441a      	add	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7fe fd79 	bl	80033a6 <vListInsertEnd>
 80048b4:	e005      	b.n	80048c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3318      	adds	r3, #24
 80048ba:	4619      	mov	r1, r3
 80048bc:	480e      	ldr	r0, [pc, #56]	; (80048f8 <xTaskRemoveFromEventList+0xbc>)
 80048be:	f7fe fd72 	bl	80033a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <xTaskRemoveFromEventList+0xc0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d905      	bls.n	80048dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <xTaskRemoveFromEventList+0xc4>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e001      	b.n	80048e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048e0:	697b      	ldr	r3, [r7, #20]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	200012fc 	.word	0x200012fc
 80048f0:	200012dc 	.word	0x200012dc
 80048f4:	20000e04 	.word	0x20000e04
 80048f8:	20001294 	.word	0x20001294
 80048fc:	20000e00 	.word	0x20000e00
 8004900:	200012e8 	.word	0x200012e8

08004904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <vTaskInternalSetTimeOutState+0x24>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <vTaskInternalSetTimeOutState+0x28>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	200012ec 	.word	0x200012ec
 800492c:	200012d8 	.word	0x200012d8

08004930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	613b      	str	r3, [r7, #16]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60fb      	str	r3, [r7, #12]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004972:	f000 fe0b 	bl	800558c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <xTaskCheckForTimeOut+0xbc>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d102      	bne.n	8004996 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	e023      	b.n	80049de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <xTaskCheckForTimeOut+0xc0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d007      	beq.n	80049b2 <xTaskCheckForTimeOut+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	e015      	b.n	80049de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d20b      	bcs.n	80049d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff9b 	bl	8004904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e004      	b.n	80049de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f000 fe05 	bl	80055ec <vPortExitCritical>

	return xReturn;
 80049e2:	69fb      	ldr	r3, [r7, #28]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	200012d8 	.word	0x200012d8
 80049f0:	200012ec 	.word	0x200012ec

080049f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <vTaskMissedYield+0x14>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	200012e8 	.word	0x200012e8

08004a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a14:	f000 f852 	bl	8004abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <prvIdleTask+0x28>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d9f9      	bls.n	8004a14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <prvIdleTask+0x2c>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a30:	e7f0      	b.n	8004a14 <prvIdleTask+0x8>
 8004a32:	bf00      	nop
 8004a34:	20000e04 	.word	0x20000e04
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a42:	2300      	movs	r3, #0
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e00c      	b.n	8004a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <prvInitialiseTaskLists+0x60>)
 8004a54:	4413      	add	r3, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fc7a 	bl	8003350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b37      	cmp	r3, #55	; 0x37
 8004a66:	d9ef      	bls.n	8004a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a68:	480d      	ldr	r0, [pc, #52]	; (8004aa0 <prvInitialiseTaskLists+0x64>)
 8004a6a:	f7fe fc71 	bl	8003350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a6e:	480d      	ldr	r0, [pc, #52]	; (8004aa4 <prvInitialiseTaskLists+0x68>)
 8004a70:	f7fe fc6e 	bl	8003350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a74:	480c      	ldr	r0, [pc, #48]	; (8004aa8 <prvInitialiseTaskLists+0x6c>)
 8004a76:	f7fe fc6b 	bl	8003350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a7a:	480c      	ldr	r0, [pc, #48]	; (8004aac <prvInitialiseTaskLists+0x70>)
 8004a7c:	f7fe fc68 	bl	8003350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a80:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <prvInitialiseTaskLists+0x74>)
 8004a82:	f7fe fc65 	bl	8003350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <prvInitialiseTaskLists+0x78>)
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <prvInitialiseTaskLists+0x64>)
 8004a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <prvInitialiseTaskLists+0x7c>)
 8004a8e:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <prvInitialiseTaskLists+0x68>)
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000e04 	.word	0x20000e04
 8004aa0:	20001264 	.word	0x20001264
 8004aa4:	20001278 	.word	0x20001278
 8004aa8:	20001294 	.word	0x20001294
 8004aac:	200012a8 	.word	0x200012a8
 8004ab0:	200012c0 	.word	0x200012c0
 8004ab4:	2000128c 	.word	0x2000128c
 8004ab8:	20001290 	.word	0x20001290

08004abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ac2:	e019      	b.n	8004af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ac4:	f000 fd62 	bl	800558c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <prvCheckTasksWaitingTermination+0x50>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe fcc1 	bl	800345c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aee:	f000 fd7d 	bl	80055ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f810 	bl	8004b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e1      	bne.n	8004ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200012a8 	.word	0x200012a8
 8004b10:	200012d4 	.word	0x200012d4
 8004b14:	200012bc 	.word	0x200012bc

08004b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fef0 	bl	8005914 <vPortFree>
				vPortFree( pxTCB );
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 feed 	bl	8005914 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b3a:	e018      	b.n	8004b6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d103      	bne.n	8004b4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fee4 	bl	8005914 <vPortFree>
	}
 8004b4c:	e00f      	b.n	8004b6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d00a      	beq.n	8004b6e <prvDeleteTCB+0x56>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <prvDeleteTCB+0x54>
	}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b7e:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <prvResetNextTaskUnblockTime+0x40>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <prvResetNextTaskUnblockTime+0x14>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <prvResetNextTaskUnblockTime+0x16>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b92:	4b0a      	ldr	r3, [pc, #40]	; (8004bbc <prvResetNextTaskUnblockTime+0x44>)
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b9a:	e008      	b.n	8004bae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <prvResetNextTaskUnblockTime+0x40>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <prvResetNextTaskUnblockTime+0x44>)
 8004bac:	6013      	str	r3, [r2, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	2000128c 	.word	0x2000128c
 8004bbc:	200012f4 	.word	0x200012f4

08004bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <xTaskGetSchedulerState+0x34>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	e008      	b.n	8004be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <xTaskGetSchedulerState+0x38>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	607b      	str	r3, [r7, #4]
 8004be0:	e001      	b.n	8004be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004be6:	687b      	ldr	r3, [r7, #4]
	}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	200012e0 	.word	0x200012e0
 8004bf8:	200012fc 	.word	0x200012fc

08004bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d056      	beq.n	8004cc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <xTaskPriorityDisinherit+0xd0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d00a      	beq.n	8004c32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60fb      	str	r3, [r7, #12]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60bb      	str	r3, [r7, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d02c      	beq.n	8004cc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d128      	bne.n	8004cc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fbf2 	bl	800345c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <xTaskPriorityDisinherit+0xd4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d903      	bls.n	8004ca0 <xTaskPriorityDisinherit+0xa4>
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <xTaskPriorityDisinherit+0xd4>)
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <xTaskPriorityDisinherit+0xd8>)
 8004cae:	441a      	add	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f7fe fb75 	bl	80033a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cc0:	697b      	ldr	r3, [r7, #20]
	}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000e00 	.word	0x20000e00
 8004cd0:	200012dc 	.word	0x200012dc
 8004cd4:	20000e04 	.word	0x20000e04

08004cd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ce8:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fbb4 	bl	800345c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d10a      	bne.n	8004d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d02:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4819      	ldr	r0, [pc, #100]	; (8004d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d0c:	f7fe fb4b 	bl	80033a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d10:	e026      	b.n	8004d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d1a:	4b14      	ldr	r3, [pc, #80]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d209      	bcs.n	8004d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4610      	mov	r0, r2
 8004d38:	f7fe fb58 	bl	80033ec <vListInsert>
}
 8004d3c:	e010      	b.n	8004d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fe fb4e 	bl	80033ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d202      	bcs.n	8004d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d5a:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6013      	str	r3, [r2, #0]
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200012d8 	.word	0x200012d8
 8004d6c:	20000e00 	.word	0x20000e00
 8004d70:	200012c0 	.word	0x200012c0
 8004d74:	20001290 	.word	0x20001290
 8004d78:	2000128c 	.word	0x2000128c
 8004d7c:	200012f4 	.word	0x200012f4

08004d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d8a:	f000 facb 	bl	8005324 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d8e:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <xTimerCreateTimerTask+0x80>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d021      	beq.n	8004dda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d9e:	1d3a      	adds	r2, r7, #4
 8004da0:	f107 0108 	add.w	r1, r7, #8
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fab7 	bl	800331c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	9202      	str	r2, [sp, #8]
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	2302      	movs	r3, #2
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	4910      	ldr	r1, [pc, #64]	; (8004e04 <xTimerCreateTimerTask+0x84>)
 8004dc2:	4811      	ldr	r0, [pc, #68]	; (8004e08 <xTimerCreateTimerTask+0x88>)
 8004dc4:	f7ff f8e4 	bl	8003f90 <xTaskCreateStatic>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <xTimerCreateTimerTask+0x8c>)
 8004dcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <xTimerCreateTimerTask+0x8c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	613b      	str	r3, [r7, #16]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004df6:	697b      	ldr	r3, [r7, #20]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20001330 	.word	0x20001330
 8004e04:	08005c30 	.word	0x08005c30
 8004e08:	08004f2d 	.word	0x08004f2d
 8004e0c:	20001334 	.word	0x20001334

08004e10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	623b      	str	r3, [r7, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <xTimerGenericCommand+0x98>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d02a      	beq.n	8004e9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	dc18      	bgt.n	8004e8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e58:	f7ff feb2 	bl	8004bc0 <xTaskGetSchedulerState>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <xTimerGenericCommand+0x98>)
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	f107 0110 	add.w	r1, r7, #16
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6e:	f7fe fcad 	bl	80037cc <xQueueGenericSend>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24
 8004e74:	e012      	b.n	8004e9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <xTimerGenericCommand+0x98>)
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	f107 0110 	add.w	r1, r7, #16
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2200      	movs	r2, #0
 8004e82:	f7fe fca3 	bl	80037cc <xQueueGenericSend>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24
 8004e88:	e008      	b.n	8004e9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <xTimerGenericCommand+0x98>)
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	f107 0110 	add.w	r1, r7, #16
 8004e92:	2300      	movs	r3, #0
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	f7fe fd97 	bl	80039c8 <xQueueGenericSendFromISR>
 8004e9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20001330 	.word	0x20001330

08004eac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <prvProcessExpiredTimer+0x7c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fac9 	bl	800345c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d122      	bne.n	8004f18 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	18d1      	adds	r1, r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	6978      	ldr	r0, [r7, #20]
 8004ee0:	f000 f8c8 	bl	8005074 <prvInsertTimerInActiveList>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eea:	2300      	movs	r3, #0
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	6978      	ldr	r0, [r7, #20]
 8004ef6:	f7ff ff8b 	bl	8004e10 <xTimerGenericCommand>
 8004efa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60fb      	str	r3, [r7, #12]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	4798      	blx	r3
}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20001328 	.word	0x20001328

08004f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f34:	f107 0308 	add.w	r3, r7, #8
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f857 	bl	8004fec <prvGetNextExpireTime>
 8004f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4619      	mov	r1, r3
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f803 	bl	8004f50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f4a:	f000 f8d5 	bl	80050f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f4e:	e7f1      	b.n	8004f34 <prvTimerTask+0x8>

08004f50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f5a:	f7ff fa4b 	bl	80043f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f866 	bl	8005034 <prvSampleTimeNow>
 8004f68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d130      	bne.n	8004fd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <prvProcessTimerOrBlockTask+0x3c>
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d806      	bhi.n	8004f8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f7e:	f7ff fa47 	bl	8004410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff91 	bl	8004eac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f8a:	e024      	b.n	8004fd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <prvProcessTimerOrBlockTask+0x90>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <prvProcessTimerOrBlockTask+0x94>)
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f7fe ffb9 	bl	8003f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fb6:	f7ff fa2b 	bl	8004410 <xTaskResumeAll>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <prvProcessTimerOrBlockTask+0x98>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
}
 8004fd0:	e001      	b.n	8004fd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fd2:	f7ff fa1d 	bl	8004410 <xTaskResumeAll>
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	2000132c 	.word	0x2000132c
 8004fe4:	20001330 	.word	0x20001330
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <prvGetNextExpireTime+0x44>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d105      	bne.n	800501e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <prvGetNextExpireTime+0x44>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e001      	b.n	8005022 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20001328 	.word	0x20001328

08005034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800503c:	f7ff fa86 	bl	800454c <xTaskGetTickCount>
 8005040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <prvSampleTimeNow+0x3c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	429a      	cmp	r2, r3
 800504a:	d205      	bcs.n	8005058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800504c:	f000 f908 	bl	8005260 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e002      	b.n	800505e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800505e:	4a04      	ldr	r2, [pc, #16]	; (8005070 <prvSampleTimeNow+0x3c>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20001338 	.word	0x20001338

08005074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d812      	bhi.n	80050c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	1ad2      	subs	r2, r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e01b      	b.n	80050e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <prvInsertTimerInActiveList+0x7c>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fe f997 	bl	80033ec <vListInsert>
 80050be:	e012      	b.n	80050e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d206      	bcs.n	80050d6 <prvInsertTimerInActiveList+0x62>
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d302      	bcc.n	80050d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e007      	b.n	80050e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <prvInsertTimerInActiveList+0x80>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fe f983 	bl	80033ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050e6:	697b      	ldr	r3, [r7, #20]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000132c 	.word	0x2000132c
 80050f4:	20001328 	.word	0x20001328

080050f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08e      	sub	sp, #56	; 0x38
 80050fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050fe:	e09d      	b.n	800523c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da18      	bge.n	8005138 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005106:	1d3b      	adds	r3, r7, #4
 8005108:	3304      	adds	r3, #4
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	61fb      	str	r3, [r7, #28]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800512e:	6850      	ldr	r0, [r2, #4]
 8005130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005132:	6892      	ldr	r2, [r2, #8]
 8005134:	4611      	mov	r1, r2
 8005136:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	db7e      	blt.n	800523c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	3304      	adds	r3, #4
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe f984 	bl	800345c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005154:	463b      	mov	r3, r7
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ff6c 	bl	8005034 <prvSampleTimeNow>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b09      	cmp	r3, #9
 8005162:	d86a      	bhi.n	800523a <prvProcessReceivedCommands+0x142>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <prvProcessReceivedCommands+0x74>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	08005195 	.word	0x08005195
 8005170:	08005195 	.word	0x08005195
 8005174:	08005195 	.word	0x08005195
 8005178:	0800523d 	.word	0x0800523d
 800517c:	080051f1 	.word	0x080051f1
 8005180:	08005229 	.word	0x08005229
 8005184:	08005195 	.word	0x08005195
 8005188:	08005195 	.word	0x08005195
 800518c:	0800523d 	.word	0x0800523d
 8005190:	080051f1 	.word	0x080051f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	18d1      	adds	r1, r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a2:	f7ff ff67 	bl	8005074 <prvInsertTimerInActiveList>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d047      	beq.n	800523c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d13f      	bne.n	800523c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	441a      	add	r2, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	2100      	movs	r1, #0
 80051cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051ce:	f7ff fe1f 	bl	8004e10 <xTimerGenericCommand>
 80051d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d130      	bne.n	800523c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	61bb      	str	r3, [r7, #24]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	617b      	str	r3, [r7, #20]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	699a      	ldr	r2, [r3, #24]
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	18d1      	adds	r1, r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005222:	f7ff ff27 	bl	8005074 <prvInsertTimerInActiveList>
					break;
 8005226:	e009      	b.n	800523c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005234:	f000 fb6e 	bl	8005914 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005238:	e000      	b.n	800523c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800523a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <prvProcessReceivedCommands+0x164>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	1d39      	adds	r1, r7, #4
 8005242:	2200      	movs	r2, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe fc57 	bl	8003af8 <xQueueReceive>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	f47f af57 	bne.w	8005100 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	3730      	adds	r7, #48	; 0x30
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20001330 	.word	0x20001330

08005260 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005266:	e045      	b.n	80052f4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005268:	4b2c      	ldr	r3, [pc, #176]	; (800531c <prvSwitchTimerLists+0xbc>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005272:	4b2a      	ldr	r3, [pc, #168]	; (800531c <prvSwitchTimerLists+0xbc>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe f8eb 	bl	800345c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d12e      	bne.n	80052f4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d90e      	bls.n	80052c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052b4:	4b19      	ldr	r3, [pc, #100]	; (800531c <prvSwitchTimerLists+0xbc>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f7fe f894 	bl	80033ec <vListInsert>
 80052c4:	e016      	b.n	80052f4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052c6:	2300      	movs	r3, #0
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	2300      	movs	r3, #0
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	2100      	movs	r1, #0
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff fd9d 	bl	8004e10 <xTimerGenericCommand>
 80052d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <prvSwitchTimerLists+0xbc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1b4      	bne.n	8005268 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052fe:	4b07      	ldr	r3, [pc, #28]	; (800531c <prvSwitchTimerLists+0xbc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <prvSwitchTimerLists+0xc0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a04      	ldr	r2, [pc, #16]	; (800531c <prvSwitchTimerLists+0xbc>)
 800530a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800530c:	4a04      	ldr	r2, [pc, #16]	; (8005320 <prvSwitchTimerLists+0xc0>)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6013      	str	r3, [r2, #0]
}
 8005312:	bf00      	nop
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20001328 	.word	0x20001328
 8005320:	2000132c 	.word	0x2000132c

08005324 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800532a:	f000 f92f 	bl	800558c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800532e:	4b15      	ldr	r3, [pc, #84]	; (8005384 <prvCheckForValidListAndQueue+0x60>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d120      	bne.n	8005378 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005336:	4814      	ldr	r0, [pc, #80]	; (8005388 <prvCheckForValidListAndQueue+0x64>)
 8005338:	f7fe f80a 	bl	8003350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800533c:	4813      	ldr	r0, [pc, #76]	; (800538c <prvCheckForValidListAndQueue+0x68>)
 800533e:	f7fe f807 	bl	8003350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <prvCheckForValidListAndQueue+0x6c>)
 8005344:	4a10      	ldr	r2, [pc, #64]	; (8005388 <prvCheckForValidListAndQueue+0x64>)
 8005346:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005348:	4b12      	ldr	r3, [pc, #72]	; (8005394 <prvCheckForValidListAndQueue+0x70>)
 800534a:	4a10      	ldr	r2, [pc, #64]	; (800538c <prvCheckForValidListAndQueue+0x68>)
 800534c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <prvCheckForValidListAndQueue+0x74>)
 8005354:	4a11      	ldr	r2, [pc, #68]	; (800539c <prvCheckForValidListAndQueue+0x78>)
 8005356:	2110      	movs	r1, #16
 8005358:	200a      	movs	r0, #10
 800535a:	f7fe f911 	bl	8003580 <xQueueGenericCreateStatic>
 800535e:	4603      	mov	r3, r0
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <prvCheckForValidListAndQueue+0x60>)
 8005362:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <prvCheckForValidListAndQueue+0x60>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <prvCheckForValidListAndQueue+0x60>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	490b      	ldr	r1, [pc, #44]	; (80053a0 <prvCheckForValidListAndQueue+0x7c>)
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fdb0 	bl	8003ed8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005378:	f000 f938 	bl	80055ec <vPortExitCritical>
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20001330 	.word	0x20001330
 8005388:	20001300 	.word	0x20001300
 800538c:	20001314 	.word	0x20001314
 8005390:	20001328 	.word	0x20001328
 8005394:	2000132c 	.word	0x2000132c
 8005398:	200013dc 	.word	0x200013dc
 800539c:	2000133c 	.word	0x2000133c
 80053a0:	08005c38 	.word	0x08005c38

080053a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b04      	subs	r3, #4
 80053b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b04      	subs	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <pxPortInitialiseStack+0x54>)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b14      	subs	r3, #20
 80053de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b20      	subs	r3, #32
 80053ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr
 80053f8:	080053fd 	.word	0x080053fd

080053fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005402:	2300      	movs	r3, #0
 8005404:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <prvTaskExitError+0x54>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d00a      	beq.n	8005426 <prvTaskExitError+0x2a>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <prvTaskExitError+0x28>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60bb      	str	r3, [r7, #8]
}
 8005438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800543a:	bf00      	nop
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0fc      	beq.n	800543c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	200001a0 	.word	0x200001a0
	...

08005460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <pxCurrentTCBConst2>)
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	6808      	ldr	r0, [r1, #0]
 8005466:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800546a:	f380 8809 	msr	PSP, r0
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8811 	msr	BASEPRI, r0
 800547a:	f04e 0e0d 	orr.w	lr, lr, #13
 800547e:	4770      	bx	lr

08005480 <pxCurrentTCBConst2>:
 8005480:	20000e00 	.word	0x20000e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop

08005488 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005488:	4806      	ldr	r0, [pc, #24]	; (80054a4 <prvPortStartFirstTask+0x1c>)
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	6800      	ldr	r0, [r0, #0]
 800548e:	f380 8808 	msr	MSP, r0
 8005492:	b662      	cpsie	i
 8005494:	b661      	cpsie	f
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	df00      	svc	0
 80054a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054a2:	bf00      	nop
 80054a4:	e000ed08 	.word	0xe000ed08

080054a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ae:	4b32      	ldr	r3, [pc, #200]	; (8005578 <xPortStartScheduler+0xd0>)
 80054b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	4b2a      	ldr	r3, [pc, #168]	; (800557c <xPortStartScheduler+0xd4>)
 80054d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <xPortStartScheduler+0xd8>)
 80054d8:	2207      	movs	r2, #7
 80054da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054dc:	e009      	b.n	80054f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <xPortStartScheduler+0xd8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	4a26      	ldr	r2, [pc, #152]	; (8005580 <xPortStartScheduler+0xd8>)
 80054e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b80      	cmp	r3, #128	; 0x80
 80054fc:	d0ef      	beq.n	80054de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054fe:	4b20      	ldr	r3, [pc, #128]	; (8005580 <xPortStartScheduler+0xd8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1c3 0307 	rsb	r3, r3, #7
 8005506:	2b04      	cmp	r3, #4
 8005508:	d00a      	beq.n	8005520 <xPortStartScheduler+0x78>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	60bb      	str	r3, [r7, #8]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <xPortStartScheduler+0xd8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	4a16      	ldr	r2, [pc, #88]	; (8005580 <xPortStartScheduler+0xd8>)
 8005528:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <xPortStartScheduler+0xd8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005532:	4a13      	ldr	r2, [pc, #76]	; (8005580 <xPortStartScheduler+0xd8>)
 8005534:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <xPortStartScheduler+0xdc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a10      	ldr	r2, [pc, #64]	; (8005584 <xPortStartScheduler+0xdc>)
 8005544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <xPortStartScheduler+0xdc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <xPortStartScheduler+0xdc>)
 8005550:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005554:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005556:	f000 f8b9 	bl	80056cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <xPortStartScheduler+0xe0>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005560:	f7ff ff92 	bl	8005488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005564:	f7ff f8be 	bl	80046e4 <vTaskSwitchContext>
	prvTaskExitError();
 8005568:	f7ff ff48 	bl	80053fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	e000e400 	.word	0xe000e400
 800557c:	2000142c 	.word	0x2000142c
 8005580:	20001430 	.word	0x20001430
 8005584:	e000ed20 	.word	0xe000ed20
 8005588:	200001a0 	.word	0x200001a0

0800558c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	607b      	str	r3, [r7, #4]
}
 80055a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055a6:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <vPortEnterCritical+0x58>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <vPortEnterCritical+0x58>)
 80055ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <vPortEnterCritical+0x58>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10f      	bne.n	80055d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <vPortEnterCritical+0x5c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	603b      	str	r3, [r7, #0]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <vPortEnterCritical+0x4a>
	}
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	200001a0 	.word	0x200001a0
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <vPortExitCritical+0x4c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <vPortExitCritical+0x24>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	607b      	str	r3, [r7, #4]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <vPortExitCritical+0x4c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3b01      	subs	r3, #1
 8005616:	4a08      	ldr	r2, [pc, #32]	; (8005638 <vPortExitCritical+0x4c>)
 8005618:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <vPortExitCritical+0x4c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <vPortExitCritical+0x42>
 8005622:	2300      	movs	r3, #0
 8005624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f383 8811 	msr	BASEPRI, r3
}
 800562c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	bc80      	pop	{r7}
 8005636:	4770      	bx	lr
 8005638:	200001a0 	.word	0x200001a0
 800563c:	00000000 	.word	0x00000000

08005640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005640:	f3ef 8009 	mrs	r0, PSP
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <pxCurrentTCBConst>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005650:	6010      	str	r0, [r2, #0]
 8005652:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005656:	f04f 0050 	mov.w	r0, #80	; 0x50
 800565a:	f380 8811 	msr	BASEPRI, r0
 800565e:	f7ff f841 	bl	80046e4 <vTaskSwitchContext>
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8811 	msr	BASEPRI, r0
 800566a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005676:	f380 8809 	msr	PSP, r0
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	4770      	bx	lr

08005680 <pxCurrentTCBConst>:
 8005680:	20000e00 	.word	0x20000e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	607b      	str	r3, [r7, #4]
}
 80056a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056a2:	f7fe ff61 	bl	8004568 <xTaskIncrementTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <xPortSysTickHandler+0x40>)
 80056ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
}
 80056be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vPortSetupTimerInterrupt+0x30>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056d6:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <vPortSetupTimerInterrupt+0x34>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <vPortSetupTimerInterrupt+0x38>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a09      	ldr	r2, [pc, #36]	; (8005708 <vPortSetupTimerInterrupt+0x3c>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	099b      	lsrs	r3, r3, #6
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <vPortSetupTimerInterrupt+0x40>)
 80056ea:	3b01      	subs	r3, #1
 80056ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <vPortSetupTimerInterrupt+0x30>)
 80056f0:	2207      	movs	r2, #7
 80056f2:	601a      	str	r2, [r3, #0]
}
 80056f4:	bf00      	nop
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	e000e010 	.word	0xe000e010
 8005700:	e000e018 	.word	0xe000e018
 8005704:	20000194 	.word	0x20000194
 8005708:	10624dd3 	.word	0x10624dd3
 800570c:	e000e014 	.word	0xe000e014

08005710 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005716:	f3ef 8305 	mrs	r3, IPSR
 800571a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d914      	bls.n	800574c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005722:	4a16      	ldr	r2, [pc, #88]	; (800577c <vPortValidateInterruptPriority+0x6c>)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <vPortValidateInterruptPriority+0x70>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	7afa      	ldrb	r2, [r7, #11]
 8005732:	429a      	cmp	r2, r3
 8005734:	d20a      	bcs.n	800574c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	607b      	str	r3, [r7, #4]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <vPortValidateInterruptPriority+0x74>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <vPortValidateInterruptPriority+0x78>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d90a      	bls.n	8005772 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	603b      	str	r3, [r7, #0]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <vPortValidateInterruptPriority+0x60>
	}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	e000e3f0 	.word	0xe000e3f0
 8005780:	2000142c 	.word	0x2000142c
 8005784:	e000ed0c 	.word	0xe000ed0c
 8005788:	20001430 	.word	0x20001430

0800578c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005798:	f7fe fe2c 	bl	80043f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800579c:	4b58      	ldr	r3, [pc, #352]	; (8005900 <pvPortMalloc+0x174>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057a4:	f000 f910 	bl	80059c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057a8:	4b56      	ldr	r3, [pc, #344]	; (8005904 <pvPortMalloc+0x178>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f040 808e 	bne.w	80058d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01d      	beq.n	80057f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057bc:	2208      	movs	r2, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d014      	beq.n	80057f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	3308      	adds	r3, #8
 80057d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <pvPortMalloc+0x6c>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	617b      	str	r3, [r7, #20]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d069      	beq.n	80058d2 <pvPortMalloc+0x146>
 80057fe:	4b42      	ldr	r3, [pc, #264]	; (8005908 <pvPortMalloc+0x17c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d864      	bhi.n	80058d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005808:	4b40      	ldr	r3, [pc, #256]	; (800590c <pvPortMalloc+0x180>)
 800580a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800580c:	4b3f      	ldr	r3, [pc, #252]	; (800590c <pvPortMalloc+0x180>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005812:	e004      	b.n	800581e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d903      	bls.n	8005830 <pvPortMalloc+0xa4>
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f1      	bne.n	8005814 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005830:	4b33      	ldr	r3, [pc, #204]	; (8005900 <pvPortMalloc+0x174>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	429a      	cmp	r2, r3
 8005838:	d04b      	beq.n	80058d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2208      	movs	r2, #8
 8005840:	4413      	add	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	2308      	movs	r3, #8
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	429a      	cmp	r2, r3
 800585a:	d91f      	bls.n	800589c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <pvPortMalloc+0xf8>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	613b      	str	r3, [r7, #16]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005896:	69b8      	ldr	r0, [r7, #24]
 8005898:	f000 f8f8 	bl	8005a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800589c:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <pvPortMalloc+0x17c>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <pvPortMalloc+0x17c>)
 80058a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058aa:	4b17      	ldr	r3, [pc, #92]	; (8005908 <pvPortMalloc+0x17c>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b18      	ldr	r3, [pc, #96]	; (8005910 <pvPortMalloc+0x184>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d203      	bcs.n	80058be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058b6:	4b14      	ldr	r3, [pc, #80]	; (8005908 <pvPortMalloc+0x17c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a15      	ldr	r2, [pc, #84]	; (8005910 <pvPortMalloc+0x184>)
 80058bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <pvPortMalloc+0x178>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058d2:	f7fe fd9d 	bl	8004410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <pvPortMalloc+0x16a>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <pvPortMalloc+0x168>
	return pvReturn;
 80058f6:	69fb      	ldr	r3, [r7, #28]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	2000203c 	.word	0x2000203c
 8005904:	20002048 	.word	0x20002048
 8005908:	20002040 	.word	0x20002040
 800590c:	20002034 	.word	0x20002034
 8005910:	20002044 	.word	0x20002044

08005914 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d048      	beq.n	80059b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005926:	2308      	movs	r3, #8
 8005928:	425b      	negs	r3, r3
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4413      	add	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <vPortFree+0xac>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <vPortFree+0x44>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	60fb      	str	r3, [r7, #12]
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <vPortFree+0x62>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60bb      	str	r3, [r7, #8]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <vPortFree+0xac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4013      	ands	r3, r2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d019      	beq.n	80059b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d115      	bne.n	80059b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortFree+0xac>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	43db      	mvns	r3, r3
 8005996:	401a      	ands	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800599c:	f7fe fd2a 	bl	80043f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <vPortFree+0xb0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4413      	add	r3, r2
 80059aa:	4a06      	ldr	r2, [pc, #24]	; (80059c4 <vPortFree+0xb0>)
 80059ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ae:	6938      	ldr	r0, [r7, #16]
 80059b0:	f000 f86c 	bl	8005a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059b4:	f7fe fd2c 	bl	8004410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20002048 	.word	0x20002048
 80059c4:	20002040 	.word	0x20002040

080059c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059d4:	4b27      	ldr	r3, [pc, #156]	; (8005a74 <prvHeapInit+0xac>)
 80059d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00c      	beq.n	80059fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3307      	adds	r3, #7
 80059e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0307 	bic.w	r3, r3, #7
 80059ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	4a1f      	ldr	r2, [pc, #124]	; (8005a74 <prvHeapInit+0xac>)
 80059f8:	4413      	add	r3, r2
 80059fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a00:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <prvHeapInit+0xb0>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a06:	4b1c      	ldr	r3, [pc, #112]	; (8005a78 <prvHeapInit+0xb0>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4413      	add	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a14:	2208      	movs	r2, #8
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <prvHeapInit+0xb4>)
 8005a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a2a:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <prvHeapInit+0xb4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a32:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <prvHeapInit+0xb4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvHeapInit+0xb4>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <prvHeapInit+0xb8>)
 8005a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <prvHeapInit+0xbc>)
 8005a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a60:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <prvHeapInit+0xc0>)
 8005a62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a66:	601a      	str	r2, [r3, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20001434 	.word	0x20001434
 8005a78:	20002034 	.word	0x20002034
 8005a7c:	2000203c 	.word	0x2000203c
 8005a80:	20002044 	.word	0x20002044
 8005a84:	20002040 	.word	0x20002040
 8005a88:	20002048 	.word	0x20002048

08005a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a94:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <prvInsertBlockIntoFreeList+0xa8>)
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e002      	b.n	8005aa0 <prvInsertBlockIntoFreeList+0x14>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d8f7      	bhi.n	8005a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d108      	bne.n	8005ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	441a      	add	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	441a      	add	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d118      	bne.n	8005b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <prvInsertBlockIntoFreeList+0xac>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d00d      	beq.n	8005b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	441a      	add	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	e008      	b.n	8005b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <prvInsertBlockIntoFreeList+0xac>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e003      	b.n	8005b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d002      	beq.n	8005b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	20002034 	.word	0x20002034
 8005b38:	2000203c 	.word	0x2000203c

08005b3c <memset>:
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4402      	add	r2, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <__libc_init_array>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	2600      	movs	r6, #0
 8005b50:	4d0c      	ldr	r5, [pc, #48]	; (8005b84 <__libc_init_array+0x38>)
 8005b52:	4c0d      	ldr	r4, [pc, #52]	; (8005b88 <__libc_init_array+0x3c>)
 8005b54:	1b64      	subs	r4, r4, r5
 8005b56:	10a4      	asrs	r4, r4, #2
 8005b58:	42a6      	cmp	r6, r4
 8005b5a:	d109      	bne.n	8005b70 <__libc_init_array+0x24>
 8005b5c:	f000 f828 	bl	8005bb0 <_init>
 8005b60:	2600      	movs	r6, #0
 8005b62:	4d0a      	ldr	r5, [pc, #40]	; (8005b8c <__libc_init_array+0x40>)
 8005b64:	4c0a      	ldr	r4, [pc, #40]	; (8005b90 <__libc_init_array+0x44>)
 8005b66:	1b64      	subs	r4, r4, r5
 8005b68:	10a4      	asrs	r4, r4, #2
 8005b6a:	42a6      	cmp	r6, r4
 8005b6c:	d105      	bne.n	8005b7a <__libc_init_array+0x2e>
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
 8005b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b74:	4798      	blx	r3
 8005b76:	3601      	adds	r6, #1
 8005b78:	e7ee      	b.n	8005b58 <__libc_init_array+0xc>
 8005b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7e:	4798      	blx	r3
 8005b80:	3601      	adds	r6, #1
 8005b82:	e7f2      	b.n	8005b6a <__libc_init_array+0x1e>
 8005b84:	08005d30 	.word	0x08005d30
 8005b88:	08005d30 	.word	0x08005d30
 8005b8c:	08005d30 	.word	0x08005d30
 8005b90:	08005d34 	.word	0x08005d34

08005b94 <memcpy>:
 8005b94:	440a      	add	r2, r1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b9c:	d100      	bne.n	8005ba0 <memcpy+0xc>
 8005b9e:	4770      	bx	lr
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba6:	4291      	cmp	r1, r2
 8005ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bac:	d1f9      	bne.n	8005ba2 <memcpy+0xe>
 8005bae:	bd10      	pop	{r4, pc}

08005bb0 <_init>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr

08005bbc <_fini>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	bf00      	nop
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr
