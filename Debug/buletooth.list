
buletooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08005fb8  08005fb8  00006fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  000081a8  2**0
                  CONTENTS
  4 .ARM          00000000  08006414  08006414  000081a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006414  08006414  000081a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006418  08006418  00007418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  0800641c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e48  200001a8  080065c4  000081a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ff0  080065c4  00008ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001443a  00000000  00000000  000081d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ce  00000000  00000000  0001c60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0001f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8e  00000000  00000000  00020950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005213  00000000  00000000  000216de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165a3  00000000  00000000  000268f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de0b  00000000  00000000  0003ce94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cac9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  000cace4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cf478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a8 	.word	0x200001a8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fa0 	.word	0x08005fa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ac 	.word	0x200001ac
 800014c:	08005fa0 	.word	0x08005fa0

08000150 <BlueTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BlueTask */
void BlueTask(void *argument)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000158:	2001      	movs	r0, #1
 800015a:	f003 f8bd 	bl	80032d8 <osDelay>
 800015e:	e7fb      	b.n	8000158 <BlueTask+0x8>

08000160 <HAL_UART_RxCpltCallback>:
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1){
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0b      	ldr	r2, [pc, #44]	@ (800019c <HAL_UART_RxCpltCallback+0x3c>)
 800016e:	4293      	cmp	r3, r2
 8000170:	d110      	bne.n	8000194 <HAL_UART_RxCpltCallback+0x34>
//    	xQueueSendxQueueSendFromISR()
    	HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8000172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000176:	480a      	ldr	r0, [pc, #40]	@ (80001a0 <HAL_UART_RxCpltCallback+0x40>)
 8000178:	f001 f950 	bl	800141c <HAL_GPIO_TogglePin>
    	osMessageQueuePut(ScreenQueueHandle, &rx_data, 0,0);
 800017c:	4b09      	ldr	r3, [pc, #36]	@ (80001a4 <HAL_UART_RxCpltCallback+0x44>)
 800017e:	6818      	ldr	r0, [r3, #0]
 8000180:	2300      	movs	r3, #0
 8000182:	2200      	movs	r2, #0
 8000184:	4908      	ldr	r1, [pc, #32]	@ (80001a8 <HAL_UART_RxCpltCallback+0x48>)
 8000186:	f003 f95b 	bl	8003440 <osMessageQueuePut>
        HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800018a:	2201      	movs	r2, #1
 800018c:	4906      	ldr	r1, [pc, #24]	@ (80001a8 <HAL_UART_RxCpltCallback+0x48>)
 800018e:	4807      	ldr	r0, [pc, #28]	@ (80001ac <HAL_UART_RxCpltCallback+0x4c>)
 8000190:	f002 fa5a 	bl	8002648 <HAL_UART_Receive_IT>
    }
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40013800 	.word	0x40013800
 80001a0:	40011000 	.word	0x40011000
 80001a4:	20000278 	.word	0x20000278
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	2000021c 	.word	0x2000021c

080001b0 <main>:


int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0


  HAL_Init();
 80001b4:	f000 fd74 	bl	8000ca0 <HAL_Init>

  SystemClock_Config();
 80001b8:	f000 f868 	bl	800028c <SystemClock_Config>

  MX_GPIO_Init();
 80001bc:	f000 f8fa 	bl	80003b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c0:	f000 f8a0 	bl	8000304 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001c4:	f000 f8cc 	bl	8000360 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initOLED(&hi2c1);
 80001c8:	481e      	ldr	r0, [pc, #120]	@ (8000244 <main+0x94>)
 80001ca:	f000 f957 	bl	800047c <initOLED>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ce:	f002 ff73 	bl	80030b8 <osKernelInitialize>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	491c      	ldr	r1, [pc, #112]	@ (8000248 <main+0x98>)
 80001d6:	481d      	ldr	r0, [pc, #116]	@ (800024c <main+0x9c>)
 80001d8:	f002 fa36 	bl	8002648 <HAL_UART_Receive_IT>

  MainQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &MainQueue_attributes);
 80001dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000250 <main+0xa0>)
 80001de:	2101      	movs	r1, #1
 80001e0:	2010      	movs	r0, #16
 80001e2:	f003 f8a7 	bl	8003334 <osMessageQueueNew>
 80001e6:	4603      	mov	r3, r0
 80001e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000254 <main+0xa4>)
 80001ea:	6013      	str	r3, [r2, #0]

  /* creation of BlueQueue */
  BlueQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &BlueQueue_attributes);
 80001ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000258 <main+0xa8>)
 80001ee:	2101      	movs	r1, #1
 80001f0:	2010      	movs	r0, #16
 80001f2:	f003 f89f 	bl	8003334 <osMessageQueueNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <main+0xac>)
 80001fa:	6013      	str	r3, [r2, #0]

  /* creation of ScreenQueue */
  ScreenQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &ScreenQueue_attributes);
 80001fc:	4a18      	ldr	r2, [pc, #96]	@ (8000260 <main+0xb0>)
 80001fe:	2101      	movs	r1, #1
 8000200:	2010      	movs	r0, #16
 8000202:	f003 f897 	bl	8003334 <osMessageQueueNew>
 8000206:	4603      	mov	r3, r0
 8000208:	4a16      	ldr	r2, [pc, #88]	@ (8000264 <main+0xb4>)
 800020a:	6013      	str	r3, [r2, #0]

  bluetoohTaskHandle = osThreadNew(BlueTask, NULL, &bluetoohTask_attributes);
 800020c:	4a16      	ldr	r2, [pc, #88]	@ (8000268 <main+0xb8>)
 800020e:	2100      	movs	r1, #0
 8000210:	4816      	ldr	r0, [pc, #88]	@ (800026c <main+0xbc>)
 8000212:	f002 ffb7 	bl	8003184 <osThreadNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a15      	ldr	r2, [pc, #84]	@ (8000270 <main+0xc0>)
 800021a:	6013      	str	r3, [r2, #0]

  /* creation of mainTask */
  mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 800021c:	4a15      	ldr	r2, [pc, #84]	@ (8000274 <main+0xc4>)
 800021e:	2100      	movs	r1, #0
 8000220:	4815      	ldr	r0, [pc, #84]	@ (8000278 <main+0xc8>)
 8000222:	f002 ffaf 	bl	8003184 <osThreadNew>
 8000226:	4603      	mov	r3, r0
 8000228:	4a14      	ldr	r2, [pc, #80]	@ (800027c <main+0xcc>)
 800022a:	6013      	str	r3, [r2, #0]

  /* creation of screenTask */
  screenTaskHandle = osThreadNew(ScreenTask, NULL, &screenTask_attributes);
 800022c:	4a14      	ldr	r2, [pc, #80]	@ (8000280 <main+0xd0>)
 800022e:	2100      	movs	r1, #0
 8000230:	4814      	ldr	r0, [pc, #80]	@ (8000284 <main+0xd4>)
 8000232:	f002 ffa7 	bl	8003184 <osThreadNew>
 8000236:	4603      	mov	r3, r0
 8000238:	4a13      	ldr	r2, [pc, #76]	@ (8000288 <main+0xd8>)
 800023a:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800023c:	f002 ff6e 	bl	800311c <osKernelStart>


  while (1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <main+0x90>
 8000244:	200001c8 	.word	0x200001c8
 8000248:	200001c4 	.word	0x200001c4
 800024c:	2000021c 	.word	0x2000021c
 8000250:	080060a0 	.word	0x080060a0
 8000254:	20000270 	.word	0x20000270
 8000258:	080060b8 	.word	0x080060b8
 800025c:	20000274 	.word	0x20000274
 8000260:	080060d0 	.word	0x080060d0
 8000264:	20000278 	.word	0x20000278
 8000268:	08006034 	.word	0x08006034
 800026c:	08000151 	.word	0x08000151
 8000270:	20000264 	.word	0x20000264
 8000274:	08006058 	.word	0x08006058
 8000278:	08000459 	.word	0x08000459
 800027c:	20000268 	.word	0x20000268
 8000280:	0800607c 	.word	0x0800607c
 8000284:	08000a1d 	.word	0x08000a1d
 8000288:	2000026c 	.word	0x2000026c

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	@ 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	@ 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f005 fe46 	bl	8005f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fd60 	bl	8001d88 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ce:	f000 f8bd 	bl	800044c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 ffce 	bl	800228c <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002f6:	f000 f8a9 	bl	800044c <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	@ 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000308:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <MX_I2C1_Init+0x50>)
 800030a:	4a13      	ldr	r2, [pc, #76]	@ (8000358 <MX_I2C1_Init+0x54>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000310:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_I2C1_Init+0x58>)
 8000312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000342:	f001 f885 	bl	8001450 <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f87e 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200001c8 	.word	0x200001c8
 8000358:	40005400 	.word	0x40005400
 800035c:	000186a0 	.word	0x000186a0

08000360 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	@ (80003b0 <MX_USART1_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 800036c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <MX_USART1_UART_Init+0x4c>)
 8000398:	f002 f906 	bl	80025a8 <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003a2:	f000 f853 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	2000021c 	.word	0x2000021c
 80003b0:	40013800 	.word	0x40013800

080003b4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a17      	ldr	r2, [pc, #92]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <MX_GPIO_Init+0x90>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_GPIO_Init+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0308 	and.w	r3, r3, #8
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_PORT, INDICATOR_LED_PIN, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000416:	480c      	ldr	r0, [pc, #48]	@ (8000448 <MX_GPIO_Init+0x94>)
 8000418:	f000 ffe8 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = INDICATOR_LED_PIN;
 800041c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INDICATOR_LED_PORT, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	4804      	ldr	r0, [pc, #16]	@ (8000448 <MX_GPIO_Init+0x94>)
 8000436:	f000 fe55 	bl	80010e4 <HAL_GPIO_Init>

}
 800043a:	bf00      	nop
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	40011000 	.word	0x40011000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <Error_Handler+0x8>

08000458 <MainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainTask */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(INDICATOR_LED_PORT, INDICATOR_LED_PIN);
 8000460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000464:	4804      	ldr	r0, [pc, #16]	@ (8000478 <MainTask+0x20>)
 8000466:	f000 ffd9 	bl	800141c <HAL_GPIO_TogglePin>
    osDelay(1000);
 800046a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800046e:	f002 ff33 	bl	80032d8 <osDelay>
    HAL_GPIO_TogglePin(INDICATOR_LED_PORT, INDICATOR_LED_PIN);
 8000472:	bf00      	nop
 8000474:	e7f4      	b.n	8000460 <MainTask+0x8>
 8000476:	bf00      	nop
 8000478:	40011000 	.word	0x40011000

0800047c <initOLED>:
		  0x00,0x41,0x41,0x77,0x7f,0x08,0x00,0x00, // 0x7D 125 }
		  0x00,0x04,0x06,0x02,0x04,0x06,0x02,0x00, // 0x7E 126 ~
		  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x7F 127
		};// 8x16
void initOLED(I2C_HandleTypeDef *i2cInstance)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  memset(screenBuff, 0, BUFF_SIZE);
 8000484:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000488:	2100      	movs	r1, #0
 800048a:	480c      	ldr	r0, [pc, #48]	@ (80004bc <initOLED+0x40>)
 800048c:	f005 fd4e 	bl	8005f2c <memset>
  memset(cmdBuff, 0, WIRE_MAX);
 8000490:	2220      	movs	r2, #32
 8000492:	2100      	movs	r1, #0
 8000494:	480a      	ldr	r0, [pc, #40]	@ (80004c0 <initOLED+0x44>)
 8000496:	f005 fd49 	bl	8005f2c <memset>
  i2c1 = i2cInstance;
 800049a:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <initOLED+0x48>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6013      	str	r3, [r2, #0]
  initDisplay();
 80004a0:	f000 f87a 	bl	8000598 <initDisplay>
  drawImage(logo_bmp,67,45); 
 80004a4:	222d      	movs	r2, #45	@ 0x2d
 80004a6:	2143      	movs	r1, #67	@ 0x43
 80004a8:	4807      	ldr	r0, [pc, #28]	@ (80004c8 <initOLED+0x4c>)
 80004aa:	f000 f9b8 	bl	800081e <drawImage>
  display();
 80004ae:	f000 f8c5 	bl	800063c <display>
  return;
 80004b2:	bf00      	nop
}
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000027c 	.word	0x2000027c
 80004c0:	2000067c 	.word	0x2000067c
 80004c4:	2000069c 	.word	0x2000069c
 80004c8:	20000000 	.word	0x20000000

080004cc <write_cmd>:

static void write_cmd(uint8_t c)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  uint8_t buffTemp[3];
  memset(screenBuff, 0, 3);
 80004d6:	2203      	movs	r2, #3
 80004d8:	2100      	movs	r1, #0
 80004da:	480a      	ldr	r0, [pc, #40]	@ (8000504 <write_cmd+0x38>)
 80004dc:	f005 fd26 	bl	8005f2c <memset>
  buffTemp[0] = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	733b      	strb	r3, [r7, #12]
  buffTemp[1] = c;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(i2c1, addr_oled, buffTemp, 2, 100);
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <write_cmd+0x3c>)
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	f107 020c 	add.w	r2, r7, #12
 80004f0:	2364      	movs	r3, #100	@ 0x64
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2302      	movs	r3, #2
 80004f6:	2178      	movs	r1, #120	@ 0x78
 80004f8:	f001 f8ee 	bl	80016d8 <HAL_I2C_Master_Transmit>
  return;
 80004fc:	bf00      	nop
}
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000027c 	.word	0x2000027c
 8000508:	2000069c 	.word	0x2000069c

0800050c <cmd_list>:

static void cmd_list(unsigned char *c, int n)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  unsigned char bytesOut = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	73fb      	strb	r3, [r7, #15]
  memset(cmdBuff, 0, WIRE_MAX);
 800051a:	2220      	movs	r2, #32
 800051c:	2100      	movs	r1, #0
 800051e:	481c      	ldr	r0, [pc, #112]	@ (8000590 <cmd_list+0x84>)
 8000520:	f005 fd04 	bl	8005f2c <memset>

  while (n--)
 8000524:	e01d      	b.n	8000562 <cmd_list+0x56>
  {
    if (bytesOut >= WIRE_MAX)
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	2b1f      	cmp	r3, #31
 800052a:	d910      	bls.n	800054e <cmd_list+0x42>
    {
      HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, WIRE_MAX, 1000);
 800052c:	4b19      	ldr	r3, [pc, #100]	@ (8000594 <cmd_list+0x88>)
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2320      	movs	r3, #32
 8000538:	4a15      	ldr	r2, [pc, #84]	@ (8000590 <cmd_list+0x84>)
 800053a:	2178      	movs	r1, #120	@ 0x78
 800053c:	f001 f8cc 	bl	80016d8 <HAL_I2C_Master_Transmit>
      memset(cmdBuff, 0, WIRE_MAX);
 8000540:	2220      	movs	r2, #32
 8000542:	2100      	movs	r1, #0
 8000544:	4812      	ldr	r0, [pc, #72]	@ (8000590 <cmd_list+0x84>)
 8000546:	f005 fcf1 	bl	8005f2c <memset>
      bytesOut = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
    }
    cmdBuff[bytesOut] = *c++;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	7bfa      	ldrb	r2, [r7, #15]
 8000556:	7819      	ldrb	r1, [r3, #0]
 8000558:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <cmd_list+0x84>)
 800055a:	5499      	strb	r1, [r3, r2]
    bytesOut++;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	3301      	adds	r3, #1
 8000560:	73fb      	strb	r3, [r7, #15]
  while (n--)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	1e5a      	subs	r2, r3, #1
 8000566:	603a      	str	r2, [r7, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1dc      	bne.n	8000526 <cmd_list+0x1a>
  }
  if (bytesOut > 0)
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00a      	beq.n	8000588 <cmd_list+0x7c>
  {
    HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, bytesOut, 1000);
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <cmd_list+0x88>)
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	b29b      	uxth	r3, r3
 800057a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	4a03      	ldr	r2, [pc, #12]	@ (8000590 <cmd_list+0x84>)
 8000582:	2178      	movs	r1, #120	@ 0x78
 8000584:	f001 f8a8 	bl	80016d8 <HAL_I2C_Master_Transmit>
  }
}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000067c 	.word	0x2000067c
 8000594:	2000069c 	.word	0x2000069c

08000598 <initDisplay>:

static void initDisplay()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  write_cmd(0xAE); // 0xAE // display off
 800059c:	20ae      	movs	r0, #174	@ 0xae
 800059e:	f7ff ff95 	bl	80004cc <write_cmd>
  write_cmd(0xD5); // 0xD5 // set display clock division
 80005a2:	20d5      	movs	r0, #213	@ 0xd5
 80005a4:	f7ff ff92 	bl	80004cc <write_cmd>
  write_cmd(0x80); // the suggested ratio 0x80
 80005a8:	2080      	movs	r0, #128	@ 0x80
 80005aa:	f7ff ff8f 	bl	80004cc <write_cmd>
  write_cmd(0xA8); // 0xA8 set multiplex
 80005ae:	20a8      	movs	r0, #168	@ 0xa8
 80005b0:	f7ff ff8c 	bl	80004cc <write_cmd>
  write_cmd(63);   // set height
 80005b4:	203f      	movs	r0, #63	@ 0x3f
 80005b6:	f7ff ff89 	bl	80004cc <write_cmd>
  write_cmd(0xD3); // set display offseti2c1
 80005ba:	20d3      	movs	r0, #211	@ 0xd3
 80005bc:	f7ff ff86 	bl	80004cc <write_cmd>
  write_cmd(0x00); // no offset
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ff83 	bl	80004cc <write_cmd>
  write_cmd(0x40); // line #0 setstartline
 80005c6:	2040      	movs	r0, #64	@ 0x40
 80005c8:	f7ff ff80 	bl	80004cc <write_cmd>
  write_cmd(0x8D); // 0x8D // chargepump
 80005cc:	208d      	movs	r0, #141	@ 0x8d
 80005ce:	f7ff ff7d 	bl	80004cc <write_cmd>
  write_cmd(0x14); //?? 0x10
 80005d2:	2014      	movs	r0, #20
 80005d4:	f7ff ff7a 	bl	80004cc <write_cmd>
  write_cmd(0x20); // memory mode
 80005d8:	2020      	movs	r0, #32
 80005da:	f7ff ff77 	bl	80004cc <write_cmd>
  write_cmd(0x00); // 0x0 act like ks0108
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff74 	bl	80004cc <write_cmd>
  write_cmd(0xA1); // segremap
 80005e4:	20a1      	movs	r0, #161	@ 0xa1
 80005e6:	f7ff ff71 	bl	80004cc <write_cmd>
  write_cmd(0xC8); // comscandec
 80005ea:	20c8      	movs	r0, #200	@ 0xc8
 80005ec:	f7ff ff6e 	bl	80004cc <write_cmd>
  write_cmd(0xDA); // 0xDA set com pins
 80005f0:	20da      	movs	r0, #218	@ 0xda
 80005f2:	f7ff ff6b 	bl	80004cc <write_cmd>
  write_cmd(0x12);
 80005f6:	2012      	movs	r0, #18
 80005f8:	f7ff ff68 	bl	80004cc <write_cmd>
  write_cmd(0x81); // 0x81 // set contract
 80005fc:	2081      	movs	r0, #129	@ 0x81
 80005fe:	f7ff ff65 	bl	80004cc <write_cmd>
  write_cmd(0xCF); //??  0x9F
 8000602:	20cf      	movs	r0, #207	@ 0xcf
 8000604:	f7ff ff62 	bl	80004cc <write_cmd>
  write_cmd(0xD9); // 0xd9 set pre-charge
 8000608:	20d9      	movs	r0, #217	@ 0xd9
 800060a:	f7ff ff5f 	bl	80004cc <write_cmd>
  write_cmd(0xF1); // 0x22
 800060e:	20f1      	movs	r0, #241	@ 0xf1
 8000610:	f7ff ff5c 	bl	80004cc <write_cmd>
  write_cmd(0xDB); // SSD1306_SETVCOMDETECT
 8000614:	20db      	movs	r0, #219	@ 0xdb
 8000616:	f7ff ff59 	bl	80004cc <write_cmd>
  write_cmd(0x40);
 800061a:	2040      	movs	r0, #64	@ 0x40
 800061c:	f7ff ff56 	bl	80004cc <write_cmd>
  write_cmd(0xA4); // 0xA4 // display all on resume
 8000620:	20a4      	movs	r0, #164	@ 0xa4
 8000622:	f7ff ff53 	bl	80004cc <write_cmd>
  write_cmd(0xA6); // 0xA6 // normal display
 8000626:	20a6      	movs	r0, #166	@ 0xa6
 8000628:	f7ff ff50 	bl	80004cc <write_cmd>
  write_cmd(0x2E); // deactivate scroll
 800062c:	202e      	movs	r0, #46	@ 0x2e
 800062e:	f7ff ff4d 	bl	80004cc <write_cmd>
  write_cmd(0xAF); // --turn on oled panel
 8000632:	20af      	movs	r0, #175	@ 0xaf
 8000634:	f7ff ff4a 	bl	80004cc <write_cmd>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <display>:

static void display()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8

  int count = WIDTH * (HEIGHT / 8);
 8000642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000646:	60fb      	str	r3, [r7, #12]
  uint8_t *ptr = screenBuff;
 8000648:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <display+0xb4>)
 800064a:	60bb      	str	r3, [r7, #8]
  unsigned char bytesOut = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
  unsigned char dlist1[] = {
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <display+0xb8>)
 8000652:	463b      	mov	r3, r7
 8000654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000658:	6018      	str	r0, [r3, #0]
 800065a:	3304      	adds	r3, #4
 800065c:	7019      	strb	r1, [r3, #0]
      0,    // Page start address
      0xFF, // Page end (not really, but works here)
      SSD1306_COLUMNADDR,
      0};
  // Column start address
  cmd_list(dlist1, sizeof(dlist1));
 800065e:	463b      	mov	r3, r7
 8000660:	2105      	movs	r1, #5
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff52 	bl	800050c <cmd_list>
  write_cmd(WIDTH - 1);
 8000668:	207f      	movs	r0, #127	@ 0x7f
 800066a:	f7ff ff2f 	bl	80004cc <write_cmd>
  memset(cmdBuff, 0, WIRE_MAX);
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <display+0xbc>)
 8000674:	f005 fc5a 	bl	8005f2c <memset>
  cmdBuff[0] = 0x40;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <display+0xbc>)
 800067a:	2240      	movs	r2, #64	@ 0x40
 800067c:	701a      	strb	r2, [r3, #0]
  while (count--)
 800067e:	e020      	b.n	80006c2 <display+0x86>
  {
    if (bytesOut >= WIRE_MAX)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b1f      	cmp	r3, #31
 8000684:	d913      	bls.n	80006ae <display+0x72>
    {
      HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, WIRE_MAX, 1000);
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <display+0xc0>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2320      	movs	r3, #32
 8000692:	4a19      	ldr	r2, [pc, #100]	@ (80006f8 <display+0xbc>)
 8000694:	2178      	movs	r1, #120	@ 0x78
 8000696:	f001 f81f 	bl	80016d8 <HAL_I2C_Master_Transmit>
      memset(cmdBuff, 0, WIRE_MAX);
 800069a:	2220      	movs	r2, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <display+0xbc>)
 80006a0:	f005 fc44 	bl	8005f2c <memset>
      cmdBuff[0] = 0x40;
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <display+0xbc>)
 80006a6:	2240      	movs	r2, #64	@ 0x40
 80006a8:	701a      	strb	r2, [r3, #0]
      bytesOut = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
    }
    cmdBuff[bytesOut] = *ptr++;
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	60ba      	str	r2, [r7, #8]
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <display+0xbc>)
 80006ba:	5499      	strb	r1, [r3, r2]
    bytesOut++;
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	3301      	adds	r3, #1
 80006c0:	71fb      	strb	r3, [r7, #7]
  while (count--)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	1e5a      	subs	r2, r3, #1
 80006c6:	60fa      	str	r2, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1d9      	bne.n	8000680 <display+0x44>
  }
  if (bytesOut > 0)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00a      	beq.n	80006e8 <display+0xac>
  {
    HAL_I2C_Master_Transmit(i2c1, addr_oled, cmdBuff, bytesOut, 1000);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <display+0xc0>)
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <display+0xbc>)
 80006e2:	2178      	movs	r1, #120	@ 0x78
 80006e4:	f000 fff8 	bl	80016d8 <HAL_I2C_Master_Transmit>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000027c 	.word	0x2000027c
 80006f4:	08006004 	.word	0x08006004
 80006f8:	2000067c 	.word	0x2000067c
 80006fc:	2000069c 	.word	0x2000069c

08000700 <clearDisplay>:

void clearDisplay()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  memset(screenBuff, 0, BUFF_SIZE);
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	2100      	movs	r1, #0
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <clearDisplay+0x18>)
 800070c:	f005 fc0e 	bl	8005f2c <memset>
  display();
 8000710:	f7ff ff94 	bl	800063c <display>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000027c 	.word	0x2000027c

0800071c <drawpixel>:

static void drawpixel(int x, int y)
{ // draw hang y cot x
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]

  if ((x >= 0) && (x < WIDTH) && (y >= 0) && (y < HEIGHT))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db22      	blt.n	8000772 <drawpixel+0x56>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000730:	dc1f      	bgt.n	8000772 <drawpixel+0x56>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db1c      	blt.n	8000772 <drawpixel+0x56>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b3f      	cmp	r3, #63	@ 0x3f
 800073c:	dc19      	bgt.n	8000772 <drawpixel+0x56>
  {
    screenBuff[x + (y / 8) * WIDTH] |= (1 << (y & 7)); //
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	da00      	bge.n	8000746 <drawpixel+0x2a>
 8000744:	3307      	adds	r3, #7
 8000746:	10db      	asrs	r3, r3, #3
 8000748:	01d9      	lsls	r1, r3, #7
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	440a      	add	r2, r1
 800074e:	490b      	ldr	r1, [pc, #44]	@ (800077c <drawpixel+0x60>)
 8000750:	5c8a      	ldrb	r2, [r1, r2]
 8000752:	b251      	sxtb	r1, r2
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	f002 0207 	and.w	r2, r2, #7
 800075a:	2001      	movs	r0, #1
 800075c:	fa00 f202 	lsl.w	r2, r0, r2
 8000760:	b252      	sxtb	r2, r2
 8000762:	430a      	orrs	r2, r1
 8000764:	b251      	sxtb	r1, r2
 8000766:	01da      	lsls	r2, r3, #7
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	4a03      	ldr	r2, [pc, #12]	@ (800077c <drawpixel+0x60>)
 8000770:	54d1      	strb	r1, [r2, r3]
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	2000027c 	.word	0x2000027c

08000780 <drawBitmap>:

void drawBitmap(int x, int y, unsigned char bitmap[], int w, int h)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	603b      	str	r3, [r7, #0]

  int i, j;
  int byteWidth = (w + 7) / 8;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3307      	adds	r3, #7
 8000792:	2b00      	cmp	r3, #0
 8000794:	da00      	bge.n	8000798 <drawBitmap+0x18>
 8000796:	3307      	adds	r3, #7
 8000798:	10db      	asrs	r3, r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  int byte = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  for (j = 0; j < h; j++)
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	e032      	b.n	800080c <drawBitmap+0x8c>
  {
    for (i = 0; i < w; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e028      	b.n	80007fe <drawBitmap+0x7e>
    {

      if (i & 7) // 8 bit 1
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <drawBitmap+0x3e>
        byte <<= 1;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	e00e      	b.n	80007dc <drawBitmap+0x5c>
      else
        byte = bitmap[j * byteWidth + i / 8];
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	fb03 f202 	mul.w	r2, r3, r2
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	da00      	bge.n	80007ce <drawBitmap+0x4e>
 80007cc:	3307      	adds	r3, #7
 80007ce:	10db      	asrs	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	461a      	mov	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	617b      	str	r3, [r7, #20]
      if (byte & 0x80)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <drawBitmap+0x78>
      {
        drawpixel(x + i, y + j);
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	18d0      	adds	r0, r2, r3
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	4413      	add	r3, r2
 80007f2:	4619      	mov	r1, r3
 80007f4:	f7ff ff92 	bl	800071c <drawpixel>
    for (i = 0; i < w; i++)
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	3301      	adds	r3, #1
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	429a      	cmp	r2, r3
 8000804:	dbd2      	blt.n	80007ac <drawBitmap+0x2c>
  for (j = 0; j < h; j++)
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	3301      	adds	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000810:	429a      	cmp	r2, r3
 8000812:	dbc8      	blt.n	80007a6 <drawBitmap+0x26>
      }
    }
  }
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <drawImage>:

void drawImage(unsigned char bitmap[], int LOGO_HEIGHT, int LOGO_WIDTH)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af02      	add	r7, sp, #8
 8000824:	60f8      	str	r0, [r7, #12]
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]

  drawBitmap(
      (WIDTH - LOGO_WIDTH) / 2,
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
  drawBitmap(
 8000830:	0fda      	lsrs	r2, r3, #31
 8000832:	4413      	add	r3, r2
 8000834:	105b      	asrs	r3, r3, #1
 8000836:	4618      	mov	r0, r3
      (HEIGHT - LOGO_HEIGHT) / 2,
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
  drawBitmap(
 800083e:	0fda      	lsrs	r2, r3, #31
 8000840:	4413      	add	r3, r2
 8000842:	105b      	asrs	r3, r3, #1
 8000844:	4619      	mov	r1, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	f7ff ff97 	bl	8000780 <drawBitmap>
      bitmap, LOGO_WIDTH, LOGO_HEIGHT);
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
 8000866:	460b      	mov	r3, r1
 8000868:	80bb      	strh	r3, [r7, #4]
 800086a:	4613      	mov	r3, r2
 800086c:	70fb      	strb	r3, [r7, #3]

  if ((x >= WIDTH) || x < 0 ||           // Clip right
 800086e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000872:	2b7f      	cmp	r3, #127	@ 0x7f
 8000874:	dc48      	bgt.n	8000908 <drawChar+0xac>
 8000876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db44      	blt.n	8000908 <drawChar+0xac>
 800087e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000882:	2b3f      	cmp	r3, #63	@ 0x3f
 8000884:	dc40      	bgt.n	8000908 <drawChar+0xac>
      (y >= HEIGHT) || y < 0 ||          // Clip bottom
 8000886:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db3c      	blt.n	8000908 <drawChar+0xac>
 800088e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000892:	2b79      	cmp	r3, #121	@ 0x79
 8000894:	dc38      	bgt.n	8000908 <drawChar+0xac>
      ((x + width - WIDTH - 1) > 0) ||  // Clip left
 8000896:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800089a:	2b39      	cmp	r3, #57	@ 0x39
 800089c:	dc34      	bgt.n	8000908 <drawChar+0xac>
  }
 *
 *
 *
 * */
  int16_t start = (c -32)  * heigh; //start of character
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	3b20      	subs	r3, #32
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	817b      	strh	r3, [r7, #10]
   for(int i = 0; i<width ;i++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	e025      	b.n	80008fc <drawChar+0xa0>
   {
       /* cot*/
	   uint8_t value = Fonts_10x8[start + i];
 80008b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <drawChar+0xb4>)
 80008ba:	5cd3      	ldrb	r3, [r2, r3]
 80008bc:	74fb      	strb	r3, [r7, #19]
       for(int j = heigh-1 ; j >=0 ; j--){
 80008be:	2307      	movs	r3, #7
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e015      	b.n	80008f0 <drawChar+0x94>
    	   // hang
    	   if (value& 0x01)
 80008c4:	7cfb      	ldrb	r3, [r7, #19]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00a      	beq.n	80008e4 <drawChar+0x88>
    	  	      {
    	  	        drawpixel(x + i, y - j);
 80008ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	18d0      	adds	r0, r2, r3
 80008d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	4619      	mov	r1, r3
 80008e0:	f7ff ff1c 	bl	800071c <drawpixel>
    	  	      }
    	   value>>=1;
 80008e4:	7cfb      	ldrb	r3, [r7, #19]
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	74fb      	strb	r3, [r7, #19]
       for(int j = heigh-1 ; j >=0 ; j--){
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dae6      	bge.n	80008c4 <drawChar+0x68>
   for(int i = 0; i<width ;i++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	2b07      	cmp	r3, #7
 8000900:	ddd6      	ble.n	80008b0 <drawChar+0x54>
       }
   }
  display();
 8000902:	f7ff fe9b 	bl	800063c <display>
 8000906:	e000      	b.n	800090a <drawChar+0xae>
    return;
 8000908:	bf00      	nop
}
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	080060e8 	.word	0x080060e8

08000914 <drawChars>:
	}
	display();
}

void drawChars(uint8_t *x, uint8_t *y, char *mess)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
 if(*mess == '\0'){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d032      	beq.n	800098e <drawChars+0x7a>
	 return;
 }
  if (*x + width >= WIDTH)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b77      	cmp	r3, #119	@ 0x77
 800092e:	d915      	bls.n	800095c <drawChars+0x48>
  {
    if ((*y + heigh >= HEIGHT))
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b37      	cmp	r3, #55	@ 0x37
 8000936:	d908      	bls.n	800094a <drawChars+0x36>
    {
      *x = 0;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
      *y = 0;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
      clearDisplay();
 8000944:	f7ff fedc 	bl	8000700 <clearDisplay>
 8000948:	e008      	b.n	800095c <drawChars+0x48>
    }
    else
    {
      *y += heigh;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3308      	adds	r3, #8
 8000950:	b2da      	uxtb	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	701a      	strb	r2, [r3, #0]
      *x = 0;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
    }
  }
  drawChar(*x, *y, *mess);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b218      	sxth	r0, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b219      	sxth	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	f7ff ff75 	bl	800085c <drawChar>
  *x += width;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3308      	adds	r3, #8
 8000978:	b2da      	uxtb	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	701a      	strb	r2, [r3, #0]
  drawChars(x, y, mess+1);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	461a      	mov	r2, r3
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff ffc4 	bl	8000914 <drawChars>
  return;
 800098c:	e000      	b.n	8000990 <drawChars+0x7c>
	 return;
 800098e:	bf00      	nop
}
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <hienthi>:
extern osMessageQueueId_t ScreenQueueHandle;

static int x=0;
static int y = heigh;

static void hienthi(char c){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
//	clearDisplay();
	if(c<32||c>126){
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b1f      	cmp	r3, #31
 80009a6:	d902      	bls.n	80009ae <hienthi+0x16>
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80009ac:	d905      	bls.n	80009ba <hienthi+0x22>
		drawChars(&x,&y,"invalid char");
 80009ae:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <hienthi+0x78>)
 80009b0:	4918      	ldr	r1, [pc, #96]	@ (8000a14 <hienthi+0x7c>)
 80009b2:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <hienthi+0x80>)
 80009b4:	f7ff ffae 	bl	8000914 <drawChars>
		return;
 80009b8:	e026      	b.n	8000a08 <hienthi+0x70>
	}
	drawChar(x,y,c);
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <hienthi+0x80>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <hienthi+0x7c>)
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	b211      	sxth	r1, r2
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff47 	bl	800085c <drawChar>
	if (x + width >= WIDTH)
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <hienthi+0x80>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b77      	cmp	r3, #119	@ 0x77
 80009d4:	dd13      	ble.n	80009fe <hienthi+0x66>
	  {
	    if ((y + heigh >= HEIGHT))
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <hienthi+0x7c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b37      	cmp	r3, #55	@ 0x37
 80009dc:	dd06      	ble.n	80009ec <hienthi+0x54>
	    {
	      x = 0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <hienthi+0x80>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
	      y = heigh;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <hienthi+0x7c>)
 80009e6:	2208      	movs	r2, #8
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	e00d      	b.n	8000a08 <hienthi+0x70>
	    }
	    else
	    {
	      y += heigh;
 80009ec:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <hienthi+0x7c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	3308      	adds	r3, #8
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <hienthi+0x7c>)
 80009f4:	6013      	str	r3, [r2, #0]
	     x = 0;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <hienthi+0x80>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e004      	b.n	8000a08 <hienthi+0x70>
	    }
	  }else{
		   x += width;
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <hienthi+0x80>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3308      	adds	r3, #8
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <hienthi+0x80>)
 8000a06:	6013      	str	r3, [r2, #0]
	  }
}
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	0800600c 	.word	0x0800600c
 8000a14:	20000194 	.word	0x20000194
 8000a18:	200006a0 	.word	0x200006a0

08000a1c <ScreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScreenTask */
void ScreenTask(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ScreenTask */
	char a;
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t res =  osMessageQueueGet(ScreenQueueHandle, &a, 0, 0);
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <ScreenTask+0x30>)
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	f107 010b 	add.w	r1, r7, #11
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f002 fd7a 	bl	8003528 <osMessageQueueGet>
 8000a34:	60f8      	str	r0, [r7, #12]
	  if(res == 0 ){
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d103      	bne.n	8000a44 <ScreenTask+0x28>
		  hienthi(a);
 8000a3c:	7afb      	ldrb	r3, [r7, #11]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffaa 	bl	8000998 <hienthi>
	  }
    osDelay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f002 fc47 	bl	80032d8 <osDelay>
  {
 8000a4a:	e7eb      	b.n	8000a24 <ScreenTask+0x8>
 8000a4c:	20000278 	.word	0x20000278

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_MspInit+0x68>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <HAL_MspInit+0x68>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6193      	str	r3, [r2, #24]
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_MspInit+0x68>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_MspInit+0x68>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a11      	ldr	r2, [pc, #68]	@ (8000ab8 <HAL_MspInit+0x68>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a78:	61d3      	str	r3, [r2, #28]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x68>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	210f      	movs	r1, #15
 8000a8a:	f06f 0001 	mvn.w	r0, #1
 8000a8e:	f000 fa40 	bl	8000f12 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_MspInit+0x6c>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_MspInit+0x6c>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000

08000ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <HAL_I2C_MspInit+0x70>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d123      	bne.n	8000b28 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	23c0      	movs	r3, #192	@ 0xc0
 8000afa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afc:	2312      	movs	r3, #18
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480b      	ldr	r0, [pc, #44]	@ (8000b38 <HAL_I2C_MspInit+0x78>)
 8000b0c:	f000 faea 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	61d3      	str	r3, [r2, #28]
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_I2C_MspInit+0x74>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a20      	ldr	r2, [pc, #128]	@ (8000bd8 <HAL_UART_MspInit+0x9c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d139      	bne.n	8000bd0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <HAL_UART_MspInit+0xa0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a1e      	ldr	r2, [pc, #120]	@ (8000bdc <HAL_UART_MspInit+0xa0>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_UART_MspInit+0xa0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_UART_MspInit+0xa0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <HAL_UART_MspInit+0xa0>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_UART_MspInit+0xa0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	@ (8000be0 <HAL_UART_MspInit+0xa4>)
 8000ba2:	f000 fa9f 	bl	80010e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <HAL_UART_MspInit+0xa4>)
 8000bbc:	f000 fa92 	bl	80010e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	2025      	movs	r0, #37	@ 0x25
 8000bc6:	f000 f9a4 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bca:	2025      	movs	r0, #37	@ 0x25
 8000bcc:	f000 f9bd 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010800 	.word	0x40010800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <NMI_Handler+0x4>

08000bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f886 	bl	8000d2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c20:	f004 f9b4 	bl	8004f8c <xTaskGetSchedulerState>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d001      	beq.n	8000c2e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c2a:	f004 ff1d 	bl	8005a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <USART1_IRQHandler+0x10>)
 8000c3a:	f001 fd2b 	bl	8002694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000021c 	.word	0x2000021c

08000c48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff fff8 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480b      	ldr	r0, [pc, #44]	@ (8000c88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c5a:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a09      	ldr	r2, [pc, #36]	@ (8000c94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c70:	4c09      	ldr	r4, [pc, #36]	@ (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f005 f95d 	bl	8005f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c82:	f7ff fa95 	bl	80001b0 <main>
  bx lr
 8000c86:	4770      	bx	lr
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 8000c90:	0800641c 	.word	0x0800641c
  ldr r2, =_sbss
 8000c94:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000c98:	20001ff0 	.word	0x20001ff0

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_Init+0x28>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_Init+0x28>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f923 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fec8 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f93b 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f903 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	@ (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000198 	.word	0x20000198
 8000d24:	200001a0 	.word	0x200001a0
 8000d28:	2000019c 	.word	0x2000019c

08000d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a03      	ldr	r2, [pc, #12]	@ (8000d4c <HAL_IncTick+0x20>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	200001a0 	.word	0x200001a0
 8000d4c:	200006a4 	.word	0x200006a4

08000d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	@ (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	200006a4 	.word	0x200006a4

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	@ (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e020      	b.n	8000fea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d005      	beq.n	8001018 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2204      	movs	r2, #4
 8001010:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e051      	b.n	80010bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 020e 	bic.w	r2, r2, #14
 8001026:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a22      	ldr	r2, [pc, #136]	@ (80010c8 <HAL_DMA_Abort_IT+0xd4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d029      	beq.n	8001096 <HAL_DMA_Abort_IT+0xa2>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a21      	ldr	r2, [pc, #132]	@ (80010cc <HAL_DMA_Abort_IT+0xd8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d022      	beq.n	8001092 <HAL_DMA_Abort_IT+0x9e>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1f      	ldr	r2, [pc, #124]	@ (80010d0 <HAL_DMA_Abort_IT+0xdc>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01a      	beq.n	800108c <HAL_DMA_Abort_IT+0x98>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1e      	ldr	r2, [pc, #120]	@ (80010d4 <HAL_DMA_Abort_IT+0xe0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d012      	beq.n	8001086 <HAL_DMA_Abort_IT+0x92>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1c      	ldr	r2, [pc, #112]	@ (80010d8 <HAL_DMA_Abort_IT+0xe4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00a      	beq.n	8001080 <HAL_DMA_Abort_IT+0x8c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1b      	ldr	r2, [pc, #108]	@ (80010dc <HAL_DMA_Abort_IT+0xe8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d102      	bne.n	800107a <HAL_DMA_Abort_IT+0x86>
 8001074:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001078:	e00e      	b.n	8001098 <HAL_DMA_Abort_IT+0xa4>
 800107a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800107e:	e00b      	b.n	8001098 <HAL_DMA_Abort_IT+0xa4>
 8001080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001084:	e008      	b.n	8001098 <HAL_DMA_Abort_IT+0xa4>
 8001086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108a:	e005      	b.n	8001098 <HAL_DMA_Abort_IT+0xa4>
 800108c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001090:	e002      	b.n	8001098 <HAL_DMA_Abort_IT+0xa4>
 8001092:	2310      	movs	r3, #16
 8001094:	e000      	b.n	8001098 <HAL_DMA_Abort_IT+0xa4>
 8001096:	2301      	movs	r3, #1
 8001098:	4a11      	ldr	r2, [pc, #68]	@ (80010e0 <HAL_DMA_Abort_IT+0xec>)
 800109a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
    } 
  }
  return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40020008 	.word	0x40020008
 80010cc:	4002001c 	.word	0x4002001c
 80010d0:	40020030 	.word	0x40020030
 80010d4:	40020044 	.word	0x40020044
 80010d8:	40020058 	.word	0x40020058
 80010dc:	4002006c 	.word	0x4002006c
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	@ 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	e169      	b.n	80013cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f8:	2201      	movs	r2, #1
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8158 	bne.w	80013c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a9a      	ldr	r2, [pc, #616]	@ (8001384 <HAL_GPIO_Init+0x2a0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d05e      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001120:	4a98      	ldr	r2, [pc, #608]	@ (8001384 <HAL_GPIO_Init+0x2a0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d875      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001126:	4a98      	ldr	r2, [pc, #608]	@ (8001388 <HAL_GPIO_Init+0x2a4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d058      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 800112c:	4a96      	ldr	r2, [pc, #600]	@ (8001388 <HAL_GPIO_Init+0x2a4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d86f      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001132:	4a96      	ldr	r2, [pc, #600]	@ (800138c <HAL_GPIO_Init+0x2a8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d052      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001138:	4a94      	ldr	r2, [pc, #592]	@ (800138c <HAL_GPIO_Init+0x2a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d869      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800113e:	4a94      	ldr	r2, [pc, #592]	@ (8001390 <HAL_GPIO_Init+0x2ac>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d04c      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001144:	4a92      	ldr	r2, [pc, #584]	@ (8001390 <HAL_GPIO_Init+0x2ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d863      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800114a:	4a92      	ldr	r2, [pc, #584]	@ (8001394 <HAL_GPIO_Init+0x2b0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d046      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001150:	4a90      	ldr	r2, [pc, #576]	@ (8001394 <HAL_GPIO_Init+0x2b0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d85d      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d82a      	bhi.n	80011b0 <HAL_GPIO_Init+0xcc>
 800115a:	2b12      	cmp	r3, #18
 800115c:	d859      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <HAL_GPIO_Init+0x80>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	080011df 	.word	0x080011df
 8001168:	080011b9 	.word	0x080011b9
 800116c:	080011cb 	.word	0x080011cb
 8001170:	0800120d 	.word	0x0800120d
 8001174:	08001213 	.word	0x08001213
 8001178:	08001213 	.word	0x08001213
 800117c:	08001213 	.word	0x08001213
 8001180:	08001213 	.word	0x08001213
 8001184:	08001213 	.word	0x08001213
 8001188:	08001213 	.word	0x08001213
 800118c:	08001213 	.word	0x08001213
 8001190:	08001213 	.word	0x08001213
 8001194:	08001213 	.word	0x08001213
 8001198:	08001213 	.word	0x08001213
 800119c:	08001213 	.word	0x08001213
 80011a0:	08001213 	.word	0x08001213
 80011a4:	08001213 	.word	0x08001213
 80011a8:	080011c1 	.word	0x080011c1
 80011ac:	080011d5 	.word	0x080011d5
 80011b0:	4a79      	ldr	r2, [pc, #484]	@ (8001398 <HAL_GPIO_Init+0x2b4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b6:	e02c      	b.n	8001212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e029      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e024      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	3308      	adds	r3, #8
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e01f      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	330c      	adds	r3, #12
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e01a      	b.n	8001214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e6:	2304      	movs	r3, #4
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e013      	b.n	8001214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	611a      	str	r2, [r3, #16]
          break;
 80011fe:	e009      	b.n	8001214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001200:	2308      	movs	r3, #8
 8001202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	615a      	str	r2, [r3, #20]
          break;
 800120a:	e003      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x130>
          break;
 8001212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2bff      	cmp	r3, #255	@ 0xff
 8001218:	d801      	bhi.n	800121e <HAL_GPIO_Init+0x13a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_Init+0x13e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	@ 0xff
 8001228:	d802      	bhi.n	8001230 <HAL_GPIO_Init+0x14c>
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x152>
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	3b08      	subs	r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	210f      	movs	r1, #15
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	431a      	orrs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80b1 	beq.w	80013c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a4c      	ldr	r2, [pc, #304]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b4a      	ldr	r3, [pc, #296]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800127c:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_GPIO_Init+0x2bc>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a40      	ldr	r2, [pc, #256]	@ (80013a4 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1ec>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a3f      	ldr	r2, [pc, #252]	@ (80013a8 <HAL_GPIO_Init+0x2c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1e8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ac <HAL_GPIO_Init+0x2c8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	@ (80013b0 <HAL_GPIO_Init+0x2cc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e0>
 80012c0:	2303      	movs	r3, #3
 80012c2:	e006      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c4:	2304      	movs	r3, #4
 80012c6:	e004      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012d0:	2300      	movs	r3, #0
 80012d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012e2:	492f      	ldr	r1, [pc, #188]	@ (80013a0 <HAL_GPIO_Init+0x2bc>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	492c      	ldr	r1, [pc, #176]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4928      	ldr	r1, [pc, #160]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4922      	ldr	r1, [pc, #136]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	491e      	ldr	r1, [pc, #120]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4918      	ldr	r1, [pc, #96]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4914      	ldr	r1, [pc, #80]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d021      	beq.n	80013b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	490e      	ldr	r1, [pc, #56]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_Init+0x2e2>
 8001382:	bf00      	nop
 8001384:	10320000 	.word	0x10320000
 8001388:	10310000 	.word	0x10310000
 800138c:	10220000 	.word	0x10220000
 8001390:	10210000 	.word	0x10210000
 8001394:	10120000 	.word	0x10120000
 8001398:	10110000 	.word	0x10110000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	4909      	ldr	r1, [pc, #36]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	3301      	adds	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae8e 	bne.w	80010f8 <HAL_GPIO_Init+0x14>
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	372c      	adds	r7, #44	@ 0x2c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43d9      	mvns	r1, r3
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	400b      	ands	r3, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
	...

08001450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e12b      	b.n	80016ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fb22 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2224      	movs	r2, #36	@ 0x24
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0201 	bic.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b4:	f001 f832 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a81      	ldr	r2, [pc, #516]	@ (80016c4 <HAL_I2C_Init+0x274>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d807      	bhi.n	80014d4 <HAL_I2C_Init+0x84>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a80      	ldr	r2, [pc, #512]	@ (80016c8 <HAL_I2C_Init+0x278>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf94      	ite	ls
 80014cc:	2301      	movls	r3, #1
 80014ce:	2300      	movhi	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e006      	b.n	80014e2 <HAL_I2C_Init+0x92>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a7d      	ldr	r2, [pc, #500]	@ (80016cc <HAL_I2C_Init+0x27c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	bf94      	ite	ls
 80014dc:	2301      	movls	r3, #1
 80014de:	2300      	movhi	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0e7      	b.n	80016ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4a78      	ldr	r2, [pc, #480]	@ (80016d0 <HAL_I2C_Init+0x280>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	430a      	orrs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a6a      	ldr	r2, [pc, #424]	@ (80016c4 <HAL_I2C_Init+0x274>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d802      	bhi.n	8001524 <HAL_I2C_Init+0xd4>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	e009      	b.n	8001538 <HAL_I2C_Init+0xe8>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	4a69      	ldr	r2, [pc, #420]	@ (80016d4 <HAL_I2C_Init+0x284>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	3301      	adds	r3, #1
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800154a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	495c      	ldr	r1, [pc, #368]	@ (80016c4 <HAL_I2C_Init+0x274>)
 8001554:	428b      	cmp	r3, r1
 8001556:	d819      	bhi.n	800158c <HAL_I2C_Init+0x13c>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e59      	subs	r1, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fbb1 f3f3 	udiv	r3, r1, r3
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800156c:	400b      	ands	r3, r1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_I2C_Init+0x138>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1e59      	subs	r1, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001580:	3301      	adds	r3, #1
 8001582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001586:	e051      	b.n	800162c <HAL_I2C_Init+0x1dc>
 8001588:	2304      	movs	r3, #4
 800158a:	e04f      	b.n	800162c <HAL_I2C_Init+0x1dc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d111      	bne.n	80015b8 <HAL_I2C_Init+0x168>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	440b      	add	r3, r1
 80015a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e012      	b.n	80015de <HAL_I2C_Init+0x18e>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	0099      	lsls	r1, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x196>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e022      	b.n	800162c <HAL_I2C_Init+0x1dc>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10e      	bne.n	800160c <HAL_I2C_Init+0x1bc>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001600:	3301      	adds	r3, #1
 8001602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800160a:	e00f      	b.n	800162c <HAL_I2C_Init+0x1dc>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	0099      	lsls	r1, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	6809      	ldr	r1, [r1, #0]
 8001630:	4313      	orrs	r3, r2
 8001632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800165a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6911      	ldr	r1, [r2, #16]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68d2      	ldr	r2, [r2, #12]
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	000186a0 	.word	0x000186a0
 80016c8:	001e847f 	.word	0x001e847f
 80016cc:	003d08ff 	.word	0x003d08ff
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	10624dd3 	.word	0x10624dd3

080016d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	460b      	mov	r3, r1
 80016e6:	817b      	strh	r3, [r7, #10]
 80016e8:	4613      	mov	r3, r2
 80016ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fb30 	bl	8000d50 <HAL_GetTick>
 80016f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	f040 80e0 	bne.w	80018c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2319      	movs	r3, #25
 8001706:	2201      	movs	r2, #1
 8001708:	4970      	ldr	r1, [pc, #448]	@ (80018cc <HAL_I2C_Master_Transmit+0x1f4>)
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f964 	bl	80019d8 <I2C_WaitOnFlagUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001716:	2302      	movs	r3, #2
 8001718:	e0d3      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_I2C_Master_Transmit+0x50>
 8001724:	2302      	movs	r3, #2
 8001726:	e0cc      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d007      	beq.n	800174e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800175c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2221      	movs	r2, #33	@ 0x21
 8001762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2210      	movs	r2, #16
 800176a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	893a      	ldrh	r2, [r7, #8]
 800177e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a50      	ldr	r2, [pc, #320]	@ (80018d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001790:	8979      	ldrh	r1, [r7, #10]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6a3a      	ldr	r2, [r7, #32]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f89c 	bl	80018d4 <I2C_MasterRequestWrite>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e08d      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017bc:	e066      	b.n	800188c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	6a39      	ldr	r1, [r7, #32]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa22 	bl	8001c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d107      	bne.n	80017e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06b      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b04      	cmp	r3, #4
 8001826:	d11b      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x188>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	d017      	beq.n	8001860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001858:	3b01      	subs	r3, #1
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	6a39      	ldr	r1, [r7, #32]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fa19 	bl	8001c9c <I2C_WaitOnBTFFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00d      	beq.n	800188c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	2b04      	cmp	r3, #4
 8001876:	d107      	bne.n	8001888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e01a      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001890:	2b00      	cmp	r3, #0
 8001892:	d194      	bne.n	80017be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2220      	movs	r2, #32
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	00100002 	.word	0x00100002
 80018d0:	ffff0000 	.word	0xffff0000

080018d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	460b      	mov	r3, r1
 80018e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d006      	beq.n	80018fe <I2C_MasterRequestWrite+0x2a>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d003      	beq.n	80018fe <I2C_MasterRequestWrite+0x2a>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018fc:	d108      	bne.n	8001910 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e00b      	b.n	8001928 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	2b12      	cmp	r3, #18
 8001916:	d107      	bne.n	8001928 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f84f 	bl	80019d8 <I2C_WaitOnFlagUntilTimeout>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800194e:	d103      	bne.n	8001958 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e035      	b.n	80019c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001964:	d108      	bne.n	8001978 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001966:	897b      	ldrh	r3, [r7, #10]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	e01b      	b.n	80019b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001978:	897b      	ldrh	r3, [r7, #10]
 800197a:	11db      	asrs	r3, r3, #7
 800197c:	b2db      	uxtb	r3, r3
 800197e:	f003 0306 	and.w	r3, r3, #6
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f063 030f 	orn	r3, r3, #15
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	490e      	ldr	r1, [pc, #56]	@ (80019d0 <I2C_MasterRequestWrite+0xfc>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f898 	bl	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e010      	b.n	80019c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <I2C_MasterRequestWrite+0x100>)
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f888 	bl	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	00010008 	.word	0x00010008
 80019d4:	00010002 	.word	0x00010002

080019d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019e8:	e048      	b.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d044      	beq.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f2:	f7ff f9ad 	bl	8000d50 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d302      	bcc.n	8001a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d139      	bne.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0c1b      	lsrs	r3, r3, #16
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10d      	bne.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	e00c      	b.n	8001a48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	43da      	mvns	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d116      	bne.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e023      	b.n	8001ac4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10d      	bne.n	8001aa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4013      	ands	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	e00c      	b.n	8001abc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4013      	ands	r3, r2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d093      	beq.n	80019ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ada:	e071      	b.n	8001bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aea:	d123      	bne.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001afa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e067      	b.n	8001c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d041      	beq.n	8001bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3c:	f7ff f908 	bl	8000d50 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d136      	bne.n	8001bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d10c      	bne.n	8001b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4013      	ands	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	e00b      	b.n	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4013      	ands	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f043 0220 	orr.w	r2, r3, #32
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e021      	b.n	8001c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10c      	bne.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e00b      	b.n	8001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bf14      	ite	ne
 8001bf6:	2301      	movne	r3, #1
 8001bf8:	2300      	moveq	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f af6d 	bne.w	8001adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c18:	e034      	b.n	8001c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f886 	bl	8001d2c <I2C_IsAcknowledgeFailed>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e034      	b.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d028      	beq.n	8001c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c32:	f7ff f88d 	bl	8000d50 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d302      	bcc.n	8001c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11d      	bne.n	8001c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c52:	2b80      	cmp	r3, #128	@ 0x80
 8001c54:	d016      	beq.n	8001c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f043 0220 	orr.w	r2, r3, #32
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e007      	b.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8e:	2b80      	cmp	r3, #128	@ 0x80
 8001c90:	d1c3      	bne.n	8001c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ca8:	e034      	b.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f83e 	bl	8001d2c <I2C_IsAcknowledgeFailed>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e034      	b.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d028      	beq.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7ff f845 	bl	8000d50 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11d      	bne.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d016      	beq.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e007      	b.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d1c3      	bne.n	8001caa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d42:	d11b      	bne.n	8001d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e272      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b92      	ldr	r3, [pc, #584]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b89      	ldr	r3, [pc, #548]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e24c      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x76>
 8001df0:	4b80      	ldr	r3, [pc, #512]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b78      	ldr	r3, [pc, #480]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xbc>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e44:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b68      	ldr	r3, [pc, #416]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a67      	ldr	r2, [pc, #412]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff74 	bl	8000d50 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7fe ff70 	bl	8000d50 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e200      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe4>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff60 	bl	8000d50 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff5c 	bl	8000d50 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ec      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x10c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ece:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001eda:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1c0      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4939      	ldr	r1, [pc, #228]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe ff15 	bl	8000d50 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7fe ff11 	bl	8000d50 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1a1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4927      	ldr	r1, [pc, #156]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe fef4 	bl	8000d50 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7fe fef0 	bl	8000d50 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e180      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03a      	beq.n	800200c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7fe fed4 	bl	8000d50 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe fed0 	bl	8000d50 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e160      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 face 	bl	800256c <RCC_Delay>
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe feba 	bl	8000d50 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe feb6 	bl	8000d50 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e146      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	42420000 	.word	0x42420000
 8001ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b92      	ldr	r3, [pc, #584]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e9      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a6 	beq.w	8002166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b8b      	ldr	r3, [pc, #556]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b88      	ldr	r3, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a87      	ldr	r2, [pc, #540]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b7f      	ldr	r3, [pc, #508]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7e      	ldr	r2, [pc, #504]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7fe fe77 	bl	8000d50 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7fe fe73 	bl	8000d50 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	@ 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e103      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x312>
 800208c:	4b6f      	ldr	r3, [pc, #444]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e02d      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020a2:	4b6a      	ldr	r3, [pc, #424]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a69      	ldr	r2, [pc, #420]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b67      	ldr	r3, [pc, #412]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a66      	ldr	r2, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x356>
 80020c4:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a60      	ldr	r2, [pc, #384]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020de:	4b5b      	ldr	r3, [pc, #364]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b58      	ldr	r3, [pc, #352]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a57      	ldr	r2, [pc, #348]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7fe fe27 	bl	8000d50 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fe23 	bl	8000d50 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0b1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b4b      	ldr	r3, [pc, #300]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x37e>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7fe fe11 	bl	8000d50 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe fe0d 	bl	8000d50 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e09b      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b40      	ldr	r3, [pc, #256]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a3b      	ldr	r2, [pc, #236]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b36      	ldr	r3, [pc, #216]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d061      	beq.n	8002240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d146      	bne.n	8002212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe fde1 	bl	8000d50 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe fddd 	bl	8000d50 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e06d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ba:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4921      	ldr	r1, [pc, #132]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	430b      	orrs	r3, r1
 80021de:	491b      	ldr	r1, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fdb1 	bl	8000d50 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fdad 	bl	8000d50 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46a>
 8002210:	e035      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fd9a 	bl	8000d50 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fd96 	bl	8000d50 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e026      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x498>
 800223e:	e01e      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e019      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_OscConfig+0x500>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b6a      	ldr	r3, [pc, #424]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b67      	ldr	r3, [pc, #412]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4965      	ldr	r1, [pc, #404]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800230a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e073      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4936      	ldr	r1, [pc, #216]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fce8 	bl	8000d50 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fce4 	bl	8000d50 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4922      	ldr	r1, [pc, #136]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <HAL_RCC_ClockConfig+0x1cc>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fc46 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	080063e8 	.word	0x080063e8
 8002458:	20000198 	.word	0x20000198
 800245c:	2000019c 	.word	0x2000019c

08002460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x30>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x36>
 800248e:	e027      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e027      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0c5b      	lsrs	r3, r3, #17
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e004      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08006400 	.word	0x08006400
 8002500:	08006410 	.word	0x08006410
 8002504:	003d0900 	.word	0x003d0900

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	@ (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000198 	.word	0x20000198

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	@ (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	080063f8 	.word	0x080063f8

08002544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002548:	f7ff ffde 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0adb      	lsrs	r3, r3, #11
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	@ (8002568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	080063f8 	.word	0x080063f8

0800256c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <RCC_Delay+0x34>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <RCC_Delay+0x38>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002588:	bf00      	nop
  }
  while (Delay --);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	60fa      	str	r2, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f9      	bne.n	8002588 <RCC_Delay+0x1c>
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000198 	.word	0x20000198
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e042      	b.n	8002640 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fab4 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	@ 0x24
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fcd5 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b20      	cmp	r3, #32
 8002660:	d112      	bne.n	8002688 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_UART_Receive_IT+0x26>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00b      	b.n	800268a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	461a      	mov	r2, r3
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fab7 	bl	8002bf2 <UART_Start_Receive_IT>
 8002684:	4603      	mov	r3, r0
 8002686:	e000      	b.n	800268a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
  }
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b0ba      	sub	sp, #232	@ 0xe8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80026d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_UART_IRQHandler+0x66>
 80026e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fb93 	bl	8002e1e <UART_Receive_IT>
      return;
 80026f8:	e25b      	b.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80de 	beq.w	80028c0 <HAL_UART_IRQHandler+0x22c>
 8002704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002714:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80d1 	beq.w	80028c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_UART_IRQHandler+0xae>
 800272a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_UART_IRQHandler+0xd2>
 800274e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	f043 0202 	orr.w	r2, r3, #2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_UART_IRQHandler+0xf6>
 8002772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f043 0204 	orr.w	r2, r3, #4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d011      	beq.n	80027ba <HAL_UART_IRQHandler+0x126>
 8002796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f043 0208 	orr.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 81f2 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_UART_IRQHandler+0x14e>
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fb1e 	bl	8002e1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d103      	bne.n	800280e <HAL_UART_IRQHandler+0x17a>
 8002806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d04f      	beq.n	80028ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa28 	bl	8002c64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d041      	beq.n	80028a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800283c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800284e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800285a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1d9      	bne.n	8002822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a74 <HAL_UART_IRQHandler+0x3e0>)
 800287c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fbb6 	bl	8000ff4 <HAL_DMA_Abort_IT>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002898:	4610      	mov	r0, r2
 800289a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800289c:	e00e      	b.n	80028bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f993 	bl	8002bca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a4:	e00a      	b.n	80028bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f98f 	bl	8002bca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	e006      	b.n	80028bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f98b 	bl	8002bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028ba:	e175      	b.n	8002ba8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	bf00      	nop
    return;
 80028be:	e173      	b.n	8002ba8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f040 814f 	bne.w	8002b68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8148 	beq.w	8002b68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8141 	beq.w	8002b68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80b6 	beq.w	8002a78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 8145 	beq.w	8002bac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800292a:	429a      	cmp	r2, r3
 800292c:	f080 813e 	bcs.w	8002bac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002936:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b20      	cmp	r3, #32
 8002940:	f000 8088 	beq.w	8002a54 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800295a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800295e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002962:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002970:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800297c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1d9      	bne.n	8002944 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029b4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029c0:	e841 2300 	strex	r3, r2, [r1]
 80029c4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e1      	bne.n	8002990 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3314      	adds	r3, #20
 80029d2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3314      	adds	r3, #20
 80029ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029f0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029f8:	e841 2300 	strex	r3, r2, [r1]
 80029fc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e3      	bne.n	80029cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	330c      	adds	r3, #12
 8002a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a1c:	e853 3f00 	ldrex	r3, [r3]
 8002a20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a24:	f023 0310 	bic.w	r3, r3, #16
 8002a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a36:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a38:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e3      	bne.n	8002a12 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fa95 	bl	8000f7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8b6 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a70:	e09c      	b.n	8002bac <HAL_UART_IRQHandler+0x518>
 8002a72:	bf00      	nop
 8002a74:	08002d29 	.word	0x08002d29
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 808e 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8089 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ac2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ac4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aca:	e841 2300 	strex	r3, r2, [r1]
 8002ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1e3      	bne.n	8002a9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3314      	adds	r3, #20
 8002af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002afa:	633a      	str	r2, [r7, #48]	@ 0x30
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e3      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330c      	adds	r3, #12
 8002b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0310 	bic.w	r3, r3, #16
 8002b32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b40:	61fa      	str	r2, [r7, #28]
 8002b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e3      	bne.n	8002b1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f83b 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b66:	e023      	b.n	8002bb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_UART_IRQHandler+0x4f4>
 8002b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f8e5 	bl	8002d50 <UART_Transmit_IT>
    return;
 8002b86:	e014      	b.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00e      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f924 	bl	8002dee <UART_EndTransmit_IT>
    return;
 8002ba6:	e004      	b.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002ba8:	bf00      	nop
 8002baa:	e002      	b.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bac:	bf00      	nop
 8002bae:	e000      	b.n	8002bb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002bb0:	bf00      	nop
  }
}
 8002bb2:	37e8      	adds	r7, #232	@ 0xe8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2222      	movs	r2, #34	@ 0x22
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b095      	sub	sp, #84	@ 0x54
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e5      	bne.n	8002ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d119      	bne.n	8002d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cfc:	61ba      	str	r2, [r7, #24]
 8002cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	613b      	str	r3, [r7, #16]
   return(result);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e5      	bne.n	8002cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d1e:	bf00      	nop
 8002d20:	3754      	adds	r7, #84	@ 0x54
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff41 	bl	8002bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b21      	cmp	r3, #33	@ 0x21
 8002d62:	d13e      	bne.n	8002de2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d6c:	d114      	bne.n	8002d98 <UART_Transmit_IT+0x48>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d110      	bne.n	8002d98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]
 8002d96:	e008      	b.n	8002daa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	1c59      	adds	r1, r3, #1
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6211      	str	r1, [r2, #32]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4619      	mov	r1, r3
 8002db8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ddc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e000      	b.n	8002de4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002de2:	2302      	movs	r3, #2
  }
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fed2 	bl	8002bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08c      	sub	sp, #48	@ 0x30
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b22      	cmp	r3, #34	@ 0x22
 8002e30:	f040 80ae 	bne.w	8002f90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e3c:	d117      	bne.n	8002e6e <UART_Receive_IT+0x50>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	1c9a      	adds	r2, r3, #2
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e6c:	e026      	b.n	8002ebc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e80:	d007      	beq.n	8002e92 <UART_Receive_IT+0x74>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <UART_Receive_IT+0x82>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e008      	b.n	8002eb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d15d      	bne.n	8002f8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0220 	bic.w	r2, r2, #32
 8002ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d135      	bne.n	8002f82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 0310 	bic.w	r3, r3, #16
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f3c:	623a      	str	r2, [r7, #32]
 8002f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	69f9      	ldr	r1, [r7, #28]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e5      	bne.n	8002f1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d10a      	bne.n	8002f74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fe2e 	bl	8002bdc <HAL_UARTEx_RxEventCallback>
 8002f80:	e002      	b.n	8002f88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fd f8ec 	bl	8000160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e002      	b.n	8002f92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3730      	adds	r7, #48	@ 0x30
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002fd6:	f023 030c 	bic.w	r3, r3, #12
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80030b0 <UART_SetConfig+0x114>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7ff fa9e 	bl	8002544 <HAL_RCC_GetPCLK2Freq>
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	e002      	b.n	8003012 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800300c:	f7ff fa86 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <UART_SetConfig+0x118>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	0119      	lsls	r1, r3, #4
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fbb2 f2f3 	udiv	r2, r2, r3
 8003048:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <UART_SetConfig+0x118>)
 800304a:	fba3 0302 	umull	r0, r3, r3, r2
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2064      	movs	r0, #100	@ 0x64
 8003052:	fb00 f303 	mul.w	r3, r0, r3
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	3332      	adds	r3, #50	@ 0x32
 800305c:	4a15      	ldr	r2, [pc, #84]	@ (80030b4 <UART_SetConfig+0x118>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003068:	4419      	add	r1, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	441a      	add	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <UART_SetConfig+0x118>)
 8003082:	fba3 0302 	umull	r0, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2064      	movs	r0, #100	@ 0x64
 800308a:	fb00 f303 	mul.w	r3, r0, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	3332      	adds	r3, #50	@ 0x32
 8003094:	4a07      	ldr	r2, [pc, #28]	@ (80030b4 <UART_SetConfig+0x118>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	440a      	add	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40013800 	.word	0x40013800
 80030b4:	51eb851f 	.word	0x51eb851f

080030b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030be:	f3ef 8305 	mrs	r3, IPSR
 80030c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ca:	f3ef 8310 	mrs	r3, PRIMASK
 80030ce:	607b      	str	r3, [r7, #4]
  return(result);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <osKernelInitialize+0x32>
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <osKernelInitialize+0x60>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d109      	bne.n	80030f2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030de:	f3ef 8311 	mrs	r3, BASEPRI
 80030e2:	603b      	str	r3, [r7, #0]
  return(result);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030ea:	f06f 0305 	mvn.w	r3, #5
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e00c      	b.n	800310c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <osKernelInitialize+0x60>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <osKernelInitialize+0x60>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e002      	b.n	800310c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800310c:	68fb      	ldr	r3, [r7, #12]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	200006a8 	.word	0x200006a8

0800311c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003122:	f3ef 8305 	mrs	r3, IPSR
 8003126:	60bb      	str	r3, [r7, #8]
  return(result);
 8003128:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	607b      	str	r3, [r7, #4]
  return(result);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <osKernelStart+0x32>
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <osKernelStart+0x64>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d109      	bne.n	8003156 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003142:	f3ef 8311 	mrs	r3, BASEPRI
 8003146:	603b      	str	r3, [r7, #0]
  return(result);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <osKernelStart+0x3a>
    stat = osErrorISR;
 800314e:	f06f 0305 	mvn.w	r3, #5
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e00e      	b.n	8003174 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <osKernelStart+0x64>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <osKernelStart+0x64>)
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003164:	f001 fabc 	bl	80046e0 <vTaskStartScheduler>
      stat = osOK;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e002      	b.n	8003174 <osKernelStart+0x58>
    } else {
      stat = osError;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003174:	68fb      	ldr	r3, [r7, #12]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200006a8 	.word	0x200006a8

08003184 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b092      	sub	sp, #72	@ 0x48
 8003188:	af04      	add	r7, sp, #16
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003194:	f3ef 8305 	mrs	r3, IPSR
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 8094 	bne.w	80032ca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a2:	f3ef 8310 	mrs	r3, PRIMASK
 80031a6:	623b      	str	r3, [r7, #32]
  return(result);
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 808d 	bne.w	80032ca <osThreadNew+0x146>
 80031b0:	4b48      	ldr	r3, [pc, #288]	@ (80032d4 <osThreadNew+0x150>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d106      	bne.n	80031c6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031b8:	f3ef 8311 	mrs	r3, BASEPRI
 80031bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8082 	bne.w	80032ca <osThreadNew+0x146>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d07e      	beq.n	80032ca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80031d0:	2318      	movs	r3, #24
 80031d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80031d4:	2300      	movs	r3, #0
 80031d6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80031d8:	f107 031b 	add.w	r3, r7, #27
 80031dc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d045      	beq.n	8003276 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <osThreadNew+0x74>
        name = attr->name;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <osThreadNew+0x9a>
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	2b38      	cmp	r3, #56	@ 0x38
 8003210:	d805      	bhi.n	800321e <osThreadNew+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <osThreadNew+0x9e>
        return (NULL);
 800321e:	2300      	movs	r3, #0
 8003220:	e054      	b.n	80032cc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00e      	beq.n	8003258 <osThreadNew+0xd4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003240:	d90a      	bls.n	8003258 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <osThreadNew+0xd4>
        mem = 1;
 8003252:	2301      	movs	r3, #1
 8003254:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003256:	e010      	b.n	800327a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <osThreadNew+0xf6>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d108      	bne.n	800327a <osThreadNew+0xf6>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d104      	bne.n	800327a <osThreadNew+0xf6>
          mem = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003274:	e001      	b.n	800327a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800327a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327c:	2b01      	cmp	r3, #1
 800327e:	d110      	bne.n	80032a2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003288:	9202      	str	r2, [sp, #8]
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003294:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f001 f850 	bl	800433c <xTaskCreateStatic>
 800329c:	4603      	mov	r3, r0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e013      	b.n	80032ca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80032a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d110      	bne.n	80032ca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f001 f89d 	bl	80043fa <xTaskCreate>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <osThreadNew+0x146>
          hTask = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032ca:	697b      	ldr	r3, [r7, #20]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3738      	adds	r7, #56	@ 0x38
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200006a8 	.word	0x200006a8

080032d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032e0:	f3ef 8305 	mrs	r3, IPSR
 80032e4:	613b      	str	r3, [r7, #16]
  return(result);
 80032e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ec:	f3ef 8310 	mrs	r3, PRIMASK
 80032f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <osDelay+0x34>
 80032f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <osDelay+0x58>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d109      	bne.n	8003314 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003300:	f3ef 8311 	mrs	r3, BASEPRI
 8003304:	60bb      	str	r3, [r7, #8]
  return(result);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <osDelay+0x3c>
    stat = osErrorISR;
 800330c:	f06f 0305 	mvn.w	r3, #5
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e007      	b.n	8003324 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <osDelay+0x4c>
      vTaskDelay(ticks);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 f9a8 	bl	8004674 <vTaskDelay>
    }
  }

  return (stat);
 8003324:	697b      	ldr	r3, [r7, #20]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200006a8 	.word	0x200006a8

08003334 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	@ 0x30
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003344:	f3ef 8305 	mrs	r3, IPSR
 8003348:	61bb      	str	r3, [r7, #24]
  return(result);
 800334a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800334c:	2b00      	cmp	r3, #0
 800334e:	d16f      	bne.n	8003430 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003350:	f3ef 8310 	mrs	r3, PRIMASK
 8003354:	617b      	str	r3, [r7, #20]
  return(result);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d169      	bne.n	8003430 <osMessageQueueNew+0xfc>
 800335c:	4b37      	ldr	r3, [pc, #220]	@ (800343c <osMessageQueueNew+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d105      	bne.n	8003370 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003364:	f3ef 8311 	mrs	r3, BASEPRI
 8003368:	613b      	str	r3, [r7, #16]
  return(result);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d15f      	bne.n	8003430 <osMessageQueueNew+0xfc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d05c      	beq.n	8003430 <osMessageQueueNew+0xfc>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d059      	beq.n	8003430 <osMessageQueueNew+0xfc>
    mem = -1;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
 8003380:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d029      	beq.n	80033dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <osMessageQueueNew+0x82>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b4f      	cmp	r3, #79	@ 0x4f
 8003396:	d90e      	bls.n	80033b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <osMessageQueueNew+0x82>
        mem = 1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	e014      	b.n	80033e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d110      	bne.n	80033e0 <osMessageQueueNew+0xac>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <osMessageQueueNew+0xac>
          mem = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	e001      	b.n	80033e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d10b      	bne.n	80033fe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2100      	movs	r1, #0
 80033f0:	9100      	str	r1, [sp, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fa55 	bl	80038a4 <xQueueGenericCreateStatic>
 80033fa:	6278      	str	r0, [r7, #36]	@ 0x24
 80033fc:	e008      	b.n	8003410 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003404:	2200      	movs	r2, #0
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fac7 	bl	800399c <xQueueGenericCreate>
 800340e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <osMessageQueueNew+0xf0>
        name = attr->name;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e001      	b.n	8003428 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003428:	69f9      	ldr	r1, [r7, #28]
 800342a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800342c:	f000 ff2a 	bl	8004284 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003432:	4618      	mov	r0, r3
 8003434:	3728      	adds	r7, #40	@ 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	200006a8 	.word	0x200006a8

08003440 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	@ 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003458:	f3ef 8305 	mrs	r3, IPSR
 800345c:	61fb      	str	r3, [r7, #28]
  return(result);
 800345e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10f      	bne.n	8003484 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	61bb      	str	r3, [r7, #24]
  return(result);
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <osMessageQueuePut+0x44>
 8003470:	4b2b      	ldr	r3, [pc, #172]	@ (8003520 <osMessageQueuePut+0xe0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d12e      	bne.n	80034d6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003478:	f3ef 8311 	mrs	r3, BASEPRI
 800347c:	617b      	str	r3, [r7, #20]
  return(result);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d028      	beq.n	80034d6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <osMessageQueuePut+0x56>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <osMessageQueuePut+0x56>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003496:	f06f 0303 	mvn.w	r3, #3
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800349c:	e039      	b.n	8003512 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80034a2:	f107 0210 	add.w	r2, r7, #16
 80034a6:	2300      	movs	r3, #0
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	6a38      	ldr	r0, [r7, #32]
 80034ac:	f000 fbda 	bl	8003c64 <xQueueGenericSendFromISR>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d003      	beq.n	80034be <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80034b6:	f06f 0302 	mvn.w	r3, #2
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034bc:	e029      	b.n	8003512 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d026      	beq.n	8003512 <osMessageQueuePut+0xd2>
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <osMessageQueuePut+0xe4>)
 80034c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80034d4:	e01d      	b.n	8003512 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <osMessageQueuePut+0xa2>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80034e2:	f06f 0303 	mvn.w	r3, #3
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e8:	e014      	b.n	8003514 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80034ea:	2300      	movs	r3, #0
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	6a38      	ldr	r0, [r7, #32]
 80034f2:	f000 fab5 	bl	8003a60 <xQueueGenericSend>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d00b      	beq.n	8003514 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003502:	f06f 0301 	mvn.w	r3, #1
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
 8003508:	e004      	b.n	8003514 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800350a:	f06f 0302 	mvn.w	r3, #2
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003510:	e000      	b.n	8003514 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003512:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003516:	4618      	mov	r0, r3
 8003518:	3728      	adds	r7, #40	@ 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200006a8 	.word	0x200006a8
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800353e:	f3ef 8305 	mrs	r3, IPSR
 8003542:	61fb      	str	r3, [r7, #28]
  return(result);
 8003544:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10f      	bne.n	800356a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <osMessageQueueGet+0x42>
 8003556:	4b2b      	ldr	r3, [pc, #172]	@ (8003604 <osMessageQueueGet+0xdc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d12e      	bne.n	80035bc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800355e:	f3ef 8311 	mrs	r3, BASEPRI
 8003562:	617b      	str	r3, [r7, #20]
  return(result);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d028      	beq.n	80035bc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <osMessageQueueGet+0x54>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <osMessageQueueGet+0x54>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800357c:	f06f 0303 	mvn.w	r3, #3
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003582:	e038      	b.n	80035f6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	461a      	mov	r2, r3
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	6a38      	ldr	r0, [r7, #32]
 8003592:	f000 fce5 	bl	8003f60 <xQueueReceiveFromISR>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d003      	beq.n	80035a4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800359c:	f06f 0302 	mvn.w	r3, #2
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035a2:	e028      	b.n	80035f6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d025      	beq.n	80035f6 <osMessageQueueGet+0xce>
 80035aa:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <osMessageQueueGet+0xe0>)
 80035ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035ba:	e01c      	b.n	80035f6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <osMessageQueueGet+0xa0>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80035c8:	f06f 0303 	mvn.w	r3, #3
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ce:	e013      	b.n	80035f8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	6a38      	ldr	r0, [r7, #32]
 80035d6:	f000 fbe1 	bl	8003d9c <xQueueReceive>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d00b      	beq.n	80035f8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80035e6:	f06f 0301 	mvn.w	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ec:	e004      	b.n	80035f8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80035ee:	f06f 0302 	mvn.w	r3, #2
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f4:	e000      	b.n	80035f8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	@ 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	200006a8 	.word	0x200006a8
 8003608:	e000ed04 	.word	0xe000ed04

0800360c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a06      	ldr	r2, [pc, #24]	@ (8003634 <vApplicationGetIdleTaskMemory+0x28>)
 800361c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <vApplicationGetIdleTaskMemory+0x2c>)
 8003622:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	200006ac 	.word	0x200006ac
 8003638:	20000708 	.word	0x20000708

0800363c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <vApplicationGetTimerTaskMemory+0x2c>)
 800364c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4a06      	ldr	r2, [pc, #24]	@ (800366c <vApplicationGetTimerTaskMemory+0x30>)
 8003652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800365a:	601a      	str	r2, [r3, #0]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000908 	.word	0x20000908
 800366c:	20000964 	.word	0x20000964

08003670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f103 0208 	add.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f103 0208 	add.w	r2, r3, #8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f103 0208 	add.w	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	601a      	str	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d103      	bne.n	800372c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e00c      	b.n	8003746 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3308      	adds	r3, #8
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e002      	b.n	800373a <vListInsert+0x2e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d2f6      	bcs.n	8003734 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d103      	bne.n	80037b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr
	...

080037d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037fc:	f002 f8b6 	bl	800596c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	441a      	add	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	3b01      	subs	r3, #1
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	22ff      	movs	r2, #255	@ 0xff
 8003848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d114      	bne.n	800387c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01a      	beq.n	8003890 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3310      	adds	r3, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f9d0 	bl	8004c04 <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <xQueueGenericReset+0xd0>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	e009      	b.n	8003890 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fef5 	bl	8003670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3324      	adds	r3, #36	@ 0x24
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fef0 	bl	8003670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003890:	f002 f89c 	bl	80059cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	@ 0x38
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10b      	bne.n	80038d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	e7fd      	b.n	80038cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	e7fd      	b.n	80038ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <xQueueGenericCreateStatic+0x56>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <xQueueGenericCreateStatic+0x5a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <xQueueGenericCreateStatic+0x5c>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	623b      	str	r3, [r7, #32]
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <xQueueGenericCreateStatic+0x84>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <xQueueGenericCreateStatic+0x88>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <xQueueGenericCreateStatic+0x8a>
 800392c:	2300      	movs	r3, #0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10b      	bne.n	800394a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	61fb      	str	r3, [r7, #28]
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	e7fd      	b.n	8003946 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800394a:	2350      	movs	r3, #80	@ 0x50
 800394c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b50      	cmp	r3, #80	@ 0x50
 8003952:	d00b      	beq.n	800396c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	61bb      	str	r3, [r7, #24]
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	e7fd      	b.n	8003968 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800397e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f844 	bl	8003a1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003994:	4618      	mov	r0, r3
 8003996:	3730      	adds	r7, #48	@ 0x30
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10b      	bne.n	80039c8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	613b      	str	r3, [r7, #16]
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e004      	b.n	80039de <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	fb02 f303 	mul.w	r3, r2, r3
 80039dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3350      	adds	r3, #80	@ 0x50
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 f8c4 	bl	8005b70 <pvPortMalloc>
 80039e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00f      	beq.n	8003a10 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	3350      	adds	r3, #80	@ 0x50
 80039f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039fe:	79fa      	ldrb	r2, [r7, #7]
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f805 	bl	8003a1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a10:	69bb      	ldr	r3, [r7, #24]
	}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e002      	b.n	8003a3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a48:	2101      	movs	r1, #1
 8003a4a:	69b8      	ldr	r0, [r7, #24]
 8003a4c:	f7ff fec0 	bl	80037d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	@ 0x38
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <xQueueGenericSend+0x34>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueGenericSend+0x42>
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericSend+0x46>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericSend+0x48>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <xQueueGenericSend+0x64>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d103      	bne.n	8003ad2 <xQueueGenericSend+0x72>
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <xQueueGenericSend+0x76>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <xQueueGenericSend+0x78>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10b      	bne.n	8003af4 <xQueueGenericSend+0x94>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	623b      	str	r3, [r7, #32]
}
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003af4:	f001 fa4a 	bl	8004f8c <xTaskGetSchedulerState>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d102      	bne.n	8003b04 <xQueueGenericSend+0xa4>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <xQueueGenericSend+0xa8>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <xQueueGenericSend+0xaa>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10b      	bne.n	8003b26 <xQueueGenericSend+0xc6>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	61fb      	str	r3, [r7, #28]
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b26:	f001 ff21 	bl	800596c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <xQueueGenericSend+0xdc>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d129      	bne.n	8003b90 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b42:	f000 fa8f 	bl	8004064 <prvCopyDataToQueue>
 8003b46:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	3324      	adds	r3, #36	@ 0x24
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 f855 	bl	8004c04 <xTaskRemoveFromEventList>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b60:	4b3f      	ldr	r3, [pc, #252]	@ (8003c60 <xQueueGenericSend+0x200>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	e00a      	b.n	8003b88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b78:	4b39      	ldr	r3, [pc, #228]	@ (8003c60 <xQueueGenericSend+0x200>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b88:	f001 ff20 	bl	80059cc <vPortExitCritical>
				return pdPASS;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e063      	b.n	8003c58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b96:	f001 ff19 	bl	80059cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e05c      	b.n	8003c58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 f88f 	bl	8004ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb2:	f001 ff0b 	bl	80059cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb6:	f000 fdfb 	bl	80047b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bba:	f001 fed7 	bl	800596c <vPortEnterCritical>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bc4:	b25b      	sxtb	r3, r3
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d103      	bne.n	8003bd4 <xQueueGenericSend+0x174>
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d103      	bne.n	8003bea <xQueueGenericSend+0x18a>
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bea:	f001 feef 	bl	80059cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bee:	1d3a      	adds	r2, r7, #4
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f87e 	bl	8004cf8 <xTaskCheckForTimeOut>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d124      	bne.n	8003c4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c04:	f000 fb26 	bl	8004254 <prvIsQueueFull>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	3310      	adds	r3, #16
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 ffa2 	bl	8004b60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c1e:	f000 fab1 	bl	8004184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c22:	f000 fdd3 	bl	80047cc <xTaskResumeAll>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f af7c 	bne.w	8003b26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <xQueueGenericSend+0x200>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	e772      	b.n	8003b26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c42:	f000 fa9f 	bl	8004184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c46:	f000 fdc1 	bl	80047cc <xTaskResumeAll>
 8003c4a:	e76c      	b.n	8003b26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c4e:	f000 fa99 	bl	8004184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c52:	f000 fdbb 	bl	80047cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c56:	2300      	movs	r3, #0
		}
	}
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3738      	adds	r7, #56	@ 0x38
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08e      	sub	sp, #56	@ 0x38
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <xQueueGenericSendFromISR+0x3e>
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <xQueueGenericSendFromISR+0x42>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <xQueueGenericSendFromISR+0x44>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	623b      	str	r3, [r7, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d103      	bne.n	8003cd2 <xQueueGenericSendFromISR+0x6e>
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <xQueueGenericSendFromISR+0x72>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueGenericSendFromISR+0x74>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	61fb      	str	r3, [r7, #28]
}
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cf4:	f001 fefc 	bl	8005af0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cf8:	f3ef 8211 	mrs	r2, BASEPRI
 8003cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	61ba      	str	r2, [r7, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d302      	bcc.n	8003d26 <xQueueGenericSendFromISR+0xc2>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d12c      	bne.n	8003d80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d36:	f000 f995 	bl	8004064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d112      	bne.n	8003d6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	3324      	adds	r3, #36	@ 0x24
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 ff57 	bl	8004c04 <xTaskRemoveFromEventList>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e007      	b.n	8003d7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	b25a      	sxtb	r2, r3
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003d7e:	e001      	b.n	8003d84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3738      	adds	r7, #56	@ 0x38
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	@ 0x30
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xQueueReceive+0x32>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	623b      	str	r3, [r7, #32]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <xQueueReceive+0x40>
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <xQueueReceive+0x44>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <xQueueReceive+0x46>
 8003de0:	2300      	movs	r3, #0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <xQueueReceive+0x62>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	61fb      	str	r3, [r7, #28]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dfe:	f001 f8c5 	bl	8004f8c <xTaskGetSchedulerState>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <xQueueReceive+0x72>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <xQueueReceive+0x76>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <xQueueReceive+0x78>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <xQueueReceive+0x94>
	__asm volatile
 8003e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	61bb      	str	r3, [r7, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	bf00      	nop
 8003e2e:	e7fd      	b.n	8003e2c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e30:	f001 fd9c 	bl	800596c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01f      	beq.n	8003e80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e44:	f000 f978 	bl	8004138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	1e5a      	subs	r2, r3, #1
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00f      	beq.n	8003e78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fed1 	bl	8004c04 <xTaskRemoveFromEventList>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e68:	4b3c      	ldr	r3, [pc, #240]	@ (8003f5c <xQueueReceive+0x1c0>)
 8003e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e78:	f001 fda8 	bl	80059cc <vPortExitCritical>
				return pdPASS;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e069      	b.n	8003f54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e86:	f001 fda1 	bl	80059cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e062      	b.n	8003f54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 ff17 	bl	8004ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ea2:	f001 fd93 	bl	80059cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ea6:	f000 fc83 	bl	80047b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eaa:	f001 fd5f 	bl	800596c <vPortEnterCritical>
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d103      	bne.n	8003ec4 <xQueueReceive+0x128>
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d103      	bne.n	8003eda <xQueueReceive+0x13e>
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eda:	f001 fd77 	bl	80059cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ede:	1d3a      	adds	r2, r7, #4
 8003ee0:	f107 0310 	add.w	r3, r7, #16
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 ff06 	bl	8004cf8 <xTaskCheckForTimeOut>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d123      	bne.n	8003f3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef4:	f000 f998 	bl	8004228 <prvIsQueueEmpty>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d017      	beq.n	8003f2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	3324      	adds	r3, #36	@ 0x24
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fe2a 	bl	8004b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f0e:	f000 f939 	bl	8004184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f12:	f000 fc5b 	bl	80047cc <xTaskResumeAll>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d189      	bne.n	8003e30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <xQueueReceive+0x1c0>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	e780      	b.n	8003e30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f30:	f000 f928 	bl	8004184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f34:	f000 fc4a 	bl	80047cc <xTaskResumeAll>
 8003f38:	e77a      	b.n	8003e30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f3c:	f000 f922 	bl	8004184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f40:	f000 fc44 	bl	80047cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f46:	f000 f96f 	bl	8004228 <prvIsQueueEmpty>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f43f af6f 	beq.w	8003e30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3730      	adds	r7, #48	@ 0x30
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	e000ed04 	.word	0xe000ed04

08003f60 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08e      	sub	sp, #56	@ 0x38
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	623b      	str	r3, [r7, #32]
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	e7fd      	b.n	8003f8a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <xQueueReceiveFromISR+0x3c>
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <xQueueReceiveFromISR+0x40>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <xQueueReceiveFromISR+0x42>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	61fb      	str	r3, [r7, #28]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fbe:	f001 fd97 	bl	8005af0 <vPortValidateInterruptPriority>
	__asm volatile
 8003fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8003fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	61ba      	str	r2, [r7, #24]
 8003fd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02f      	beq.n	800404a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ff8:	f000 f89e 	bl	8004138 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004004:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d112      	bne.n	8004034 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	3310      	adds	r3, #16
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fdf2 	bl	8004c04 <xTaskRemoveFromEventList>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e007      	b.n	8004044 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004038:	3301      	adds	r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	b25a      	sxtb	r2, r3
 800403e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004044:	2301      	movs	r3, #1
 8004046:	637b      	str	r3, [r7, #52]	@ 0x34
 8004048:	e001      	b.n	800404e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800404a:	2300      	movs	r3, #0
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
 800404e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004050:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f383 8811 	msr	BASEPRI, r3
}
 8004058:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800405c:	4618      	mov	r0, r3
 800405e:	3738      	adds	r7, #56	@ 0x38
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10d      	bne.n	800409e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d14d      	bne.n	8004126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 ff9a 	bl	8004fc8 <xTaskPriorityDisinherit>
 8004094:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	e043      	b.n	8004126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d119      	bne.n	80040d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6898      	ldr	r0, [r3, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	461a      	mov	r2, r3
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	f001 ff68 	bl	8005f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	441a      	add	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d32b      	bcc.n	8004126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	e026      	b.n	8004126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68d8      	ldr	r0, [r3, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	461a      	mov	r2, r3
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	f001 ff4e 	bl	8005f84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	425b      	negs	r3, r3
 80040f2:	441a      	add	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d207      	bcs.n	8004114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410c:	425b      	negs	r3, r3
 800410e:	441a      	add	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d105      	bne.n	8004126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3b01      	subs	r3, #1
 8004124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800412e:	697b      	ldr	r3, [r7, #20]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d018      	beq.n	800417c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	441a      	add	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d303      	bcc.n	800416c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68d9      	ldr	r1, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	461a      	mov	r2, r3
 8004176:	6838      	ldr	r0, [r7, #0]
 8004178:	f001 ff04 	bl	8005f84 <memcpy>
	}
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800418c:	f001 fbee 	bl	800596c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004198:	e011      	b.n	80041be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d012      	beq.n	80041c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3324      	adds	r3, #36	@ 0x24
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fd2c 	bl	8004c04 <xTaskRemoveFromEventList>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041b2:	f000 fe05 	bl	8004dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	dce9      	bgt.n	800419a <prvUnlockQueue+0x16>
 80041c6:	e000      	b.n	80041ca <prvUnlockQueue+0x46>
					break;
 80041c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	22ff      	movs	r2, #255	@ 0xff
 80041ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041d2:	f001 fbfb 	bl	80059cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041d6:	f001 fbc9 	bl	800596c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041e2:	e011      	b.n	8004208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3310      	adds	r3, #16
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fd07 	bl	8004c04 <xTaskRemoveFromEventList>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041fc:	f000 fde0 	bl	8004dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004200:	7bbb      	ldrb	r3, [r7, #14]
 8004202:	3b01      	subs	r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800420c:	2b00      	cmp	r3, #0
 800420e:	dce9      	bgt.n	80041e4 <prvUnlockQueue+0x60>
 8004210:	e000      	b.n	8004214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	22ff      	movs	r2, #255	@ 0xff
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800421c:	f001 fbd6 	bl	80059cc <vPortExitCritical>
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004230:	f001 fb9c 	bl	800596c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e001      	b.n	8004246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004246:	f001 fbc1 	bl	80059cc <vPortExitCritical>

	return xReturn;
 800424a:	68fb      	ldr	r3, [r7, #12]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800425c:	f001 fb86 	bl	800596c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004268:	429a      	cmp	r2, r3
 800426a:	d102      	bne.n	8004272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e001      	b.n	8004276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004276:	f001 fba9 	bl	80059cc <vPortExitCritical>

	return xReturn;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e014      	b.n	80042be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004294:	4a0e      	ldr	r2, [pc, #56]	@ (80042d0 <vQueueAddToRegistry+0x4c>)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042a0:	490b      	ldr	r1, [pc, #44]	@ (80042d0 <vQueueAddToRegistry+0x4c>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <vQueueAddToRegistry+0x4c>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042b6:	e006      	b.n	80042c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b07      	cmp	r3, #7
 80042c2:	d9e7      	bls.n	8004294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20000d64 	.word	0x20000d64

080042d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042e4:	f001 fb42 	bl	800596c <vPortEnterCritical>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d103      	bne.n	80042fe <vQueueWaitForMessageRestricted+0x2a>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004304:	b25b      	sxtb	r3, r3
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d103      	bne.n	8004314 <vQueueWaitForMessageRestricted+0x40>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004314:	f001 fb5a 	bl	80059cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3324      	adds	r3, #36	@ 0x24
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fc3f 	bl	8004bac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7ff ff28 	bl	8004184 <prvUnlockQueue>
	}
 8004334:	bf00      	nop
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	@ 0x38
 8004340:	af04      	add	r7, sp, #16
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	623b      	str	r3, [r7, #32]
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <xTaskCreateStatic+0x4a>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	61fb      	str	r3, [r7, #28]
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	e7fd      	b.n	8004382 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004386:	235c      	movs	r3, #92	@ 0x5c
 8004388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b5c      	cmp	r3, #92	@ 0x5c
 800438e:	d00b      	beq.n	80043a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	61bb      	str	r3, [r7, #24]
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01e      	beq.n	80043ec <xTaskCreateStatic+0xb0>
 80043ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043bc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043c6:	2300      	movs	r3, #0
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	f107 0314 	add.w	r3, r7, #20
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f850 	bl	8004484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043e6:	f000 f8d5 	bl	8004594 <prvAddNewTaskToReadyList>
 80043ea:	e001      	b.n	80043f0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043f0:	697b      	ldr	r3, [r7, #20]
	}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3728      	adds	r7, #40	@ 0x28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b08c      	sub	sp, #48	@ 0x30
 80043fe:	af04      	add	r7, sp, #16
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fbae 	bl	8005b70 <pvPortMalloc>
 8004414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00e      	beq.n	800443a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800441c:	205c      	movs	r0, #92	@ 0x5c
 800441e:	f001 fba7 	bl	8005b70 <pvPortMalloc>
 8004422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004430:	e005      	b.n	800443e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004432:	6978      	ldr	r0, [r7, #20]
 8004434:	f001 fc64 	bl	8005d00 <vPortFree>
 8004438:	e001      	b.n	800443e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	2300      	movs	r3, #0
 8004450:	9303      	str	r3, [sp, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	9302      	str	r3, [sp, #8]
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f80e 	bl	8004484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004468:	69f8      	ldr	r0, [r7, #28]
 800446a:	f000 f893 	bl	8004594 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800446e:	2301      	movs	r3, #1
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e002      	b.n	800447a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800447a:	69bb      	ldr	r3, [r7, #24]
	}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	461a      	mov	r2, r3
 800449c:	21a5      	movs	r1, #165	@ 0xa5
 800449e:	f001 fd45 	bl	8005f2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044ac:	3b01      	subs	r3, #1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	617b      	str	r3, [r7, #20]
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	e7fd      	b.n	80044da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e012      	b.n	800450a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	7819      	ldrb	r1, [r3, #0]
 80044ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	3334      	adds	r3, #52	@ 0x34
 80044f4:	460a      	mov	r2, r1
 80044f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d006      	beq.n	8004512 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3301      	adds	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d9e9      	bls.n	80044e4 <prvInitialiseNewTask+0x60>
 8004510:	e000      	b.n	8004514 <prvInitialiseNewTask+0x90>
		{
			break;
 8004512:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	2b37      	cmp	r3, #55	@ 0x37
 8004520:	d901      	bls.n	8004526 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004522:	2337      	movs	r3, #55	@ 0x37
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004530:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	2200      	movs	r2, #0
 8004536:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	3304      	adds	r3, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f8b6 	bl	80036ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	3318      	adds	r3, #24
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff f8b1 	bl	80036ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004550:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	2200      	movs	r2, #0
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	69b8      	ldr	r0, [r7, #24]
 8004576:	f001 f90b 	bl	8005790 <pxPortInitialiseStack>
 800457a:	4602      	mov	r2, r0
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800458a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800458c:	bf00      	nop
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800459c:	f001 f9e6 	bl	800596c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <prvAddNewTaskToReadyList+0xc4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3301      	adds	r3, #1
 80045a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004658 <prvAddNewTaskToReadyList+0xc4>)
 80045a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045aa:	4b2c      	ldr	r3, [pc, #176]	@ (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045b2:	4a2a      	ldr	r2, [pc, #168]	@ (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <prvAddNewTaskToReadyList+0xc4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d110      	bne.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045c0:	f000 fc22 	bl	8004e08 <prvInitialiseTaskLists>
 80045c4:	e00d      	b.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045c6:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <prvAddNewTaskToReadyList+0xcc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ce:	4b23      	ldr	r3, [pc, #140]	@ (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d802      	bhi.n	80045e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045dc:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <prvAddNewTaskToReadyList+0xc8>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045e2:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <prvAddNewTaskToReadyList+0xd0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004664 <prvAddNewTaskToReadyList+0xd0>)
 80045ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <prvAddNewTaskToReadyList+0xd0>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <prvAddNewTaskToReadyList+0xd4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d903      	bls.n	8004608 <prvAddNewTaskToReadyList+0x74>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004604:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <prvAddNewTaskToReadyList+0xd4>)
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4a15      	ldr	r2, [pc, #84]	@ (800466c <prvAddNewTaskToReadyList+0xd8>)
 8004616:	441a      	add	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7ff f851 	bl	80036c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004624:	f001 f9d2 	bl	80059cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004628:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <prvAddNewTaskToReadyList+0xcc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004630:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <prvAddNewTaskToReadyList+0xc8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	429a      	cmp	r2, r3
 800463c:	d207      	bcs.n	800464e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800463e:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <prvAddNewTaskToReadyList+0xdc>)
 8004640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20001278 	.word	0x20001278
 800465c:	20000da4 	.word	0x20000da4
 8004660:	20001284 	.word	0x20001284
 8004664:	20001294 	.word	0x20001294
 8004668:	20001280 	.word	0x20001280
 800466c:	20000da8 	.word	0x20000da8
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <vTaskDelay+0x64>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <vTaskDelay+0x32>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60bb      	str	r3, [r7, #8]
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046a6:	f000 f883 	bl	80047b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046aa:	2100      	movs	r1, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fcfb 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b2:	f000 f88b 	bl	80047cc <xTaskResumeAll>
 80046b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046be:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <vTaskDelay+0x68>)
 80046c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	200012a0 	.word	0x200012a0
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046ee:	463a      	mov	r2, r7
 80046f0:	1d39      	adds	r1, r7, #4
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe ff88 	bl	800360c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	9202      	str	r2, [sp, #8]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	460a      	mov	r2, r1
 800470e:	4922      	ldr	r1, [pc, #136]	@ (8004798 <vTaskStartScheduler+0xb8>)
 8004710:	4822      	ldr	r0, [pc, #136]	@ (800479c <vTaskStartScheduler+0xbc>)
 8004712:	f7ff fe13 	bl	800433c <xTaskCreateStatic>
 8004716:	4603      	mov	r3, r0
 8004718:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <vTaskStartScheduler+0xc0>)
 800471a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800471c:	4b20      	ldr	r3, [pc, #128]	@ (80047a0 <vTaskStartScheduler+0xc0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e001      	b.n	800472e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004734:	f000 fd0c 	bl	8005150 <xTimerCreateTimerTask>
 8004738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d116      	bne.n	800476e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004754:	4b13      	ldr	r3, [pc, #76]	@ (80047a4 <vTaskStartScheduler+0xc4>)
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800475c:	4b12      	ldr	r3, [pc, #72]	@ (80047a8 <vTaskStartScheduler+0xc8>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <vTaskStartScheduler+0xcc>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004768:	f001 f88e 	bl	8005888 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800476c:	e00f      	b.n	800478e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d10b      	bne.n	800478e <vTaskStartScheduler+0xae>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <vTaskStartScheduler+0xaa>
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	0800601c 	.word	0x0800601c
 800479c:	08004dd9 	.word	0x08004dd9
 80047a0:	2000129c 	.word	0x2000129c
 80047a4:	20001298 	.word	0x20001298
 80047a8:	20001284 	.word	0x20001284
 80047ac:	2000127c 	.word	0x2000127c

080047b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047b4:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <vTaskSuspendAll+0x18>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4a03      	ldr	r2, [pc, #12]	@ (80047c8 <vTaskSuspendAll+0x18>)
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	200012a0 	.word	0x200012a0

080047cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047da:	4b42      	ldr	r3, [pc, #264]	@ (80048e4 <xTaskResumeAll+0x118>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10b      	bne.n	80047fa <xTaskResumeAll+0x2e>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	603b      	str	r3, [r7, #0]
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	e7fd      	b.n	80047f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047fa:	f001 f8b7 	bl	800596c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <xTaskResumeAll+0x118>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	4a37      	ldr	r2, [pc, #220]	@ (80048e4 <xTaskResumeAll+0x118>)
 8004806:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004808:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <xTaskResumeAll+0x118>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d162      	bne.n	80048d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <xTaskResumeAll+0x11c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05e      	beq.n	80048d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004818:	e02f      	b.n	800487a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800481a:	4b34      	ldr	r3, [pc, #208]	@ (80048ec <xTaskResumeAll+0x120>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3318      	adds	r3, #24
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe ffa8 	bl	800377c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3304      	adds	r3, #4
 8004830:	4618      	mov	r0, r3
 8004832:	f7fe ffa3 	bl	800377c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483a:	4b2d      	ldr	r3, [pc, #180]	@ (80048f0 <xTaskResumeAll+0x124>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d903      	bls.n	800484a <xTaskResumeAll+0x7e>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <xTaskResumeAll+0x124>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a27      	ldr	r2, [pc, #156]	@ (80048f4 <xTaskResumeAll+0x128>)
 8004858:	441a      	add	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7fe ff30 	bl	80036c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486a:	4b23      	ldr	r3, [pc, #140]	@ (80048f8 <xTaskResumeAll+0x12c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004874:	4b21      	ldr	r3, [pc, #132]	@ (80048fc <xTaskResumeAll+0x130>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800487a:	4b1c      	ldr	r3, [pc, #112]	@ (80048ec <xTaskResumeAll+0x120>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1cb      	bne.n	800481a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004888:	f000 fb5c 	bl	8004f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800488c:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <xTaskResumeAll+0x134>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004898:	f000 f844 	bl	8004924 <xTaskIncrementTick>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80048a2:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <xTaskResumeAll+0x130>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f1      	bne.n	8004898 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80048b4:	4b12      	ldr	r3, [pc, #72]	@ (8004900 <xTaskResumeAll+0x134>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <xTaskResumeAll+0x130>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004904 <xTaskResumeAll+0x138>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f001 f879 	bl	80059cc <vPortExitCritical>

	return xAlreadyYielded;
 80048da:	68bb      	ldr	r3, [r7, #8]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200012a0 	.word	0x200012a0
 80048e8:	20001278 	.word	0x20001278
 80048ec:	20001238 	.word	0x20001238
 80048f0:	20001280 	.word	0x20001280
 80048f4:	20000da8 	.word	0x20000da8
 80048f8:	20000da4 	.word	0x20000da4
 80048fc:	2000128c 	.word	0x2000128c
 8004900:	20001288 	.word	0x20001288
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800490e:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <xTaskGetTickCount+0x18>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004914:	687b      	ldr	r3, [r7, #4]
}
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	2000127c 	.word	0x2000127c

08004924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492e:	4b52      	ldr	r3, [pc, #328]	@ (8004a78 <xTaskIncrementTick+0x154>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 808f 	bne.w	8004a56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004938:	4b50      	ldr	r3, [pc, #320]	@ (8004a7c <xTaskIncrementTick+0x158>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004940:	4a4e      	ldr	r2, [pc, #312]	@ (8004a7c <xTaskIncrementTick+0x158>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d121      	bne.n	8004990 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800494c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	603b      	str	r3, [r7, #0]
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	e7fd      	b.n	800496a <xTaskIncrementTick+0x46>
 800496e:	4b44      	ldr	r3, [pc, #272]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <xTaskIncrementTick+0x160>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a41      	ldr	r2, [pc, #260]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4a41      	ldr	r2, [pc, #260]	@ (8004a84 <xTaskIncrementTick+0x160>)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b41      	ldr	r3, [pc, #260]	@ (8004a88 <xTaskIncrementTick+0x164>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	4a3f      	ldr	r2, [pc, #252]	@ (8004a88 <xTaskIncrementTick+0x164>)
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	f000 fada 	bl	8004f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004990:	4b3e      	ldr	r3, [pc, #248]	@ (8004a8c <xTaskIncrementTick+0x168>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d34e      	bcc.n	8004a38 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <xTaskIncrementTick+0x84>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <xTaskIncrementTick+0x86>
 80049a8:	2300      	movs	r3, #0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ae:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <xTaskIncrementTick+0x168>)
 80049b0:	f04f 32ff 	mov.w	r2, #4294967295
 80049b4:	601a      	str	r2, [r3, #0]
					break;
 80049b6:	e03f      	b.n	8004a38 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049b8:	4b31      	ldr	r3, [pc, #196]	@ (8004a80 <xTaskIncrementTick+0x15c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d203      	bcs.n	80049d8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049d0:	4a2e      	ldr	r2, [pc, #184]	@ (8004a8c <xTaskIncrementTick+0x168>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6013      	str	r3, [r2, #0]
						break;
 80049d6:	e02f      	b.n	8004a38 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fecd 	bl	800377c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3318      	adds	r3, #24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fec4 	bl	800377c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <xTaskIncrementTick+0x16c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d903      	bls.n	8004a08 <xTaskIncrementTick+0xe4>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <xTaskIncrementTick+0x16c>)
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a1f      	ldr	r2, [pc, #124]	@ (8004a94 <xTaskIncrementTick+0x170>)
 8004a16:	441a      	add	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe fe51 	bl	80036c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <xTaskIncrementTick+0x174>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d3b3      	bcc.n	800499a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a36:	e7b0      	b.n	800499a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a38:	4b17      	ldr	r3, [pc, #92]	@ (8004a98 <xTaskIncrementTick+0x174>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3e:	4915      	ldr	r1, [pc, #84]	@ (8004a94 <xTaskIncrementTick+0x170>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d907      	bls.n	8004a60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e004      	b.n	8004a60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a56:	4b11      	ldr	r3, [pc, #68]	@ (8004a9c <xTaskIncrementTick+0x178>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a9c <xTaskIncrementTick+0x178>)
 8004a5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a60:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <xTaskIncrementTick+0x17c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a6c:	697b      	ldr	r3, [r7, #20]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200012a0 	.word	0x200012a0
 8004a7c:	2000127c 	.word	0x2000127c
 8004a80:	20001230 	.word	0x20001230
 8004a84:	20001234 	.word	0x20001234
 8004a88:	20001290 	.word	0x20001290
 8004a8c:	20001298 	.word	0x20001298
 8004a90:	20001280 	.word	0x20001280
 8004a94:	20000da8 	.word	0x20000da8
 8004a98:	20000da4 	.word	0x20000da4
 8004a9c:	20001288 	.word	0x20001288
 8004aa0:	2000128c 	.word	0x2000128c

08004aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aaa:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <vTaskSwitchContext+0xa8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ab2:	4b27      	ldr	r3, [pc, #156]	@ (8004b50 <vTaskSwitchContext+0xac>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ab8:	e042      	b.n	8004b40 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004aba:	4b25      	ldr	r3, [pc, #148]	@ (8004b50 <vTaskSwitchContext+0xac>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ac0:	4b24      	ldr	r3, [pc, #144]	@ (8004b54 <vTaskSwitchContext+0xb0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	e011      	b.n	8004aec <vTaskSwitchContext+0x48>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <vTaskSwitchContext+0x42>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	607b      	str	r3, [r7, #4]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <vTaskSwitchContext+0x3e>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	491a      	ldr	r1, [pc, #104]	@ (8004b58 <vTaskSwitchContext+0xb4>)
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0e3      	beq.n	8004ac8 <vTaskSwitchContext+0x24>
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4a13      	ldr	r2, [pc, #76]	@ (8004b58 <vTaskSwitchContext+0xb4>)
 8004b0c:	4413      	add	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3308      	adds	r3, #8
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d104      	bne.n	8004b30 <vTaskSwitchContext+0x8c>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	4a09      	ldr	r2, [pc, #36]	@ (8004b5c <vTaskSwitchContext+0xb8>)
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4a06      	ldr	r2, [pc, #24]	@ (8004b54 <vTaskSwitchContext+0xb0>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6013      	str	r3, [r2, #0]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	200012a0 	.word	0x200012a0
 8004b50:	2000128c 	.word	0x2000128c
 8004b54:	20001280 	.word	0x20001280
 8004b58:	20000da8 	.word	0x20000da8
 8004b5c:	20000da4 	.word	0x20000da4

08004b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b88:	4b07      	ldr	r3, [pc, #28]	@ (8004ba8 <vTaskPlaceOnEventList+0x48>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3318      	adds	r3, #24
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fe fdbb 	bl	800370c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b96:	2101      	movs	r1, #1
 8004b98:	6838      	ldr	r0, [r7, #0]
 8004b9a:	f000 fa85 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000da4 	.word	0x20000da4

08004bac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	617b      	str	r3, [r7, #20]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c00 <vTaskPlaceOnEventListRestricted+0x54>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7fe fd71 	bl	80036c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	68b8      	ldr	r0, [r7, #8]
 8004bf4:	f000 fa58 	bl	80050a8 <prvAddCurrentTaskToDelayedList>
	}
 8004bf8:	bf00      	nop
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000da4 	.word	0x20000da4

08004c04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	60fb      	str	r3, [r7, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3318      	adds	r3, #24
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fda0 	bl	800377c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <xTaskRemoveFromEventList+0xb0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11d      	bne.n	8004c80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe fd97 	bl	800377c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c52:	4b19      	ldr	r3, [pc, #100]	@ (8004cb8 <xTaskRemoveFromEventList+0xb4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d903      	bls.n	8004c62 <xTaskRemoveFromEventList+0x5e>
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	4a16      	ldr	r2, [pc, #88]	@ (8004cb8 <xTaskRemoveFromEventList+0xb4>)
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a13      	ldr	r2, [pc, #76]	@ (8004cbc <xTaskRemoveFromEventList+0xb8>)
 8004c70:	441a      	add	r2, r3
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7fe fd24 	bl	80036c6 <vListInsertEnd>
 8004c7e:	e005      	b.n	8004c8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	3318      	adds	r3, #24
 8004c84:	4619      	mov	r1, r3
 8004c86:	480e      	ldr	r0, [pc, #56]	@ (8004cc0 <xTaskRemoveFromEventList+0xbc>)
 8004c88:	f7fe fd1d 	bl	80036c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c90:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc4 <xTaskRemoveFromEventList+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d905      	bls.n	8004ca6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <xTaskRemoveFromEventList+0xc4>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e001      	b.n	8004caa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004caa:	697b      	ldr	r3, [r7, #20]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200012a0 	.word	0x200012a0
 8004cb8:	20001280 	.word	0x20001280
 8004cbc:	20000da8 	.word	0x20000da8
 8004cc0:	20001238 	.word	0x20001238
 8004cc4:	20000da4 	.word	0x20000da4
 8004cc8:	2000128c 	.word	0x2000128c

08004ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <vTaskInternalSetTimeOutState+0x24>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <vTaskInternalSetTimeOutState+0x28>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	605a      	str	r2, [r3, #4]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20001290 	.word	0x20001290
 8004cf4:	2000127c 	.word	0x2000127c

08004cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	613b      	str	r3, [r7, #16]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	e7fd      	b.n	8004d3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d3e:	f000 fe15 	bl	800596c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d42:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <xTaskCheckForTimeOut+0xc0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d102      	bne.n	8004d62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e023      	b.n	8004daa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <xTaskCheckForTimeOut+0xc4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d007      	beq.n	8004d7e <xTaskCheckForTimeOut+0x86>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e015      	b.n	8004daa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d20b      	bcs.n	8004da0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff99 	bl	8004ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	e004      	b.n	8004daa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004da6:	2301      	movs	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f000 fe0f 	bl	80059cc <vPortExitCritical>

	return xReturn;
 8004dae:	69fb      	ldr	r3, [r7, #28]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	2000127c 	.word	0x2000127c
 8004dbc:	20001290 	.word	0x20001290

08004dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dc4:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <vTaskMissedYield+0x14>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	2000128c 	.word	0x2000128c

08004dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004de0:	f000 f852 	bl	8004e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004de4:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <prvIdleTask+0x28>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d9f9      	bls.n	8004de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <prvIdleTask+0x2c>)
 8004dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dfc:	e7f0      	b.n	8004de0 <prvIdleTask+0x8>
 8004dfe:	bf00      	nop
 8004e00:	20000da8 	.word	0x20000da8
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
 8004e12:	e00c      	b.n	8004e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4a12      	ldr	r2, [pc, #72]	@ (8004e68 <prvInitialiseTaskLists+0x60>)
 8004e20:	4413      	add	r3, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fc24 	bl	8003670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b37      	cmp	r3, #55	@ 0x37
 8004e32:	d9ef      	bls.n	8004e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e34:	480d      	ldr	r0, [pc, #52]	@ (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e36:	f7fe fc1b 	bl	8003670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e3a:	480d      	ldr	r0, [pc, #52]	@ (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e3c:	f7fe fc18 	bl	8003670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e40:	480c      	ldr	r0, [pc, #48]	@ (8004e74 <prvInitialiseTaskLists+0x6c>)
 8004e42:	f7fe fc15 	bl	8003670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e46:	480c      	ldr	r0, [pc, #48]	@ (8004e78 <prvInitialiseTaskLists+0x70>)
 8004e48:	f7fe fc12 	bl	8003670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e4c:	480b      	ldr	r0, [pc, #44]	@ (8004e7c <prvInitialiseTaskLists+0x74>)
 8004e4e:	f7fe fc0f 	bl	8003670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <prvInitialiseTaskLists+0x78>)
 8004e54:	4a05      	ldr	r2, [pc, #20]	@ (8004e6c <prvInitialiseTaskLists+0x64>)
 8004e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvInitialiseTaskLists+0x7c>)
 8004e5a:	4a05      	ldr	r2, [pc, #20]	@ (8004e70 <prvInitialiseTaskLists+0x68>)
 8004e5c:	601a      	str	r2, [r3, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000da8 	.word	0x20000da8
 8004e6c:	20001208 	.word	0x20001208
 8004e70:	2000121c 	.word	0x2000121c
 8004e74:	20001238 	.word	0x20001238
 8004e78:	2000124c 	.word	0x2000124c
 8004e7c:	20001264 	.word	0x20001264
 8004e80:	20001230 	.word	0x20001230
 8004e84:	20001234 	.word	0x20001234

08004e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e8e:	e019      	b.n	8004ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e90:	f000 fd6c 	bl	800596c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e94:	4b10      	ldr	r3, [pc, #64]	@ (8004ed8 <prvCheckTasksWaitingTermination+0x50>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fc6b 	bl	800377c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	4a0b      	ldr	r2, [pc, #44]	@ (8004edc <prvCheckTasksWaitingTermination+0x54>)
 8004eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eba:	f000 fd87 	bl	80059cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f810 	bl	8004ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <prvCheckTasksWaitingTermination+0x58>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e1      	bne.n	8004e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	2000124c 	.word	0x2000124c
 8004edc:	20001278 	.word	0x20001278
 8004ee0:	20001260 	.word	0x20001260

08004ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 ff00 	bl	8005d00 <vPortFree>
				vPortFree( pxTCB );
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fefd 	bl	8005d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f06:	e019      	b.n	8004f3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d103      	bne.n	8004f1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fef4 	bl	8005d00 <vPortFree>
	}
 8004f18:	e010      	b.n	8004f3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d00b      	beq.n	8004f3c <prvDeleteTCB+0x58>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60fb      	str	r3, [r7, #12]
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <prvDeleteTCB+0x54>
	}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <prvResetNextTaskUnblockTime+0x40>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <prvResetNextTaskUnblockTime+0x14>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <prvResetNextTaskUnblockTime+0x16>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <prvResetNextTaskUnblockTime+0x44>)
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f66:	e008      	b.n	8004f7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f68:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <prvResetNextTaskUnblockTime+0x40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4a04      	ldr	r2, [pc, #16]	@ (8004f88 <prvResetNextTaskUnblockTime+0x44>)
 8004f78:	6013      	str	r3, [r2, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	20001230 	.word	0x20001230
 8004f88:	20001298 	.word	0x20001298

08004f8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <xTaskGetSchedulerState+0x34>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	e008      	b.n	8004fb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa0:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <xTaskGetSchedulerState+0x38>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e001      	b.n	8004fb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fb2:	687b      	ldr	r3, [r7, #4]
	}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20001284 	.word	0x20001284
 8004fc4:	200012a0 	.word	0x200012a0

08004fc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d058      	beq.n	8005090 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fde:	4b2f      	ldr	r3, [pc, #188]	@ (800509c <xTaskPriorityDisinherit+0xd4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d00b      	beq.n	8005000 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	60fb      	str	r3, [r7, #12]
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60bb      	str	r3, [r7, #8]
}
 800501a:	bf00      	nop
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	429a      	cmp	r2, r3
 8005034:	d02c      	beq.n	8005090 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d128      	bne.n	8005090 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	3304      	adds	r3, #4
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fb9a 	bl	800377c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005060:	4b0f      	ldr	r3, [pc, #60]	@ (80050a0 <xTaskPriorityDisinherit+0xd8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d903      	bls.n	8005070 <xTaskPriorityDisinherit+0xa8>
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	4a0c      	ldr	r2, [pc, #48]	@ (80050a0 <xTaskPriorityDisinherit+0xd8>)
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4a09      	ldr	r2, [pc, #36]	@ (80050a4 <xTaskPriorityDisinherit+0xdc>)
 800507e:	441a      	add	r2, r3
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f7fe fb1d 	bl	80036c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800508c:	2301      	movs	r3, #1
 800508e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005090:	697b      	ldr	r3, [r7, #20]
	}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000da4 	.word	0x20000da4
 80050a0:	20001280 	.word	0x20001280
 80050a4:	20000da8 	.word	0x20000da8

080050a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050b2:	4b21      	ldr	r3, [pc, #132]	@ (8005138 <prvAddCurrentTaskToDelayedList+0x90>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b8:	4b20      	ldr	r3, [pc, #128]	@ (800513c <prvAddCurrentTaskToDelayedList+0x94>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fb5c 	bl	800377c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d10a      	bne.n	80050e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050d2:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <prvAddCurrentTaskToDelayedList+0x94>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4819      	ldr	r0, [pc, #100]	@ (8005140 <prvAddCurrentTaskToDelayedList+0x98>)
 80050dc:	f7fe faf3 	bl	80036c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050e0:	e026      	b.n	8005130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4413      	add	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <prvAddCurrentTaskToDelayedList+0x94>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d209      	bcs.n	800510e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fa:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b0f      	ldr	r3, [pc, #60]	@ (800513c <prvAddCurrentTaskToDelayedList+0x94>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3304      	adds	r3, #4
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fe fb00 	bl	800370c <vListInsert>
}
 800510c:	e010      	b.n	8005130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510e:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <prvAddCurrentTaskToDelayedList+0x94>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7fe faf6 	bl	800370c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005120:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	d202      	bcs.n	8005130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800512a:	4a08      	ldr	r2, [pc, #32]	@ (800514c <prvAddCurrentTaskToDelayedList+0xa4>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6013      	str	r3, [r2, #0]
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	2000127c 	.word	0x2000127c
 800513c:	20000da4 	.word	0x20000da4
 8005140:	20001264 	.word	0x20001264
 8005144:	20001234 	.word	0x20001234
 8005148:	20001230 	.word	0x20001230
 800514c:	20001298 	.word	0x20001298

08005150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	@ 0x28
 8005154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800515a:	f000 fad9 	bl	8005710 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800515e:	4b1d      	ldr	r3, [pc, #116]	@ (80051d4 <xTimerCreateTimerTask+0x84>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d021      	beq.n	80051aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800516e:	1d3a      	adds	r2, r7, #4
 8005170:	f107 0108 	add.w	r1, r7, #8
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe fa5f 	bl	800363c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	9202      	str	r2, [sp, #8]
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	2302      	movs	r3, #2
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	460a      	mov	r2, r1
 8005190:	4911      	ldr	r1, [pc, #68]	@ (80051d8 <xTimerCreateTimerTask+0x88>)
 8005192:	4812      	ldr	r0, [pc, #72]	@ (80051dc <xTimerCreateTimerTask+0x8c>)
 8005194:	f7ff f8d2 	bl	800433c <xTaskCreateStatic>
 8005198:	4603      	mov	r3, r0
 800519a:	4a11      	ldr	r2, [pc, #68]	@ (80051e0 <xTimerCreateTimerTask+0x90>)
 800519c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <xTimerCreateTimerTask+0x90>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051a6:	2301      	movs	r3, #1
 80051a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200012d4 	.word	0x200012d4
 80051d8:	08006024 	.word	0x08006024
 80051dc:	08005305 	.word	0x08005305
 80051e0:	200012d8 	.word	0x200012d8

080051e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	@ 0x28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10b      	bne.n	8005214 <xTimerGenericCommand+0x30>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005214:	4b19      	ldr	r3, [pc, #100]	@ (800527c <xTimerGenericCommand+0x98>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d02a      	beq.n	8005272 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b05      	cmp	r3, #5
 800522c:	dc18      	bgt.n	8005260 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800522e:	f7ff fead 	bl	8004f8c <xTaskGetSchedulerState>
 8005232:	4603      	mov	r3, r0
 8005234:	2b02      	cmp	r3, #2
 8005236:	d109      	bne.n	800524c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005238:	4b10      	ldr	r3, [pc, #64]	@ (800527c <xTimerGenericCommand+0x98>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	f107 0110 	add.w	r1, r7, #16
 8005240:	2300      	movs	r3, #0
 8005242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005244:	f7fe fc0c 	bl	8003a60 <xQueueGenericSend>
 8005248:	6278      	str	r0, [r7, #36]	@ 0x24
 800524a:	e012      	b.n	8005272 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <xTimerGenericCommand+0x98>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f107 0110 	add.w	r1, r7, #16
 8005254:	2300      	movs	r3, #0
 8005256:	2200      	movs	r2, #0
 8005258:	f7fe fc02 	bl	8003a60 <xQueueGenericSend>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24
 800525e:	e008      	b.n	8005272 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <xTimerGenericCommand+0x98>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	f107 0110 	add.w	r1, r7, #16
 8005268:	2300      	movs	r3, #0
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	f7fe fcfa 	bl	8003c64 <xQueueGenericSendFromISR>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005274:	4618      	mov	r0, r3
 8005276:	3728      	adds	r7, #40	@ 0x28
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	200012d4 	.word	0x200012d4

08005280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800528a:	4b1d      	ldr	r3, [pc, #116]	@ (8005300 <prvProcessExpiredTimer+0x80>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fa6f 	bl	800377c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d123      	bne.n	80052ee <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	18d1      	adds	r1, r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	6978      	ldr	r0, [r7, #20]
 80052b4:	f000 f8cc 	bl	8005450 <prvInsertTimerInActiveList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d017      	beq.n	80052ee <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2300      	movs	r3, #0
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	2100      	movs	r1, #0
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7ff ff8b 	bl	80051e4 <xTimerGenericCommand>
 80052ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	4798      	blx	r3
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200012cc 	.word	0x200012cc

08005304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f859 	bl	80053c8 <prvGetNextExpireTime>
 8005316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4619      	mov	r1, r3
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f805 	bl	800532c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005322:	f000 f8d7 	bl	80054d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005326:	bf00      	nop
 8005328:	e7f0      	b.n	800530c <prvTimerTask+0x8>
	...

0800532c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005336:	f7ff fa3b 	bl	80047b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f866 	bl	8005410 <prvSampleTimeNow>
 8005344:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d130      	bne.n	80053ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <prvProcessTimerOrBlockTask+0x3c>
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	429a      	cmp	r2, r3
 8005358:	d806      	bhi.n	8005368 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800535a:	f7ff fa37 	bl	80047cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff8d 	bl	8005280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005366:	e024      	b.n	80053b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800536e:	4b13      	ldr	r3, [pc, #76]	@ (80053bc <prvProcessTimerOrBlockTask+0x90>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf0c      	ite	eq
 8005378:	2301      	moveq	r3, #1
 800537a:	2300      	movne	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005380:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <prvProcessTimerOrBlockTask+0x94>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	4619      	mov	r1, r3
 800538e:	f7fe ffa1 	bl	80042d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005392:	f7ff fa1b 	bl	80047cc <xTaskResumeAll>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800539c:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <prvProcessTimerOrBlockTask+0x98>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
}
 80053ac:	e001      	b.n	80053b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053ae:	f7ff fa0d 	bl	80047cc <xTaskResumeAll>
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	200012d0 	.word	0x200012d0
 80053c0:	200012d4 	.word	0x200012d4
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053d0:	4b0e      	ldr	r3, [pc, #56]	@ (800540c <prvGetNextExpireTime+0x44>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d105      	bne.n	80053fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053ee:	4b07      	ldr	r3, [pc, #28]	@ (800540c <prvGetNextExpireTime+0x44>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e001      	b.n	80053fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	200012cc 	.word	0x200012cc

08005410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005418:	f7ff fa76 	bl	8004908 <xTaskGetTickCount>
 800541c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800541e:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <prvSampleTimeNow+0x3c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	429a      	cmp	r2, r3
 8005426:	d205      	bcs.n	8005434 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005428:	f000 f910 	bl	800564c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e002      	b.n	800543a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800543a:	4a04      	ldr	r2, [pc, #16]	@ (800544c <prvSampleTimeNow+0x3c>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005440:	68fb      	ldr	r3, [r7, #12]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200012dc 	.word	0x200012dc

08005450 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d812      	bhi.n	800549c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e01b      	b.n	80054c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800548a:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <prvInsertTimerInActiveList+0x7c>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7fe f939 	bl	800370c <vListInsert>
 800549a:	e012      	b.n	80054c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d206      	bcs.n	80054b2 <prvInsertTimerInActiveList+0x62>
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e007      	b.n	80054c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054b2:	4b07      	ldr	r3, [pc, #28]	@ (80054d0 <prvInsertTimerInActiveList+0x80>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fe f925 	bl	800370c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054c2:	697b      	ldr	r3, [r7, #20]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	200012d0 	.word	0x200012d0
 80054d0:	200012cc 	.word	0x200012cc

080054d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08e      	sub	sp, #56	@ 0x38
 80054d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054da:	e0a5      	b.n	8005628 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	da19      	bge.n	8005516 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054e2:	1d3b      	adds	r3, r7, #4
 80054e4:	3304      	adds	r3, #4
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	61fb      	str	r3, [r7, #28]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800550c:	6850      	ldr	r0, [r2, #4]
 800550e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005510:	6892      	ldr	r2, [r2, #8]
 8005512:	4611      	mov	r1, r2
 8005514:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f2c0 8085 	blt.w	8005628 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe f924 	bl	800377c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005534:	463b      	mov	r3, r7
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff ff6a 	bl	8005410 <prvSampleTimeNow>
 800553c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b09      	cmp	r3, #9
 8005542:	d86c      	bhi.n	800561e <prvProcessReceivedCommands+0x14a>
 8005544:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <prvProcessReceivedCommands+0x78>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	08005575 	.word	0x08005575
 8005550:	08005575 	.word	0x08005575
 8005554:	08005575 	.word	0x08005575
 8005558:	0800561f 	.word	0x0800561f
 800555c:	080055d3 	.word	0x080055d3
 8005560:	0800560d 	.word	0x0800560d
 8005564:	08005575 	.word	0x08005575
 8005568:	08005575 	.word	0x08005575
 800556c:	0800561f 	.word	0x0800561f
 8005570:	080055d3 	.word	0x080055d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	18d1      	adds	r1, r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005582:	f7ff ff65 	bl	8005450 <prvInsertTimerInActiveList>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d04a      	beq.n	8005622 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005592:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d142      	bne.n	8005622 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	441a      	add	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2300      	movs	r3, #0
 80055aa:	2100      	movs	r1, #0
 80055ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055ae:	f7ff fe19 	bl	80051e4 <xTimerGenericCommand>
 80055b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d133      	bne.n	8005622 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61bb      	str	r3, [r7, #24]
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	617b      	str	r3, [r7, #20]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	18d1      	adds	r1, r2, r3
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005606:	f7ff ff23 	bl	8005450 <prvInsertTimerInActiveList>
					break;
 800560a:	e00d      	b.n	8005628 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005618:	f000 fb72 	bl	8005d00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800561c:	e003      	b.n	8005626 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <prvProcessReceivedCommands+0x154>
					break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <prvProcessReceivedCommands+0x154>
					break;
 8005626:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005628:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <prvProcessReceivedCommands+0x174>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	1d39      	adds	r1, r7, #4
 800562e:	2200      	movs	r2, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe fbb3 	bl	8003d9c <xQueueReceive>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	f47f af4f 	bne.w	80054dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	3730      	adds	r7, #48	@ 0x30
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	200012d4 	.word	0x200012d4

0800564c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005652:	e046      	b.n	80056e2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005654:	4b2c      	ldr	r3, [pc, #176]	@ (8005708 <prvSwitchTimerLists+0xbc>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800565e:	4b2a      	ldr	r3, [pc, #168]	@ (8005708 <prvSwitchTimerLists+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3304      	adds	r3, #4
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe f885 	bl	800377c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d12f      	bne.n	80056e2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4413      	add	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	d90e      	bls.n	80056b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056a0:	4b19      	ldr	r3, [pc, #100]	@ (8005708 <prvSwitchTimerLists+0xbc>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	3304      	adds	r3, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe f82e 	bl	800370c <vListInsert>
 80056b0:	e017      	b.n	80056e2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056b2:	2300      	movs	r3, #0
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2300      	movs	r3, #0
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	2100      	movs	r1, #0
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff fd91 	bl	80051e4 <xTimerGenericCommand>
 80056c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	603b      	str	r3, [r7, #0]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <prvSwitchTimerLists+0xbc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1b3      	bne.n	8005654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <prvSwitchTimerLists+0xbc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <prvSwitchTimerLists+0xc0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a04      	ldr	r2, [pc, #16]	@ (8005708 <prvSwitchTimerLists+0xbc>)
 80056f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056fa:	4a04      	ldr	r2, [pc, #16]	@ (800570c <prvSwitchTimerLists+0xc0>)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	6013      	str	r3, [r2, #0]
}
 8005700:	bf00      	nop
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	200012cc 	.word	0x200012cc
 800570c:	200012d0 	.word	0x200012d0

08005710 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005716:	f000 f929 	bl	800596c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <prvCheckForValidListAndQueue+0x60>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d120      	bne.n	8005764 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005722:	4814      	ldr	r0, [pc, #80]	@ (8005774 <prvCheckForValidListAndQueue+0x64>)
 8005724:	f7fd ffa4 	bl	8003670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005728:	4813      	ldr	r0, [pc, #76]	@ (8005778 <prvCheckForValidListAndQueue+0x68>)
 800572a:	f7fd ffa1 	bl	8003670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800572e:	4b13      	ldr	r3, [pc, #76]	@ (800577c <prvCheckForValidListAndQueue+0x6c>)
 8005730:	4a10      	ldr	r2, [pc, #64]	@ (8005774 <prvCheckForValidListAndQueue+0x64>)
 8005732:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005734:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <prvCheckForValidListAndQueue+0x70>)
 8005736:	4a10      	ldr	r2, [pc, #64]	@ (8005778 <prvCheckForValidListAndQueue+0x68>)
 8005738:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800573a:	2300      	movs	r3, #0
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	4b11      	ldr	r3, [pc, #68]	@ (8005784 <prvCheckForValidListAndQueue+0x74>)
 8005740:	4a11      	ldr	r2, [pc, #68]	@ (8005788 <prvCheckForValidListAndQueue+0x78>)
 8005742:	2110      	movs	r1, #16
 8005744:	200a      	movs	r0, #10
 8005746:	f7fe f8ad 	bl	80038a4 <xQueueGenericCreateStatic>
 800574a:	4603      	mov	r3, r0
 800574c:	4a08      	ldr	r2, [pc, #32]	@ (8005770 <prvCheckForValidListAndQueue+0x60>)
 800574e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005750:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <prvCheckForValidListAndQueue+0x60>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <prvCheckForValidListAndQueue+0x60>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	490b      	ldr	r1, [pc, #44]	@ (800578c <prvCheckForValidListAndQueue+0x7c>)
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fd90 	bl	8004284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005764:	f000 f932 	bl	80059cc <vPortExitCritical>
}
 8005768:	bf00      	nop
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200012d4 	.word	0x200012d4
 8005774:	200012a4 	.word	0x200012a4
 8005778:	200012b8 	.word	0x200012b8
 800577c:	200012cc 	.word	0x200012cc
 8005780:	200012d0 	.word	0x200012d0
 8005784:	20001380 	.word	0x20001380
 8005788:	200012e0 	.word	0x200012e0
 800578c:	0800602c 	.word	0x0800602c

08005790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3b04      	subs	r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3b04      	subs	r3, #4
 80057ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f023 0201 	bic.w	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b04      	subs	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057c0:	4a08      	ldr	r2, [pc, #32]	@ (80057e4 <pxPortInitialiseStack+0x54>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3b14      	subs	r3, #20
 80057ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b20      	subs	r3, #32
 80057d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	080057e9 	.word	0x080057e9

080057e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057f2:	4b12      	ldr	r3, [pc, #72]	@ (800583c <prvTaskExitError+0x54>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fa:	d00b      	beq.n	8005814 <prvTaskExitError+0x2c>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <prvTaskExitError+0x28>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	60bb      	str	r3, [r7, #8]
}
 8005826:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005828:	bf00      	nop
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0fc      	beq.n	800582a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr
 800583c:	200001a4 	.word	0x200001a4

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	f04e 0e0d 	orr.w	lr, lr, #13
 800585e:	4770      	bx	lr

08005860 <pxCurrentTCBConst2>:
 8005860:	20000da4 	.word	0x20000da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005868:	4806      	ldr	r0, [pc, #24]	@ (8005884 <prvPortStartFirstTask+0x1c>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	b662      	cpsie	i
 8005874:	b661      	cpsie	f
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	df00      	svc	0
 8005880:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005882:	bf00      	nop
 8005884:	e000ed08 	.word	0xe000ed08

08005888 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800588e:	4b32      	ldr	r3, [pc, #200]	@ (8005958 <xPortStartScheduler+0xd0>)
 8005890:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	22ff      	movs	r2, #255	@ 0xff
 800589e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b2a      	ldr	r3, [pc, #168]	@ (800595c <xPortStartScheduler+0xd4>)
 80058b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005960 <xPortStartScheduler+0xd8>)
 80058b8:	2207      	movs	r2, #7
 80058ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058bc:	e009      	b.n	80058d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80058be:	4b28      	ldr	r3, [pc, #160]	@ (8005960 <xPortStartScheduler+0xd8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	4a26      	ldr	r2, [pc, #152]	@ (8005960 <xPortStartScheduler+0xd8>)
 80058c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	d0ef      	beq.n	80058be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058de:	4b20      	ldr	r3, [pc, #128]	@ (8005960 <xPortStartScheduler+0xd8>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1c3 0307 	rsb	r3, r3, #7
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d00b      	beq.n	8005902 <xPortStartScheduler+0x7a>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60bb      	str	r3, [r7, #8]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005902:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <xPortStartScheduler+0xd8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <xPortStartScheduler+0xd8>)
 800590a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800590c:	4b14      	ldr	r3, [pc, #80]	@ (8005960 <xPortStartScheduler+0xd8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005914:	4a12      	ldr	r2, [pc, #72]	@ (8005960 <xPortStartScheduler+0xd8>)
 8005916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005920:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <xPortStartScheduler+0xdc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a0f      	ldr	r2, [pc, #60]	@ (8005964 <xPortStartScheduler+0xdc>)
 8005926:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800592a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <xPortStartScheduler+0xdc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0c      	ldr	r2, [pc, #48]	@ (8005964 <xPortStartScheduler+0xdc>)
 8005932:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005938:	f000 f8b8 	bl	8005aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800593c:	4b0a      	ldr	r3, [pc, #40]	@ (8005968 <xPortStartScheduler+0xe0>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005942:	f7ff ff91 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005946:	f7ff f8ad 	bl	8004aa4 <vTaskSwitchContext>
	prvTaskExitError();
 800594a:	f7ff ff4d 	bl	80057e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	e000e400 	.word	0xe000e400
 800595c:	200013d0 	.word	0x200013d0
 8005960:	200013d4 	.word	0x200013d4
 8005964:	e000ed20 	.word	0xe000ed20
 8005968:	200001a4 	.word	0x200001a4

0800596c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	607b      	str	r3, [r7, #4]
}
 8005984:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005986:	4b0f      	ldr	r3, [pc, #60]	@ (80059c4 <vPortEnterCritical+0x58>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3301      	adds	r3, #1
 800598c:	4a0d      	ldr	r2, [pc, #52]	@ (80059c4 <vPortEnterCritical+0x58>)
 800598e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <vPortEnterCritical+0x58>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d110      	bne.n	80059ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <vPortEnterCritical+0x5c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <vPortEnterCritical+0x4e>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	603b      	str	r3, [r7, #0]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <vPortEnterCritical+0x4a>
	}
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	200001a4 	.word	0x200001a4
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059d2:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <vPortExitCritical+0x50>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <vPortExitCritical+0x26>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	607b      	str	r3, [r7, #4]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059f2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <vPortExitCritical+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <vPortExitCritical+0x50>)
 80059fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059fc:	4b07      	ldr	r3, [pc, #28]	@ (8005a1c <vPortExitCritical+0x50>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <vPortExitCritical+0x44>
 8005a04:	2300      	movs	r3, #0
 8005a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	f383 8811 	msr	BASEPRI, r3
}
 8005a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	200001a4 	.word	0x200001a4

08005a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a20:	f3ef 8009 	mrs	r0, PSP
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <pxCurrentTCBConst>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a30:	6010      	str	r0, [r2, #0]
 8005a32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005a36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a3a:	f380 8811 	msr	BASEPRI, r0
 8005a3e:	f7ff f831 	bl	8004aa4 <vTaskSwitchContext>
 8005a42:	f04f 0000 	mov.w	r0, #0
 8005a46:	f380 8811 	msr	BASEPRI, r0
 8005a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a56:	f380 8809 	msr	PSP, r0
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	4770      	bx	lr

08005a60 <pxCurrentTCBConst>:
 8005a60:	20000da4 	.word	0x20000da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop

08005a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	607b      	str	r3, [r7, #4]
}
 8005a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a82:	f7fe ff4f 	bl	8004924 <xTaskIncrementTick>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a8c:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <xPortSysTickHandler+0x40>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	2300      	movs	r3, #0
 8005a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f383 8811 	msr	BASEPRI, r3
}
 8005a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <vPortSetupTimerInterrupt+0x30>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <vPortSetupTimerInterrupt+0x34>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005abc:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <vPortSetupTimerInterrupt+0x38>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a09      	ldr	r2, [pc, #36]	@ (8005ae8 <vPortSetupTimerInterrupt+0x3c>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	099b      	lsrs	r3, r3, #6
 8005ac8:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <vPortSetupTimerInterrupt+0x40>)
 8005aca:	3b01      	subs	r3, #1
 8005acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ace:	4b03      	ldr	r3, [pc, #12]	@ (8005adc <vPortSetupTimerInterrupt+0x30>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr
 8005adc:	e000e010 	.word	0xe000e010
 8005ae0:	e000e018 	.word	0xe000e018
 8005ae4:	20000198 	.word	0x20000198
 8005ae8:	10624dd3 	.word	0x10624dd3
 8005aec:	e000e014 	.word	0xe000e014

08005af0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005af6:	f3ef 8305 	mrs	r3, IPSR
 8005afa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	d915      	bls.n	8005b2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b02:	4a17      	ldr	r2, [pc, #92]	@ (8005b60 <vPortValidateInterruptPriority+0x70>)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b0c:	4b15      	ldr	r3, [pc, #84]	@ (8005b64 <vPortValidateInterruptPriority+0x74>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	7afa      	ldrb	r2, [r7, #11]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d20b      	bcs.n	8005b2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	607b      	str	r3, [r7, #4]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b68 <vPortValidateInterruptPriority+0x78>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b36:	4b0d      	ldr	r3, [pc, #52]	@ (8005b6c <vPortValidateInterruptPriority+0x7c>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d90b      	bls.n	8005b56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	603b      	str	r3, [r7, #0]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <vPortValidateInterruptPriority+0x62>
	}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr
 8005b60:	e000e3f0 	.word	0xe000e3f0
 8005b64:	200013d0 	.word	0x200013d0
 8005b68:	e000ed0c 	.word	0xe000ed0c
 8005b6c:	200013d4 	.word	0x200013d4

08005b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	@ 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b7c:	f7fe fe18 	bl	80047b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b80:	4b5a      	ldr	r3, [pc, #360]	@ (8005cec <pvPortMalloc+0x17c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b88:	f000 f916 	bl	8005db8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b8c:	4b58      	ldr	r3, [pc, #352]	@ (8005cf0 <pvPortMalloc+0x180>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 8090 	bne.w	8005cba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01e      	beq.n	8005bde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d015      	beq.n	8005bde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f023 0307 	bic.w	r3, r3, #7
 8005bb8:	3308      	adds	r3, #8
 8005bba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <pvPortMalloc+0x6e>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	617b      	str	r3, [r7, #20]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d06a      	beq.n	8005cba <pvPortMalloc+0x14a>
 8005be4:	4b43      	ldr	r3, [pc, #268]	@ (8005cf4 <pvPortMalloc+0x184>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d865      	bhi.n	8005cba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bee:	4b42      	ldr	r3, [pc, #264]	@ (8005cf8 <pvPortMalloc+0x188>)
 8005bf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bf2:	4b41      	ldr	r3, [pc, #260]	@ (8005cf8 <pvPortMalloc+0x188>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bf8:	e004      	b.n	8005c04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d903      	bls.n	8005c16 <pvPortMalloc+0xa6>
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f1      	bne.n	8005bfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c16:	4b35      	ldr	r3, [pc, #212]	@ (8005cec <pvPortMalloc+0x17c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d04c      	beq.n	8005cba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2208      	movs	r2, #8
 8005c26:	4413      	add	r3, r2
 8005c28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	1ad2      	subs	r2, r2, r3
 8005c3a:	2308      	movs	r3, #8
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d920      	bls.n	8005c84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <pvPortMalloc+0xfc>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	613b      	str	r3, [r7, #16]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c7e:	69b8      	ldr	r0, [r7, #24]
 8005c80:	f000 f8fc 	bl	8005e7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c84:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <pvPortMalloc+0x184>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <pvPortMalloc+0x184>)
 8005c90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c92:	4b18      	ldr	r3, [pc, #96]	@ (8005cf4 <pvPortMalloc+0x184>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b19      	ldr	r3, [pc, #100]	@ (8005cfc <pvPortMalloc+0x18c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d203      	bcs.n	8005ca6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c9e:	4b15      	ldr	r3, [pc, #84]	@ (8005cf4 <pvPortMalloc+0x184>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a16      	ldr	r2, [pc, #88]	@ (8005cfc <pvPortMalloc+0x18c>)
 8005ca4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	4b11      	ldr	r3, [pc, #68]	@ (8005cf0 <pvPortMalloc+0x180>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cba:	f7fe fd87 	bl	80047cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <pvPortMalloc+0x170>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60fb      	str	r3, [r7, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <pvPortMalloc+0x16c>
	return pvReturn;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3728      	adds	r7, #40	@ 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20001fe0 	.word	0x20001fe0
 8005cf0:	20001fec 	.word	0x20001fec
 8005cf4:	20001fe4 	.word	0x20001fe4
 8005cf8:	20001fd8 	.word	0x20001fd8
 8005cfc:	20001fe8 	.word	0x20001fe8

08005d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04a      	beq.n	8005da8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d12:	2308      	movs	r3, #8
 8005d14:	425b      	negs	r3, r3
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4b22      	ldr	r3, [pc, #136]	@ (8005db0 <vPortFree+0xb0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <vPortFree+0x46>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60fb      	str	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	e7fd      	b.n	8005d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <vPortFree+0x66>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	4b11      	ldr	r3, [pc, #68]	@ (8005db0 <vPortFree+0xb0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d019      	beq.n	8005da8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d115      	bne.n	8005da8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <vPortFree+0xb0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	401a      	ands	r2, r3
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d8c:	f7fe fd10 	bl	80047b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	4b07      	ldr	r3, [pc, #28]	@ (8005db4 <vPortFree+0xb4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4413      	add	r3, r2
 8005d9a:	4a06      	ldr	r2, [pc, #24]	@ (8005db4 <vPortFree+0xb4>)
 8005d9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d9e:	6938      	ldr	r0, [r7, #16]
 8005da0:	f000 f86c 	bl	8005e7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005da4:	f7fe fd12 	bl	80047cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005da8:	bf00      	nop
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20001fec 	.word	0x20001fec
 8005db4:	20001fe4 	.word	0x20001fe4

08005db8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005dc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dc4:	4b27      	ldr	r3, [pc, #156]	@ (8005e64 <prvHeapInit+0xac>)
 8005dc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3307      	adds	r3, #7
 8005dd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <prvHeapInit+0xac>)
 8005de8:	4413      	add	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <prvHeapInit+0xb0>)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005df6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e68 <prvHeapInit+0xb0>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e04:	2208      	movs	r2, #8
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1a9b      	subs	r3, r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0307 	bic.w	r3, r3, #7
 8005e12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <prvHeapInit+0xb4>)
 8005e18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e1a:	4b14      	ldr	r3, [pc, #80]	@ (8005e6c <prvHeapInit+0xb4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e22:	4b12      	ldr	r3, [pc, #72]	@ (8005e6c <prvHeapInit+0xb4>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e38:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <prvHeapInit+0xb4>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	@ (8005e70 <prvHeapInit+0xb8>)
 8005e46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a09      	ldr	r2, [pc, #36]	@ (8005e74 <prvHeapInit+0xbc>)
 8005e4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e50:	4b09      	ldr	r3, [pc, #36]	@ (8005e78 <prvHeapInit+0xc0>)
 8005e52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e56:	601a      	str	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	200013d8 	.word	0x200013d8
 8005e68:	20001fd8 	.word	0x20001fd8
 8005e6c:	20001fe0 	.word	0x20001fe0
 8005e70:	20001fe8 	.word	0x20001fe8
 8005e74:	20001fe4 	.word	0x20001fe4
 8005e78:	20001fec 	.word	0x20001fec

08005e7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e84:	4b27      	ldr	r3, [pc, #156]	@ (8005f24 <prvInsertBlockIntoFreeList+0xa8>)
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e002      	b.n	8005e90 <prvInsertBlockIntoFreeList+0x14>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d8f7      	bhi.n	8005e8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d108      	bne.n	8005ebe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d118      	bne.n	8005f04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b14      	ldr	r3, [pc, #80]	@ (8005f28 <prvInsertBlockIntoFreeList+0xac>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d00d      	beq.n	8005efa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e008      	b.n	8005f0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	@ (8005f28 <prvInsertBlockIntoFreeList+0xac>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e003      	b.n	8005f0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d002      	beq.n	8005f1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr
 8005f24:	20001fd8 	.word	0x20001fd8
 8005f28:	20001fe0 	.word	0x20001fe0

08005f2c <memset>:
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4402      	add	r2, r0
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d100      	bne.n	8005f36 <memset+0xa>
 8005f34:	4770      	bx	lr
 8005f36:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3a:	e7f9      	b.n	8005f30 <memset+0x4>

08005f3c <__libc_init_array>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	2600      	movs	r6, #0
 8005f40:	4d0c      	ldr	r5, [pc, #48]	@ (8005f74 <__libc_init_array+0x38>)
 8005f42:	4c0d      	ldr	r4, [pc, #52]	@ (8005f78 <__libc_init_array+0x3c>)
 8005f44:	1b64      	subs	r4, r4, r5
 8005f46:	10a4      	asrs	r4, r4, #2
 8005f48:	42a6      	cmp	r6, r4
 8005f4a:	d109      	bne.n	8005f60 <__libc_init_array+0x24>
 8005f4c:	f000 f828 	bl	8005fa0 <_init>
 8005f50:	2600      	movs	r6, #0
 8005f52:	4d0a      	ldr	r5, [pc, #40]	@ (8005f7c <__libc_init_array+0x40>)
 8005f54:	4c0a      	ldr	r4, [pc, #40]	@ (8005f80 <__libc_init_array+0x44>)
 8005f56:	1b64      	subs	r4, r4, r5
 8005f58:	10a4      	asrs	r4, r4, #2
 8005f5a:	42a6      	cmp	r6, r4
 8005f5c:	d105      	bne.n	8005f6a <__libc_init_array+0x2e>
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
 8005f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f64:	4798      	blx	r3
 8005f66:	3601      	adds	r6, #1
 8005f68:	e7ee      	b.n	8005f48 <__libc_init_array+0xc>
 8005f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6e:	4798      	blx	r3
 8005f70:	3601      	adds	r6, #1
 8005f72:	e7f2      	b.n	8005f5a <__libc_init_array+0x1e>
 8005f74:	08006414 	.word	0x08006414
 8005f78:	08006414 	.word	0x08006414
 8005f7c:	08006414 	.word	0x08006414
 8005f80:	08006418 	.word	0x08006418

08005f84 <memcpy>:
 8005f84:	440a      	add	r2, r1
 8005f86:	4291      	cmp	r1, r2
 8005f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f8c:	d100      	bne.n	8005f90 <memcpy+0xc>
 8005f8e:	4770      	bx	lr
 8005f90:	b510      	push	{r4, lr}
 8005f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f96:	4291      	cmp	r1, r2
 8005f98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f9c:	d1f9      	bne.n	8005f92 <memcpy+0xe>
 8005f9e:	bd10      	pop	{r4, pc}

08005fa0 <_init>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr

08005fac <_fini>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr
